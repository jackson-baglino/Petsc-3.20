Executing: uname -s
stdout: Darwin
=============================================================================================
                         Configuring PETSc to compile on your system
=============================================================================================

================================================================================
================================================================================
Starting configure run at Sun, 01 Jun 2025 17:13:55 -0700
Configure Options: --configModules=PETSc.Configure --optionsModule=config.compilerOptions --with-cc=gcc --with-cxx=g++ --with-fc=gfortran-12 --with-debugging=0 --with-cuda=0 --with-mpi=yes --with-shared-libraries=0 --with-64-bit-indices=0 COPTFLAGS="-O3 -march=native -mtune=native" CXXOPTFLAGS="-O3 -march=native -mtune=native" --download-mumps --download-scalapack --download-blacs --download-mpich --download-fblaslapack --download-metis --download-parmetis --download-superlu_dist --download-cmake PETSC_ARCH=MAC_Si-M2_MPICH-4.3.0_PETSC-3.22_GCC-12.4.0
Working directory: /Users/jacksonbaglino/Petsc-3.20
Machine platform:
uname_result(system='Darwin', node='dhcp-101-103.caltech.edu', release='23.4.0', version='Darwin Kernel Version 23.4.0: Fri Mar 15 00:12:49 PDT 2024; root:xnu-10063.101.17~1/RELEASE_ARM64_T6020', machine='arm64')
Python version:
3.9.22 (main, Apr  8 2025, 15:21:55) 
[Clang 16.0.0 (clang-1600.0.26.6)]
================================================================================
  Environmental variables
TERM_PROGRAM=Apple_Terminal
SHELL=/bin/zsh
TERM=xterm-256color
TMPDIR=/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/
TERM_PROGRAM_VERSION=453
TERM_SESSION_ID=3C3F0897-7705-4CF0-ADA9-BA9D339613DF
USER=jacksonbaglino
SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.gdsWxpaZcA/Listeners
PATH=/opt/homebrew/opt/gcc@12/bin:/opt/homebrew/opt/gcc@12/bin:/Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin:/opt/homebrew/opt/gcc@12/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/opt/X11/bin:/Library/TeX/texbin
__CFBundleIdentifier=com.apple.Terminal
PWD=/Users/jacksonbaglino/Petsc-3.20
XPC_FLAGS=0x0
XPC_SERVICE_NAME=0
SHLVL=1
HOME=/Users/jacksonbaglino
LOGNAME=jacksonbaglino
DISPLAY=/private/tmp/com.apple.launchd.CZzveCEyek/org.xquartz:0
OLDPWD=/Users/jacksonbaglino
HOMEBREW_PREFIX=/opt/homebrew
HOMEBREW_CELLAR=/opt/homebrew/Cellar
HOMEBREW_REPOSITORY=/opt/homebrew
INFOPATH=/opt/homebrew/share/info:
PETSC_DIR=/Users/jacksonbaglino/Petsc-3.20
PETIGA_DIR=/Users/jacksonbaglino/PetIGA-3.20
PETSC_ARCH=MAC_Si-M2_MPICH-4.3.0_PETSC-3.20_GCC-12.4.0
CLICOLOR=1
LSCOLORS=ExGxBxDxCxEgEdxbxgxcxd
VIRTUAL_ENV=/Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK
PS1=(venv_EffK) %n@%m %1~ %# 
LANG=en_US.UTF-8
_=/Users/jacksonbaglino/Petsc-3.20/./configure
__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0
    Files in path provided by default path
      /opt/homebrew/opt/gcc@12/bin: gcc-12 g++-12 gcc-ar-12 gcc-nm-12 gcov-12 aarch64-apple-darwin23-gcc-12 aarch64-apple-darwin23-g++-12 gcc-ranlib-12 aarch64-apple-darwin23-gcc-nm-12 aarch64-apple-darwin23-gcc-ar-12 lto-dump-12 aarch64-apple-darwin23-gfortran-12 gcov-dump-12 c++-12 gfortran-12 cpp-12 gcov-tool-12 aarch64-apple-darwin23-gcc-ranlib-12 aarch64-apple-darwin23-c++-12
      /opt/homebrew/opt/gcc@12/bin: gcc-12 g++-12 gcc-ar-12 gcc-nm-12 gcov-12 aarch64-apple-darwin23-gcc-12 aarch64-apple-darwin23-g++-12 gcc-ranlib-12 aarch64-apple-darwin23-gcc-nm-12 aarch64-apple-darwin23-gcc-ar-12 lto-dump-12 aarch64-apple-darwin23-gfortran-12 gcov-dump-12 c++-12 gfortran-12 cpp-12 gcov-tool-12 aarch64-apple-darwin23-gcc-ranlib-12 aarch64-apple-darwin23-c++-12
      /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin: pip3.9 rst2html pyftsubset jupyter-run pyjson5 jupyter-labextension Activate.ps1 python3 pybabel jlpm ttx rst2xml docutils python debugpy pip3 ipython rst2man activate.fish rst2odt send2trash fonttools jupyter-labhub jupyter-server python3.9 jupyter-dejavu f2py ipython3 pip httpx jupyter-nbconvert jupyter-lab jsonschema wsdump jupyter-troubleshoot pygmentize jupyter-migrate rst2xetex rst2latex rst2html4 activate rst2s5 jupyter-events normalizer numpy-config rst2html5 jupyter-trust jsonpointer rst2pseudoxml jupyter-kernelspec jupyter-kernel jupyter debugpy-adapter pyftmerge jupyter-execute activate.csh
      /opt/homebrew/opt/gcc@12/bin: gcc-12 g++-12 gcc-ar-12 gcc-nm-12 gcov-12 aarch64-apple-darwin23-gcc-12 aarch64-apple-darwin23-g++-12 gcc-ranlib-12 aarch64-apple-darwin23-gcc-nm-12 aarch64-apple-darwin23-gcc-ar-12 lto-dump-12 aarch64-apple-darwin23-gfortran-12 gcov-dump-12 c++-12 gfortran-12 cpp-12 gcov-tool-12 aarch64-apple-darwin23-gcc-ranlib-12 aarch64-apple-darwin23-c++-12
      /opt/homebrew/bin: cpan rubberband qt-configure-module wheel3.11 lzmainfo unzstd ssl_client2 Assistant qt-cmake-create dh_client ccmake qmake pip3.9 msgconv metatest event_rpcgen.py qmldom lame pkg-config lstmtraining proj hwloc-compress-dir mbedtls-selftest merge_unicharsets gif2rgb general_assembly.pl pktdumper djxl tree qmlplugindump gm2 Linguist msggrep srt-file-transmit idle3.11 cgnsupdate pydoc3.13 gmake hzip sndfile-cmp canbusutil ffhash pcre2grep autopoint convertsegfilestops macdeployqt mpif90 gcc-14 gifclrmp pyftsubset hwloc-bind pzstd qopcuaxmldatatypes2cpp qmltc ffmpeg tificc instmodsh qmlprofiler dbus-monitor zmqsend hydra_pmi_proxy 2to3-3.12 sexp-conv perlivp meshio h5copy c_rehash clean-diff xzdec pod2usage tiffsplit gcc-12 corelist wheel3 ssimulacra2 pydoc3.12 fax2tiff hunzip androiddeployqt6 cert_req linkicc msgcomm fourcc2pixfmt git-receive-pack ecdh_curve25519 wordlist2hunspell h5perf_serial fc-list opj_compress srt-tunnel balsam mpirun qmltestrunner set_unicharset_properties rsa_sign_pss libnetcfg ecdsa gtester gcc-nm-14 lupdate rsa_sign tifffile cert_write qmltime cxpm pk_sign gfortran asn1Decoding opj_dump cntraining gm2-14 g++-12 python3 pip3.12 macdeployqt6 png-fix-itxt vtkProbeOpenGLVersion-9.4 gcc-ar-12 jxlinfo key_app_writer gcc-nm-12 xterm meshdebug encguess qml latexml cmake zstdless bd_info materialeditor opj_decompress tiffdump convertfilestops ttx adf2hdf h5unjam seek_print ambiguous_words fc-pattern mpiexec.hydra g++-14 pip3.13 shadergen lstmeval assimp dtls_client gcc-ar-14 vtkParseJava-9.4 wheel3.9 unxz lrelease hwloc-distrib libav-merge-next-commit gen_key h5delete tiff2bw latexmlpost balsamui jiv freetype-config pip3 exrmultipart libdeflate-gzip gr2fonttest venc_data_dump enc_recon_frame_test gnutls-serv ssl_pthread_server exr_to_pq exrmultiview pcre2test gdbus-codegen gcov-14 fc-validate cjpeg aarch64-apple-darwin23-gcc-14 h5stat mpg123 jpegtran h5ls exrmaketiled wordforms srt-ffplay query_compile_time_config lstopo libpng16-config pod2text imageio_remove_bin xzegrep gsettings jxl_from_tree pngfix butteraugli_main shapeclustering nccopy glib-compile-schemas webpmux mpg123-id3dump fc-query tiffcmp pk_verify brotli ssl_server ptardiff pyuic6 classifier_tester exr2aces tiff2pdf req_app xtractprotos unlzma json_pp lz4cat normalize.py sidxindex perl unicharset_extractor qdbusxml2cpp psktool hwloc-calc gcov-12 gen_entropy perlbug xzfgrep aarch64-apple-darwin23-gcc-12 latexmlc webpinfo piconv hwloc-info h5jam libpng-config koi8rxterm exrinfo exrmetrics gdbm_dump SvtAv1EncApp ptargrep h2ph gobject-query bomtool dbus-launch python3.12-config asn1Coding brew make_chlayout_test vmaf mini_client h5cc prove podchecker hunspell aarch64-apple-darwin23-g++-12 texture_to_cube cgnscheck lz4 fonttools converttopdf mpivars msgen pylupdate6 aarch64-apple-darwin23-gm2-14 latexmlmath sndfile-metadata-set shasum python3.11 munch git-upload-archive dawg2wordlist djpeg sndfile-salvage cgnslist wordlist2dawg ptar msgmerge tesseract tiffcrop qqem crypto_bench qmlformat pem2der h5mkgrp vtkWrapSerDes-9.4 scale_slice_test gi-decompile-typelib dbus-test-tool invgeod gen_random_ctr_drbg gio-querymodules mpif77 zstdgrep aarch64-apple-darwin23-g++-14 fribidi h5format_convert gie h5hlfc scooby idle3 qtpaths6 python3.9-config nettle-pbkdf2 envsubst xz cairo-trace h5repack gnutls-cli-debug glib-compile-resources python3.9 msginit unmunch dbus-send pl2pm benchmark_xl source2c idle3.12 text2image unwrap-diff aarch64-apple-darwin23-gcc-ar-14 gen-rc dh_server h5fuse speexdec pkcs1-conv img2webp giftext mpichversion hwloc-ls strerror qdbusviewer vtkpython bd_splice plotframes generate_lut_template tiffdither mpicc htop crl_app python3-config pango-segmentation rsa_verify f2py gcc-ranlib-12 tiffset local_tone_map ssl_client1 pip lto-dump-14 xyb_range gnutls-certtool imagetops wheel3.12 aarch64-apple-darwin23-gcc-nm-12 pango-view aomdec ispellaff2myspell key_ladder_demo.sh h5watch dbus-daemon libdeflate-gunzip tiff2ps perlthanks zmqshell.py ssl_fork_server pkgconf pango-list exrmanifest hwloc-patch giffix aarch64-apple-darwin23-gcc-ar-12 h5c++ lzless query_included_headers idle3.13 rsa_genkey xsubpp qsb pydoc3.11 streamzip fileinfo md_hmac_demo tiffinfo perldoc geod combine_lang_model gresource converttops gcc-ranlib-14 flac key_app display_to_hlg ristsender lto-dump-12 patcheck wheel3.13 ocsptool 2to3-3.11 sndfile-concat aarch64-apple-darwin23-gcc-nm-14 imageio_download_bin svgtoqml shapegen chmorph gettext cgnsconvert hmac_demo gtester-report murge markdown-it pip3.11 gettext.sh ctest qdistancefieldgenerator rsa_verify_pss cgnsnames aarch64-apple-darwin23-gfortran-12 parkill gcov-dump-14 ssl_mail_client convertsegfilestopdf xzless pal2rgb tiff2fsspec convertformat gfortran-14 c++-14 zstd qtpaths exrmakepreview msgcmp lzcmp pcre2-config missing_codec_desc lconvert pydoc3.9 pygmentize cgnsdiff xzcat generic_sum metaflac dav1d ncdump transicc exrstdattr wrjpgcom mpicxx combine_tessdata ffprobe convertfilestopdf dvd2concat sndfile-deinterleave lz4c aarch64-apple-darwin23-gfortran-14 gcov-dump-12 qmllint androidtestrunner c++-12 gifbuild gfortran-12 aead_demo aviocat h5diff msgcat aomenc rav1e zstdcat dbus-update-activation-environment icc_simplify pq_to_hlg projinfo cipher_aead_demo imginfo cws2fws gif2webp Designer h5clear dbus-run-session qmlls psicc djxl_fuzzer_corpus p11tool recode-sr-latin speexenc glib-gettextize xzcmp cert_app giftool lzcat androiddeployqt zeroize psa_constant_names jpgicc target_dec_fate.sh nettle-hash hwloc-diff qt-faststart perl5.40.2 dh_genprime sndfile-info h2xs lstopo-no-graphics dtls_server fc-cache unlz4 analyze trasher dbus-cleanup-sockets hwloc-ps gdbus trust zstdmt pk_decrypt dbus-uuidgen rsa_encrypt fc-cat cpp-12 pod2man graph2dot enc2xs git-cvsserver lzdiff idle3.9 udp_proxy gcov-tool-14 out123 gdbmtool msgexec x264 glib-genmarshal python3.13-config ngettext mftraining git-shell mpg123-strip cooker h5debug md2html dwebp ffescape psa_hash vtkWrapJava-9.4 pixeltool qdbus aarch64-apple-darwin23-gcc-ranlib-14 vtkWrapPythonInit-9.4 tjbench qmleasing qdbuscpp2xml qtdiag6 gcov-tool-12 x265 normalizer lzmadec fax2ps fc-match vtkWrapHierarchy-9.4 numpy-config h5repart lzgrep cgnscompress msgunfmt bd_list_titles instancer h5import tiffcp cpp-14 gi-compile-repository lzmore git-upload-pack latexmlfind hydra_persist danetool h5fc mpiexec nettle-lfib-stream aarch64-apple-darwin23-gcc-ranlib-12 resize enum_options makealias qtdiag ismindex openssl sndfile-metadata-get hb-info key_ladder_demo exrenvmap splain msgfilter cct scalar load_roots python3.12 lzfgrep exrheader cs2cs ssl_server2 fc-conflist glib-mkenums crypt_and_hash xzmore pod2html asn1Parser hb-view nc-config idn2 cwebp vtkWrapPython-9.4 sndfile-interleave render_hlg sndfile-convert tiffmedian 2to3-3.9 mpic++ tone_map xzgrep mpifort pydoc3 invproj hb-shape aarch64-apple-darwin23-c++-14 ssl_context_info ncgen3 pk_encrypt rsa_decrypt rist2rist hdf2adf hydra_nameserver lzma qtplugininfo gdbm_load tiffcomment qmlscene jasper decode_and_encode projsync ncgen p11-kit qmlpreview curve_keygen sndfile-play ffplay pyftmerge ristreceiver h5hlcc rdjpgcom python3.11-config sdl2-config ristsrppasswd lzegrep git cpack qmake6 uncoded_frame rubberband-r3 mbedtls-benchmark raw2tiff msgfmt gnutls-cli mirror_server_stop bisect-create srt-live-transmit ppm2tiff loudnorm.rb affixcompress xzdiff msgattrib python3.13 crypto_examples imgcmp tiff2rgba gi-inspect-typelib zipdetails xgettext probetest vwebp hb-subset h5hlc++ cjxl ffeval gio hwloc-annotate qt-cmake mirror_server h5dump uxterm .keepme fc-scan gettextize aarch64-apple-darwin23-c++-12 lsm2bin ssimulacra_main msguniq
      /opt/homebrew/sbin: unbound-anchor unbound-checkconf unbound-control unbound unbound-control-setup unbound-host .keepme
      /usr/local/bin: dvipdf ps2ps gs-noX11 gs ps2pdfwr ps2pdf12 gsdj pdf2dsc ps2pdf14 gsnd ps2pdf13 code gs-X11 pphs gsdj500 ps2ascii ps2pdf pf2afm pfbtopfa gslp printafm ps2ps2 gslj ps2epsi gsbj unix-lpr.sh pdf2ps eps2eps lprsetup.sh
      /System/Cryptexes/App/usr/bin: safaridriver
      /usr/bin: ptargrep5.30 uux cpan loads.d htmltree5.30 write lwp-mirror5.30 indent bzip2recover hdiutil top gktool javah tee tidy_changelog xip yapp wsimport bzfgrep qlmanage snmptranslate split chsh xml2man pl2pm5.30 man lpoptions tabs rview lsvfs zgrep dbiprof zmore pod2usage5.30 gcov parldyn5.34 package-stash-conflicts5.30 dbiprof5.30 vim mandoc_soelim xjc bzmore dyld_info package-stash-conflicts cancel apply bzgrep umask g++ libtool findrule5.30 ptar5.30 unalias h2xs5.30 scandeps5.34.pl mp2bug viewdiagnostic mkfifo toe hexdump Rez cap_mkdb ictool cmp syscallbypid.d snmpset locate trustcachectl afconvert afclip tidy_changelog5.30 bzegrep instmodsh extcheck javapackager pl compress fddist db_upgrade diagnose-fu yamlpp-load-dump ctags zdiff yamlpp-parse-emit pathchk mesg setregion perlivp yamlpp-highlight5.30 xpath5.30 c++ pod2readme pp vi iofileb.d errinfo zipgrep pod2usage alias wait safaridriver bzdiff unpack200 corelist expand strings lwp-dump5.34 appletviewer idlj dbiproxy5.34 wall brctl yapp5.34 gm4 db_hotbackup auvaltool applesingle scandeps5.30.pl clang ibtool tty demandoc git-receive-pack infotocap pkill cups-config piconv5.34 basename nclist objdump install native2ascii c99 desdp binhex perlbug5.34 lsmp xmllint yamlpp-highlight ipcount5.34 last vm_stat syslog net-snmp-cert treereg5.30 nslookup vimdiff topsyscall libnetcfg cpan5.30 c++filt avbdiagnose nice xcscontrol truncate calendar locale strip symbolscache trace tops lprm tiffutil du debinhex5.34.pl diff3 cupstestppd json_pp5.30 sw_vers fs_usage host jarsigner app-sso devmodectl nscurl logger caffeinate pod2html5.30 say net-snmp-create-v3-user zipdetails5.34 config_data5.34 plutil python3 avbutil xcode-select libnetcfg5.30 powermetrics encguess5.34 moose-outdated net-server cvmkdir ldapmodify iofile.d join SafeEjectGPU snmpdelta ssh-keyscan renice xxd clangd scandeps.pl nettop ppdmerge snmpconf xsltproc osascript iotop lex encguess eyapp5.34 ctf_insert csplit swift-inspect splain5.30 iconv captoinfo snmpinform lsbom pbcopy sort xpath snmpdf whoami sc_usage jot ocspcheck mkbom ldapurl json_xs pkgbuild yamlpp-events cpuwalk.d cvmkfile update_dyld_shared_cache ldapmodrdn systemextensionsctl file db_printlog sourcekit-lsp debinhex5.30.pl podchecker5.34 hash bc fontrestore mg sfltool less bunzip2 touch rmic dispqlen.d db_archive getopt instmodsh5.30 krb5-config security perlthanks5.34 hiutil ip2cc5.30 json_xs5.34 pip3 pod2man5.34 lastwords rmid sed ld dbilogstrip5.30 awk ip2cc syscallbyproc.d umtool snmpstatus uudecode psm fmt zless enc2xs5.34 xslt-config sdef ncctl jmc pod2text bashbug mail yamlpp-parse-emit5.30 chpass sips par5.34.pl xcrun bzcmp lldb chfn ipcount newaliases nano lam pod2readme5.30 ipptool irb ptardiff bzless sysdiagnose logname tset chgrp cu printenv yamlpp-load-dump5.30 unvis shasum5.30 atq seq fc AssetCacheManagerUtil xgettext5.34.pl colldef net-server5.30 jdb perl5.30 wish uname hpmdiagnose timer_analyser.d jstack parl unzip db_stat rmiregistry json_pp test-yaml ptardiff5.30 zprint kinit mib2c od bsdtar perl findrule tbtdiagnose mcxquery lwp-download ppdpo crontab reset kextutil par5.30.pl bzcat dbicadmin ex perlbug jvisualvm footprint lsappinfo lwp-download5.34 db_load fwkdp piconv read snmpusm tkpp5.34 test-yaml5.34 execsnoop pagesize lp base64 ptargrep jar h2ph readlink opensnoop rake rvim jcmd dmc vimtutor prove5.34 spfquery5.34 perlivp5.34 perldoc5.30 xgettext5.30.pl iperf3-darwin prove newproc.d gencat mdutil znew podchecker mcxrefresh colrm dbilogstrip pagestuff crlrefresh headerdoc2html jrunscript pp5.34 filtercalltree afhash sandbox-exec snmpvacm stapler codecctl fwkpfv sftp wc jps rsync osacompile yamlpp-load5.30 hdxml2manxml gzcat delv thermal pico IOMFB_FDR_Loader shasum comm mpsgraphtool resolveLinks xcdebug dbicadmin5.30 lpq java bundle gzip yamlpp-events5.30 zipcloak git-upload-archive xml2-config encode_keychange traptoemail gcc smbutil diff ri agvtool cksum corelist5.34 segedit zipnote ptar printf iptab5.34 AssetCacheTetheratorUtil column ldapexop ippfind syscallbysysc.d groups dwarfdump ppdc rs spfd config_data slogin latency lsm h2ph5.30 xar db_codegen lwp-request5.34 dns-sd tab2space avconvert xsubpp5.30 jhsdb unzipsfx crc325.34 treereg parl5.30 spfd5.34 csreq whatis gperf iconutil zipsplit lwp-dump pathopens.d tail whois nsupdate crc32 ldapdelete grep macerror5.34 moose-outdated5.30 rwbytype.d script pod2text5.30 vtool more ldapwhoami pl2pm ncinit tkmib cal afplay time ssh-agent afktool gcore javap xed uuname javaws ptar5.34 findrule5.34 env pr h2xs5.34 head dsymutil clear manpath apropos units curl-config htmltree5.34 lwp-mirror5.34 ptargrep5.34 kgetcred rev SplitForks uniq tclsh binhex5.30.pl shazam productsign mklocale defaults tic zip uulog pl2pm5.34 atrm curl wdutil agentxtrap db_verify servertool newgrp pod2usage5.34 timerfires rpcgen swcutil perlthanks dbiprof5.34 parldyn5.30 snmpnetstat package-stash-conflicts5.34 lastcomm getconf kpasswd dist_package_tool vis dbiproxy ipcrm bputil net-snmp-config otool lwp-dump5.30 killall patch tailspin su ul compression_tool dbiproxy5.30 tkcon ssh kdestroy yapp5.30 snmpgetnext type xsubpp jhat tidy tftp assetutil AssetCacheLocatorUtil orbd usbcfwflasher streamzip networkQuality ktrace DeRez textutil xgettext.pl automator wsgen stat perldoc javac xcsdiagnose mdfind mdls codesign_allocate binhex5.34.pl mddiagnose snmpbulkwalk keytool tidy_changelog5.34 fileproviderctl binhex.pl IOSDebug dtruss dserr tiff2icns mandoc pbpaste policytool yamlpp-highlight5.34 actool xpath5.34 heap sum lskq macbinary ncdestroy nc json_pp5.34 snmptrap tsort uuencode cpp swift batch sqlite3 make pod2html5.34 dig zipdetails5.30 macerror infocmp eslogger apt trimforce nm flex++ osadecompile IOAccelMemory config_data5.30 automationmodetool ssh-add machine encguess5.30 libnetcfg5.34 wish8.5 screen snmpget piconv5.30 pcsctest codesign atos llvm-gcc mailq arch ssh-keygen snmptable kill.d ditto getopts users snmpbulkget ipcount5.30 sdp perlbug5.30 cpan5.34 treereg5.34 showmount taskinfo ar who mktemp unifdef yaa cut imptrace pack200 ippeveprinter hdid dc mailx odutil jsadebugd shortcuts xargs tkpp priclass.d topsysproc nl podchecker5.30 view jjs spfquery sample bg lipo seeksize.d eyapp clang++ setuids.d instmodsh5.34 aa shlock symbols perlthanks5.30 xctrace pod2man5.30 gzexe json_xs5.30 ip2cc5.34 usbdiagnose genstrings at what sdx m4 asa iptab swiftc nfsstat eyapp5.30 uupick ipcs pluginkit as splain5.34 fold gnumake log tmutil certtool vmmap system-override h2xs csrutil shar ldappasswd ResMerger bitesize.d db_checkpoint funzip pod2readme5.34 power_report.sh iosnoop atsutil osalang dirname pod2man enc2xs shasum5.34 iopending ncal yamlpp-load-dump5.34 chflags derq fg rwbypid.d jmap dscl leaks perl5.34 nbdst net-server5.34 mnthome jshell dsexport mdimport parldyn id procsystime dbilogstrip5.34 cd quota uuto fuser dsimport git-shell ldapsearch command snmp-bridge-mib egrep notifyutil cc dsmemberutil podselect whereis tccutil find jstat zcat unifdefall jlink enc2xs5.30 pridist.d size timesyncanalyse uttype uustat snmpwalk bintrans llvm-g++ yamlpp-parse-emit5.34 scp tnameserv true afinfo hidutil ldapadd pwpolicy profiles yacc kswitch xcodebuild tkpp5.30 test-yaml5.30 jobs c89 sudo update_mcdp29xx bioutil tmdiagnose plockstat serialver afida pgrep yes lessecho sdiff afscexpand spfquery5.30 db_deadlock syspolicy_check ldapcompare unexpand prove5.30 perlivp5.30 git-upload-pack perldoc5.34 ssh-copy-id fixproc debinhex.pl lorder ranlib ptardiff5.34 javadoc tput fgrep par.pl sigdist.d ppdhtml auval erb dappprof openssl yamlpp-load drutil jinfo lwp-download5.30 splain pmset xmlcatalog zcmp rwsnoop jstatd lpr layerutil dbicadmin5.34 snmptest mib2c-update creatbyproc.d fdesetup flex hostinfo jcontrol lpstat SetFile pod2html tar yamlpp-events5.34 rdoc uptime pidpersec.d schemagen avmediainfo corelist5.30 iptab5.30 cvcp false zegrep memory_pressure pp5.30 uncompress lwp-request ncurses5.4-config sampleproc db_recover dyld_usage nmedit filebyproc.d bison tclsh8.5 jdeps productbuild zipinfo diffstat yamlpp-load5.34 login db_dump cpuctl cpu_profiler.d which bundler iopattern finger mig sntp klist open GetFileInfo kmutil localedef ruby stringdups htmltree git tr banner leave jconsole paste bzip2 uucp passwd moose-outdated5.34 macerror5.30 uuidgen install_name_tool cmpdylib pod2text5.34 zfgrep aea snfsdefrag zipdetails look col dscacheutil syscapturediags lwp-request5.30 zforce lwp-mirror malloc_history cpio h2ph5.34 nohup kcc ulimit rails bspatch hotspot.d cvaffinity xsubpp5.34 gatherheaderdoc ppdi pcap-config jpackage avmetareadwrite gen_bridge_metadata parl5.34 gem spfd5.30 opendiff crc325.30 talk expect jimage lockstat dapptrace xattr w gunzip
      /bin: cat echo launchctl df pwd test csh wait4path unlink sleep stty date realpath ed expr pax bash kill sh ps link tcsh dd mkdir ksh hostname dash rmdir mv ln ls cp sync zsh chmod rm [
      /usr/sbin: dsconfigad htdbm netbiosd postlock systemsoundserverd dseditgroup avbdeviced rpcinfo BootCacheControl weakpass_edit periodic accton wfsctl postalias slapacl edquota sndiskmove pdisk amt lpadmin fdisk sysadminctl networksetup envvars ktutil setquota otctl dnctl mDNSResponder iRATBW.mlmodelc repquota cupsfilter checkgid uuconv sharing vifs ac racoon dsenableroot xsanctl kdcsetup aslmanager screencapture htdigest chat DevToolsSecurity logresolve cvdbset KernelEventAgent gpt scutil ioreg ab traceroute6 pwd_mkdb sysctl appsleepd sshd mDNSResponderHelper authserver appleh13camerad postmulti lsof pkgutil slapindex sc_auth ioclasscount uucico firmwarepasswd rarpd tsig-keygen kadmin.local syslogd taskpolicy BTLEServerAgent filecoordinationd dot_clean PasswordService systemsetup zdump snmpd ndp coreaudiod rpcbind praudit BTLEServer usernoted postkick postcat netstat lpc slapadd krbservicesetup slapconfig rtadvd httxt2dbm distnoted mtree cupsdisable lpmove purge rpc.statd cupsctl DirectoryService notifyd klist_cdhashes dtrace kextcache cupsd dbmmanage languagesetup skywalkctl mkpassdb postconf createhomedir ocspd iostat cvdb sa rpc.lockd uuxqt mkfile softwareupdate unsetpassword zic nfs4mapid postsuper htpasswd rotatelogs universalaccessd audit httpd slapauth slappasswd localemanager asr cvupdatefs bless cvgather xscertadmin visudo uusched dsconfigldap smbdiagnose cfprefsd auditd uuchk cvfsck kextfind diskutil cvfsid appleh16camerad sso_util vsdbutil sntpd ddns-confgen ioalloccount uasysdiagnose dev_mkdb hdik slapdn vpnd postqueue setkey repairHomePermissions spindump cupsreject traceroute quotaoff newsyslog postfix cvfsdb snmptrapd chroot arp cupsaccept nvram chown mkextunpack postlog installer pppd httpd-wrapper system_profiler fcgistarter bluetoothd slapschema kadmin spray cvversions kextlibs tcpdump xartutil securityd nlcontrol quotaon spctl vipw gssd slaptest automount scselect envvars-std graphicssession ckksctl lpinfo smbd serverinfo cvmkfs postmap postdrop cupsenable cron systemstats kextstat snquota cvlabel BlueTool sendmail systemkeychain kcditto slapcat ipconfig auditreduce cvadmin WirelessRadioManagerd apachectl htcacheclean
      /sbin: mount_hfs mount_apfs md5 fsck mount_udf quotacheck mount_cd9660 ping fsck_exfat mount_exfat fsck_udf shutdown route mount_webdav fsck_hfs nfsd reboot nfsiod fsck_cs fsck_apfs fstyp_msdos disklabel mount_lifs mount_msdos fsck_msdos ifconfig halt mount_9p newfs_apfs umount fstyp kextunload mpioutil fstyp_ntfs mount_nfs newfs_udf mount_ftp pfctl mknod fstyp_udf dmesg mount fibreconfig fstyp_hfs newfs_hfs dynamic_pager launchd newfs_exfat apfs_unlockfv apfs_hfs_convert nologin mount_afp mount_virtiofs mount_smbfs mount_tmpfs ping6 kextload mount_cddafs mount_fdesc newfs_msdos mount_acfs mount_devfs
      Warning accessing /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin gives errors: [Errno 2] No such file or directory: '/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin'
      Warning accessing /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin gives errors: [Errno 2] No such file or directory: '/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin'
      Warning accessing /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin gives errors: [Errno 2] No such file or directory: '/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin'
      /opt/X11/bin: xfs xfsinfo atobm xdpyinfo showrgb xlsfonts editres fonttosfnt xfontsel xclock xmore xman xmag xrefresh fc-list xauth twm cxpm mkfontdir xclipboard png-fix-itxt beforelight ucs2any xterm bdftruncate xsetroot xmessage xcursorgen fc-pattern xkbvleds xkbbell Xephyr fc-validate bitmap libpng16-config pngfix fc-query xkbprint luit xhost gtf listres Xorg libpng-config koi8rxterm xpr xstdcmap xgc mkfontscale setxkbmap xinit Xquartz xbacklight xdm xcmsdb xdpr cairo-trace xrdb xlsclients xprop xkeystone xeyes Xvfb Xnest xev startx xkbwatch xscope xfd sessreg xwud lndir xinput xconsole glxinfo sxpm xsetmode fslsfonts xcompmgr xrandr bmtoa xwd xmodmap glxgears fc-cache iceauth cvt xcutsel bdftopcf fc-cat xsetpointer xkbevd quartz-wm xsm appres xset xlsatoms fc-match oclock resize showfont xditview xwininfo xvinfo xcalc fc-conflist xgamma viewres ico X xedit smproxy xkill xkbcomp xload font_cache xmh xlogo fstobdf uxterm fc-scan
      /Library/TeX/texbin: optexcount luajittex lollipop twill t1disasm chktex rubikrotation lily-rebuild-pdfs weave mag man ebb prepmx mktexlsr gsftopk upmendex dvibook kpsewhere rumakeindex fontinst cef5conv lacheck httexi lily-image-commands texloganalyser bookshelf-mkfontsel dvilj patgen uptex ppmcheckpdf exceltex pdvitype texconfig-sys xmltex vlna texsis dvipdft urlbst afm2afm hilatex histretch cefconv uplatex-dev sjisconv tex2xindy musixtex pdfcsplain opl2ofm de-macro bbl2bib ltx2crossrefxml pdftex r-mpost dvitodvi gftodvi dviconcat texluajitc dvipng pdflatex-dev komkindex tex sty2dtx ppltotf yplan digestif datatool2bib explcheck eplain eptex lily-glyph-commands ltx2unitxt htmex texlua htxelatex xasy fmtutil-user wovp2ovf dvilualatex cefsconv context platex allec adhocfilelist kpsetool makejvf texdoctk xelatex-dev vptovf tex4ht texluajit mtxrunjit uplatex musixflx pfarrei mf latexdiff-vc ttfdump etex fig4latex bibexport ttf2tfm latexmk pmpost ctwill pst2pdf wordcount texconfig-dialog luahbtex lwarpmk dvilj2p dviinfox ttf2kotexfont ctanbib cweave bg5+latex pdfatfi ptex2pdf e2pall kpsewhich upbibtex texdiff mathspic kanji-fontmap-creator kanji-config-updmap asy typeoutfileinfo chklref upmpost pdflatex perltex mkt1font cefslatex cjk-gs-integrate chkdvifont dvitype pdfjadetex t1lint jamo-normalize fmtutil-sys wofm2opl dviasm kpsestat pdfxup makedtx memoize-extract.py pltotf mkindex dvilj6 texprofile xetex-unsafe r-pmpost memoize-extract.pl xetex latex ps4pdf multibibliography edtx2dtx teckit_compile ttf2afm biburl2doi getmapdl uptftopl typog-grep llmk contextjit bib2gls texplate match_parens mkjobtexmf updvitomp ctwill-proofsort ps2eps pkfix-helper chkweb arlatex pn2pdf pdfclose xindex clxelatex dosepsbin jadetex a2ping bibzbladd ovf2ovp mfluajit-nowin mpost texosquery-jre5 textestvis texhash convbkmk thumbpdf pkfix dvihp hbf2gf xindy.run texcount texmfstart latexrevise cefpdflatex texluac dvicopy ctie luametatex pdftex-quiet euptex pdftosrc mf-nowin ctangle omfonts t1asm mflua-nowin cluttex svn-multi mk4ht afm2tfm pdfopen fragmaster markdown2tex ebong ctanify pygmentex texdef luatex synctex texdirflatten gbkpdflatex xdvipdfmx bibcop sjispdflatex makeindex dviluatex mkofm dvipdfmx psbook latexminted dvispc csplain ttftotype42 l3sys-query mft t1rawafm fmtutil ctwill-twinx simpdftex depythontex otfinfo latexindent kanji-config-updmap-sys extconv xelatex-unsafe disdvi pdvitomp dvipdfm texliveonfly allneeded t1testpage biber dv2dt xindy pdfbook2 t1unmac xelatex webquiz kpsepath diadia makeglossaries cef5pdflatex autoinst dvilualatex-dev eolang mkpic splitindex repstopdf otangle mfplain latexfileversion latex-git-log inimf lualatex-dev latex2man ps2pk htxetex l3build hyperxmp-add-bytecount ptftopl ptex gbklatex context.lua t1binary bibtex t1dotlessj mktexpk detex htlatex odvicopy dvidvi extractres extractbb tie latexdef tlmgr arara ctan-o-mat rubibtex dvigif gftype ketcindy kpseaccess luacsplain cachepic srcredact dtxgen ptekf texlogsieve mmafm pktype platex-dev kpsexpand pktogf msxlint t1reencode vftovp xhlatex ht mendex make4ht ceflatex twill-refsort texlinks pmxchords mptopdf afm2pl mktexmf texlogfilter gftopk ulqda dvilj4l pooltype bg5latex bibmradd aleph wovf2ovp git-latexdiff pdfetex dvi2tty ofm2opl pslatex initex sqltex latexpand pamphletangler mkgrkindex memoize-clean.pl mtxrun epsffit listings-ext.sh mktexfmt scor2prt psnup ot2kpx luafindfont allcm pk2bm dvitomp texindy vpl2vpl luatools cef5latex memoize-clean.py ctwill-refsort luajithbtex bg5+pdflatex dvisvgm tex2aspc texblend bg5conv deweb tlcockpit cfftot1 mtxrun.lua dviselect odvitype vpl2ovp xindy-arm64.mem otp2ocp latexdiff aom-fullref dt2dv bg5pdflatex mf2pt1 psresize t1mac texprof epspdf pythontex bookshelf-listallfonts bibtexu hishrink authorindex texosquery tlshell pdfxmltex includeres t1ascii pdflatexpicscale mfluajit axohelp tangle httex texosquery-jre8 checkcites bibtex8 dvi2fax otftotfm cefspdflatex mmpfb pfb2pfa vpe psselect pagelayoutapi latex-dev findhyph gregorio ovp2ovf utf8mex mflua purifyeps autosp bundledoc mllatex tex4ebook xdvi-xaw sjislatex rungs dvilj4 ltxfileinfo albatross texconfig updvitype ltximg updmap-user dvips runtexshebang convertgls2bib latex2nemeth pdfjam epstopdf outocp pedigree hitex mkocp kpsereadlink ttf2pk tpic2pdftex kanji-config-updmap-user psjoin citeproc-lua m-tx uppltotf xindy-x86_64.mem texdoc bbox dvired latex-papersize biber-ms makeglossaries-lite t4ht xdvi ps2frag wopl2ofm devnag ctanupload texexec listbib cllualatex lualatex pmxab jfmutil tikztosvg xml2pmx pdfmex tftopl spix mltex amstex pbibtex pstops optex mex bibdoiadd texaccents updmap dvipos luaotfload-tool epspdftk updmap-sys r-upmpost mktextfm texfot checklistings rpdfcrop a5toa4 installfont-tl texfindpkg pdfcrop pdfannotextractor
=============================================================================================
TESTING: configureExternalPackagesDir from config.framework(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/framework.py:1079)
  Set alternative directory external packages are built in
    serialEvaluation: initial cxxDialectRanges ('c++11', 'c++20')
      serialEvaluation: child SuperLU_DIST raised minimum cxx dialect version to c++11
    serialEvaluation: new cxxDialectRanges ('c++11', 'c++20')
    child config.utilities.macosFirewall took 0.000135 seconds
=============================================================================================
TESTING: configureDebuggers from config.utilities.debuggers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/utilities/debuggers.py:20)
  Find a default debugger and determine its arguments
    Checking for program /opt/homebrew/opt/gcc@12/bin/lldb...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/lldb...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/lldb...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/lldb...not found
    Checking for program /opt/homebrew/bin/lldb...not found
    Checking for program /opt/homebrew/sbin/lldb...not found
    Checking for program /usr/local/bin/lldb...not found
    Checking for program /System/Cryptexes/App/usr/bin/lldb...not found
    Checking for program /usr/bin/lldb...found
              Defined make macro "LLDB" to "/usr/bin/lldb"
            Defined "USE_DEBUGGER" to ""lldb""
    Checking for program /opt/homebrew/opt/gcc@12/bin/dsymutil...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/dsymutil...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/dsymutil...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/dsymutil...not found
    Checking for program /opt/homebrew/bin/dsymutil...not found
    Checking for program /opt/homebrew/sbin/dsymutil...not found
    Checking for program /usr/local/bin/dsymutil...not found
    Checking for program /System/Cryptexes/App/usr/bin/dsymutil...not found
    Checking for program /usr/bin/dsymutil...found
              Defined make macro "DSYMUTIL" to "/usr/bin/dsymutil"
            Defined make macro "DSYMUTIL" to "/usr/bin/dsymutil"
            Defined "DO_NOT_SWAP_CHILD_FOR_DEBUGGER" to "1"
    child config.utilities.debuggers took 0.001236 seconds
=============================================================================================
TESTING: configureDirectories from PETSc.options.petscdir(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/petscdir.py:22)
  Checks PETSC_DIR and sets if not set
          PETSC_VERSION_RELEASE of 1 indicates the code is from a release branch or a branch created from a release branch.
          Version Information:
          #define PETSC_VERSION_RELEASE    1
          #define PETSC_VERSION_MAJOR      3
          #define PETSC_VERSION_MINOR      20
          #define PETSC_VERSION_SUBMINOR   1
          #define PETSC_VERSION_DATE       "unknown"
          #define PETSC_VERSION_GIT        "unknown"
          #define PETSC_VERSION_DATE_GIT   "unknown"
          #define PETSC_VERSION_EQ(MAJOR,MINOR,SUBMINOR) \
          #define PETSC_VERSION_ PETSC_VERSION_EQ
          #define PETSC_VERSION_LT(MAJOR,MINOR,SUBMINOR)          \
          #define PETSC_VERSION_LE(MAJOR,MINOR,SUBMINOR) \
          #define PETSC_VERSION_GT(MAJOR,MINOR,SUBMINOR) \
          #define PETSC_VERSION_GE(MAJOR,MINOR,SUBMINOR) \
    child PETSc.options.petscdir took 0.000985 seconds
=============================================================================================
TESTING: getDatafilespath from PETSc.options.dataFilesPath(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/dataFilesPath.py:29)
  Checks what DATAFILESPATH should be
    child PETSc.options.dataFilesPath took 0.000151 seconds
=============================================================================================
TESTING: configureGit from config.sourceControl(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/sourceControl.py:24)
  Find the Git executable
    Checking for program /opt/homebrew/opt/gcc@12/bin/git...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/git...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/git...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/git...not found
    Checking for program /opt/homebrew/bin/git...found
              Defined make macro "GIT" to "git"
Executing: git --version
stdout: git version 2.49.0
=============================================================================================
TESTING: configureMercurial from config.sourceControl(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/sourceControl.py:35)
  Find the Mercurial executable
    Checking for program /opt/homebrew/opt/gcc@12/bin/hg...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/hg...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/hg...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/hg...not found
    Checking for program /opt/homebrew/bin/hg...not found
    Checking for program /opt/homebrew/sbin/hg...not found
    Checking for program /usr/local/bin/hg...not found
    Checking for program /System/Cryptexes/App/usr/bin/hg...not found
    Checking for program /usr/bin/hg...not found
    Checking for program /bin/hg...not found
    Checking for program /usr/sbin/hg...not found
    Checking for program /sbin/hg...not found
    Checking for program /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin/hg...not found
    Checking for program /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin/hg...not found
    Checking for program /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin/hg...not found
    Checking for program /opt/X11/bin/hg...not found
    Checking for program /Library/TeX/texbin/hg...not found
    Checking for program /Users/jacksonbaglino/Petsc-3.20/lib/petsc/bin/win32fe/hg...not found
    child config.sourceControl took 0.014538 seconds
=============================================================================================
TESTING: configureInstallationMethod from PETSc.options.petscclone(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/petscclone.py:20)
  Determine if PETSc was obtained via git or a tarball
          lib/petsc/bin/maint exists. This appears to be a repository clone
          .git directory exists
Executing: ['git', 'describe', '--match=v*']
stdout: fatal: No names found, cannot describe anything.
Executing: ['git', 'log', '-1', '--pretty=format:%H']
stdout: b9cb2848786b0546fd4f4f3271fa4e93877ebbe3
Executing: ['git', 'log', '-1', '--pretty=format:%ci']
stdout: 2024-07-31 14:24:32 -0700
Executing: ['git', 'rev-parse', '--abbrev-ref', 'HEAD']
stdout: main
            Defined "VERSION_GIT" to ""b9cb2848786b0546fd4f4f3271fa4e93877ebbe3""
            Defined "VERSION_DATE_GIT" to ""2024-07-31 14:24:32 -0700""
            Defined "VERSION_BRANCH_GIT" to ""main""
    child PETSc.options.petscclone took 0.048540 seconds
=============================================================================================
TESTING: setNativeArchitecture from PETSc.options.arch(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/arch.py:29)
  Forms the arch as GNU's configure would form it
=============================================================================================
TESTING: configureArchitecture from PETSc.options.arch(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/arch.py:42)
  Checks if PETSC_ARCH is set and sets it if not set
=============================================================================================
                                     ***** WARNING *****
  PETSC_ARCH from environment does not match command-line or name of script. Using from
  command-line or name of script: MAC_Si-M2_MPICH-4.3.0_PETSC-3.22_GCC-12.4.0, ignoring
  environment: MAC_Si-M2_MPICH-4.3.0_PETSC-3.20_GCC-12.4.0
=============================================================================================
        No previous hashfile found
          Setting hashfile: MAC_Si-M2_MPICH-4.3.0_PETSC-3.22_GCC-12.4.0/lib/petsc/conf/configure-hash
          Deleting configure hash file: MAC_Si-M2_MPICH-4.3.0_PETSC-3.22_GCC-12.4.0/lib/petsc/conf/configure-hash
          Unable to delete configure hash file: MAC_Si-M2_MPICH-4.3.0_PETSC-3.22_GCC-12.4.0/lib/petsc/conf/configure-hash
    child PETSc.options.arch took 0.017463 seconds
=============================================================================================
TESTING: setInstallDir from PETSc.options.installDir(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/installDir.py:31)
  Set installDir to either prefix or if that is not set to PETSC_DIR/PETSC_ARCH
            Defined make macro "PREFIXDIR" to "/Users/jacksonbaglino/Petsc-3.20/MAC_Si-M2_MPICH-4.3.0_PETSC-3.22_GCC-12.4.0"
=============================================================================================
TESTING: saveReconfigure from PETSc.options.installDir(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/installDir.py:76)
  Save the configure options in a script in PETSC_ARCH/lib/petsc/conf so the same configure may be easily re-run
=============================================================================================
TESTING: cleanConfDir from PETSc.options.installDir(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/installDir.py:68)
  Remove all the files from configuration directory for this PETSC_ARCH, from --with-clean option
=============================================================================================
TESTING: configureInstallDir from PETSc.options.installDir(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/installDir.py:52)
  Makes  installDir subdirectories if it does not exist for both prefix install location and PETSc work install location
          Changed persistence directory to /Users/jacksonbaglino/Petsc-3.20/MAC_Si-M2_MPICH-4.3.0_PETSC-3.22_GCC-12.4.0/lib/petsc/conf
=============================================================================================
TESTING: restoreReconfigure from PETSc.options.installDir(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/installDir.py:90)
  If --with-clean was requested but restoring the reconfigure file was requested then restore it
    child PETSc.options.installDir took 0.000650 seconds
=============================================================================================
TESTING: setExternalPackagesDir from PETSc.options.externalpackagesdir(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/externalpackagesdir.py:15)
  Set location where external packages will be downloaded to
=============================================================================================
TESTING: cleanExternalpackagesDir from PETSc.options.externalpackagesdir(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/externalpackagesdir.py:23)
  Remove all downloaded external packages, from --with-clean
    child PETSc.options.externalpackagesdir took 0.000154 seconds
=============================================================================================
TESTING: configureCLanguage from PETSc.options.languages(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/languages.py:28)
  Choose whether to compile the PETSc library using a C or C++ compiler
          C language is C
            Defined "CLANGUAGE_C" to "1"
            Defined make macro "CLANGUAGE" to "C"
    child PETSc.options.languages took 0.000253 seconds
=============================================================================================
TESTING: resetEnvCompilers from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2701)
  Remove compilers from the shell environment so they do not interfere with testing
=============================================================================================
TESTING: checkEnvCompilers from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2718)
  Set configure compilers from the environment, from -with-environment-variables
=============================================================================================
TESTING: checkMPICompilerOverride from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2671)
  Check if --with-mpi-dir is used along with CC CXX or FC compiler options.
    This usually prevents mpi compilers from being used - so issue a warning
=============================================================================================
TESTING: requireMpiLdPath from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2692)
  OpenMPI wrappers require LD_LIBRARY_PATH set
=============================================================================================
TESTING: checkInitialFlags from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:725)
  Initialize the compiler and linker flags
          Initialized CFLAGS to 
          Initialized CFLAGS to 
          Initialized LDFLAGS to 
          Initialized CUDAFLAGS to 
          Initialized CUDAFLAGS to 
          Initialized LDFLAGS to 
          Initialized HIPFLAGS to 
          Initialized HIPFLAGS to 
          Initialized LDFLAGS to 
          Initialized SYCLFLAGS to 
          Initialized SYCLFLAGS to 
          Initialized SYCLC_LINKER_FLAGS to 
          Initialized CXXFLAGS to 
          Initialized CXX_CXXFLAGS to 
          Initialized LDFLAGS to 
          Initialized FFLAGS to 
          Initialized FFLAGS to 
          Initialized LDFLAGS to 
          Initialized CPPFLAGS to 
          Initialized FPPFLAGS to 
          Initialized CUDAPPFLAGS to 
          Initialized CXXPPFLAGS to 
          Initialized HIPPPFLAGS to 
          Initialized SYCLPPFLAGS to 
          Initialized CC_LINKER_FLAGS to []
          Initialized CXX_LINKER_FLAGS to []
          Initialized FC_LINKER_FLAGS to []
          Initialized CUDAC_LINKER_FLAGS to []
          Initialized HIPC_LINKER_FLAGS to []
          Initialized sharedLibraryFlags to []
          Initialized dynamicLibraryFlags to []
=============================================================================================
TESTING: checkCCompiler from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:1420)
    Checking for program /opt/homebrew/opt/gcc@12/bin/gcc...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/gcc...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/gcc...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/gcc...not found
    Checking for program /opt/homebrew/bin/gcc...not found
    Checking for program /opt/homebrew/sbin/gcc...not found
    Checking for program /usr/local/bin/gcc...not found
    Checking for program /System/Cryptexes/App/usr/bin/gcc...not found
    Checking for program /usr/bin/gcc...found
              Defined make macro "CC" to "gcc"
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o  -lpetsc-ufod4vtr9mqHvKIQiVAm
stdout:
ld: library 'petsc-ufod4vtr9mqHvKIQiVAm' not found
clang: error: linker command failed with exit code 1 (use -v to see invocation)
Possible ERROR while running linker: exit code 1
stderr:
ld: library 'petsc-ufod4vtr9mqHvKIQiVAm' not found
clang: error: linker command failed with exit code 1 (use -v to see invocation)
======== Checking running linked program
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
Testing executable /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest to see if it can be run
Executing: /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest
Running Executable with threads to time it out at 60
Executing: /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest
Executing: gcc --version
stdout:
Apple clang version 15.0.0 (clang-1500.3.9.4)
Target: arm64-apple-darwin23.4.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
Executing: uname -p
stdout: arm
Detected ARM processor

Executing: gcc -v | head -n 20
stdout:
Apple clang version 15.0.0 (clang-1500.3.9.4)
Target: arm64-apple-darwin23.4.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
=============================================================================================
TESTING: checkCPreprocessor from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:1467)
  Locate a functional C preprocessor
    Checking for program /opt/homebrew/opt/gcc@12/bin/gcc...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/gcc...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/gcc...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/gcc...not found
    Checking for program /opt/homebrew/bin/gcc...not found
    Checking for program /opt/homebrew/sbin/gcc...not found
    Checking for program /usr/local/bin/gcc...not found
    Checking for program /System/Cryptexes/App/usr/bin/gcc...not found
    Checking for program /usr/bin/gcc...found
              Defined make macro "CPP" to "gcc -E"
Preprocessing source:
#include "confdefs.h"
#include "conffix.h"
#include <stdlib.h>

Executing: gcc -E  -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Preprocess output before filtering:
Preprocess output after filtering:
=============================================================================================
TESTING: checkCxxCompiler from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:1749)
  Locate a functional Cxx compiler
    Checking for program /opt/homebrew/opt/gcc@12/bin/g++...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/g++...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/g++...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/g++...not found
    Checking for program /opt/homebrew/bin/g++...not found
    Checking for program /opt/homebrew/sbin/g++...not found
    Checking for program /usr/local/bin/g++...not found
    Checking for program /System/Cryptexes/App/usr/bin/g++...not found
    Checking for program /usr/bin/g++...found
              Defined make macro "CXX" to "g++"
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: g++  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: g++  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o  -lpetsc-ufod4vtr9mqHvKIQiVAm
stdout:
ld: library 'petsc-ufod4vtr9mqHvKIQiVAm' not found
clang: error: linker command failed with exit code 1 (use -v to see invocation)
Possible ERROR while running linker: exit code 1
stderr:
ld: library 'petsc-ufod4vtr9mqHvKIQiVAm' not found
clang: error: linker command failed with exit code 1 (use -v to see invocation)
======== Checking running linked program
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: g++  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
Testing executable /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest to see if it can be run
Executing: /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest
Running Executable with threads to time it out at 60
Executing: /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest
Executing: g++ --version
stdout:
Apple clang version 15.0.0 (clang-1500.3.9.4)
Target: arm64-apple-darwin23.4.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
=============================================================================================
TESTING: checkDeviceHostCompiler from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:751)
  Set the host compiler (HC) of the device compiler (DC) to the HC unless the DC already explicitly sets its HC. This may be needed if the default HC used by the DC is ancient and PETSc uses a different HC (e.g., through --with-cxx=...).
Executing: g++ --help | head -n 20 
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
stdout: error: write on a pipe with no reader
Executing: g++ --help
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
  -cl-ext=<value>         OpenCL only. Enable or disable OpenCL extensions/optional features. The argument is a comma-separated sequence of one or more extension names, each prefixed by '+' or '-'.
  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.
  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.
  -cl-fp32-correctly-rounded-divide-sqrt
                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.
  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.
  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.
  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.
  -cl-no-stdinc           OpenCL only. Disables all standard includes containing non-native compiler types and functions.
  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.
  -cl-single-precision-constant
                          OpenCL only. Treat double precision floating-point constant as single precision constant.
  -cl-std=<value>         OpenCL language standard to compile for.
  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.
  -cl-uniform-work-group-size
                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel
  -cl-unsafe-math-optimizations
                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.
  --config=<file>         Specify configuration file
  --cuda-compile-host-device
                          Compile CUDA code for both host and device (default). Has no effect on non-CUDA compilations.
  --cuda-device-only      Compile CUDA code for device only
  --cuda-feature=<value>  Manually specify the CUDA feature to use
  --cuda-host-only        Compile CUDA code for host only. Has no effect on non-CUDA compilations.
  --cuda-include-ptx=<value>
                          Include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --cuda-noopt-device-debug
                          Enable device-side debug info generation. Disables ptxas optimizations.
  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation
  --cuda-path=<value>     CUDA installation path
  -cuid=<value>           An ID for compilation unit, which should be the same for the same compilation unit but different for different compilation units. It is used to externalize device-side static variables for single source offloading languages CUDA and HIP so that they can be accessed by the host code of the same compilation unit.
  -cxx-isystem <directory>
                          Add directory to the C++ SYSTEM include search path
  -C                      Include comments in preprocessed output
  -c                      Only run preprocess, compile, and assemble steps
  -darwin-target-variant-triple <value>
                          Specify the darwin target variant triple
  -darwin-target-variant <value>
                          Generate code for an additional runtime variant of the deployment target
  -dD                     Print macro definitions in -E mode in addition to normal output
  -dependency-dot <value> Filename to write DOT-formatted header dependencies to
  -dependency-file <value>
                          Filename (or -) to write dependency output to
  -dI                     Print include directives in -E mode in addition to normal output
  -dM                     Print macro definitions in -E mode instead of normal output
  -dsym-dir <dir>         Directory to output dSYM's (if any) to
  -dump-depscan-tree=<value>
                          emit the CAS identifier for the tree instead of the full -cc1
  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)
  -emit-ast               Emit Clang AST files for source inputs
  -emit-interface-stubs   Generate Interface Stub Files.
  -emit-llvm              Use the LLVM representation for assembler and object files
  -emit-merged-ifs        Generate Interface Stub Files, emit merged text not binary.
  --emit-static-lib       Enable linker job to emit a static library.
  --end-no-unused-arguments
                          Start emitting warnings for unused driver arguments
  --extract-api-ignores=<value>
                          Comma separated list of files containing a new line separated list of API symbols to ignore when extracting API information.
  -extract-api            Extract API information
  -E                      Only run the preprocessor
  -faapcs-bitfield-load   Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).
  -faapcs-bitfield-width  Follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -faddrsig               Emit an address-significance table
  -falign-loops=<N>       N must be a power of two. Align loops to the boundary
  -faligned-allocation    Enable C++17 aligned allocation functions
  -fallow-editor-placeholders
                          Treat editor placeholders as valid source code
  -faltivec-src-compat=<value>
                          Source-level compatibility for Altivec vectors (for PowerPC targets). This includes results of vector comparison (scalar for 'xl', vector for 'gcc') as well as behavior when initializing with a scalar (splatting for 'xl', element zero only for 'gcc'). For 'mixed', the compatibility is as 'gcc' for 'vector bool/vector pixel' and as 'xl' for other types. Current default is 'mixed'.
  -fansi-escape-codes     Use ANSI escape codes for diagnostics
  -fapinotes-cache-path=<directory>
                          Does nothing; API notes are no longer cached separately from modules
  -fapinotes-modules      Enable module-based external API notes support
  -fapinotes-swift-version=<version>
                          Specify the Swift version to use when filtering API notes
  -fapinotes              Enable external API notes support
  -fapple-kext            Use Apple's kernel extensions ABI
  -fapple-link-rtlib      Force linking the clang builtins runtime library
  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling
  -fapplication-extension Restrict code to those available for App Extensions
  -fapprox-func           Allow certain math function calls to be replaced with an approximately equivalent calculation
  -fasync-exceptions      Enable EH Asynchronous exceptions
  -fbasic-block-sections=<value>
                          Place each function's basic blocks in unique sections (ELF Only)
  -fbinutils-version=<major.minor>
                          Produced object files can use all ELF features supported by this binutils version and newer. If -fno-integrated-as is specified, the generated assembly will consider GNU as support. 'none' means that all ELF features can be used, regardless of binutils support. Defaults to 2.26.
  -fblocks                Enable the 'blocks' language feature
  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler
  -fbranch-target-identification
                          Emit branch target identification instructions for indirect branch destinations
  -fbuild-session-file=<file>
                          Use the last modification time of <file> as the build session timestamp
  -fbuild-session-timestamp=<time since Epoch in seconds>
                          Time when the current build session started
  -fbuiltin-module-map    Load the clang builtins module map file.
  -fc++-abi=<value>       C++ ABI to use. This will override the target C++ ABI.
  -fcall-saved-x10        Make the x10 register call-saved (AArch64 only)
  -fcall-saved-x11        Make the x11 register call-saved (AArch64 only)
  -fcall-saved-x12        Make the x12 register call-saved (AArch64 only)
  -fcall-saved-x13        Make the x13 register call-saved (AArch64 only)
  -fcall-saved-x14        Make the x14 register call-saved (AArch64 only)
  -fcall-saved-x15        Make the x15 register call-saved (AArch64 only)
  -fcall-saved-x18        Make the x18 register call-saved (AArch64 only)
  -fcall-saved-x8         Make the x8 register call-saved (AArch64 only)
  -fcall-saved-x9         Make the x9 register call-saved (AArch64 only)
  -fcf-protection=<value> Instrument control-flow architecture protection
  -fcf-protection         Enable cf-protection in 'full' mode
  -fchar8_t               Enable C++ builtin type char8_t
  -fclang-abi-compat=<version>
                          Attempt to match the ABI of Clang <version>
  -fcolor-diagnostics     Enable colors in diagnostics
  -fcomment-block-commands=<arg>
                          Treat each comma separated argument in <arg> as a documentation comment block command
  -fcommon                Place uninitialized global variables in a common block
  -fcomplete-member-pointers
                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fconvergent-functions  Assume functions may be convergent
  -fcoro-aligned-allocation
                          Prefer aligned allocation for C++ Coroutines
  -fcoroutines-ts         Enable support for the C++ Coroutines TS
  -fcoverage-compilation-dir=<value>
                          The compilation directory to embed in the coverage mapping.
  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis
  -fcoverage-prefix-map=<value>
                          remap file source paths in coverage mapping
  -fcrash-diagnostics-dir=<dir>
                          Put crash-report files in <dir>
  -fcrash-diagnostics=<value>
                          Set level of crash diagnostic reporting, (option: off, compiler, all)
  -fcrash-diagnostics     Enable crash diagnostic reporting (default)
  -fcs-profile-generate=<directory>
                          Generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcs-profile-generate   Generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcuda-approx-transcendentals
                          Use approximate transcendental functions
  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces
  -fcxx-exceptions        Enable C++ exceptions
  -fcxx-modules           Enable modules for C++
  -fdata-sections         Place each data in its own section
  -fdebug-compilation-dir=<value>
                          The compilation directory to embed in the debug info
  -fdebug-default-version=<value>
                          Default DWARF version to use, if a -g option caused DWARF debug info to be produced
  -fdebug-info-for-profiling
                          Emit extra debug info to make sample profile more accurate
  -fdebug-macro           Emit macro debug information
  -fdebug-prefix-map=<value>
                          remap file source paths in debug info
  -fdebug-ranges-base-address
                          Use DWARF base address selection entries in .debug_ranges
  -fdebug-types-section   Place debug types in their own section (ELF Only)
  -fdeclspec              Allow __declspec as a keyword
  -fdelayed-template-parsing
                          Parse templated function definitions at the end of the translation unit
  -fdelete-null-pointer-checks
                          Treat usage of null pointers as undefined behavior (default)
  -fdepscan-daemon=<value>
                          Specify the path to the daemon to be used. Clang will use the daemon specified, rather than try to spawn its own based on parent processes.
  -fdepscan-include-tree  Set dep-scanner to produce the include tree
  -fdepscan-prefix-map-sdk=<new>
                          With -fdepscan, auto-detect the SDK path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map-toolchain=<new>
                          With -fdepscan, auto-detect the toolchain path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map=<old>=<new>
                          With -fdepscan, seamlessly filter the CAS filesystem to apply the given prefix, updating the command-line to match.
  -fdepscan-share-identifier <value>
                          Share depscan daemon for Clang invocations using the same string identifier.
  -fdepscan-share-parent=<value>
                          Share state based on the PID of the parent command if the name matches. See also -fdepscan-share-stop.
  -fdepscan-share-parent  Share state based on the PID of the parent command. See also -fdepscan-share-stop.
  -fdepscan-share-stop=<value>
                          Stop looking for the command named by -fdepscan-share if a process with the name of the provided argument is found first. Also blocks -fdepscan-share=parent if the parent has this name. E.g., -fdepscan -fdepscan-share=ninja -fdepscan-share-stop=cmake looks for 'ninja' and 'cmake' in the process tree; if 'ninja' is found first, state is shared based on ninja's PID; if 'cmake' is found first, state is not shared.
  -fdepscan-share=<value> If the argument is the name of a command in the process tree, share state based on its PID. E.g., -fdepscan -fdepscan-share=ninja will search for 'ninja' in the process tree and share state based on its PID if found. See also -fdepscan-share-stop.
  -fdepscan=<value>       Scan for dependencies ahead of compiling, generating a pruned CAS tree to send to -fcas-fs. Values are 'auto', 'daemon' (see -fdepscan-share and -fdepscan-share-parent), 'inline', or 'off' (default).
  -fdepscan               Turn on -fdepscan=auto.
  -fdiagnostics-absolute-paths
                          Print absolute paths in diagnostics
  -fdiagnostics-hotness-threshold=<value>
                          Prevent optimization remarks from being output if they do not have at least this profile count. Use 'auto' to apply the threshold from profile summary
  -fdiagnostics-misexpect-tolerance=<value>
                          Prevent misexpect diagnostics from being output if the profile counts are within N% of the expected. 
  -fdiagnostics-parseable-fixits
                          Print fix-its in machine parseable form
  -fdiagnostics-print-source-range-info
                          Print source range spans in numeric form
  -fdiagnostics-show-hotness
                          Enable profile hotness information in diagnostic line
  -fdiagnostics-show-note-include-stack
                          Display include stacks for diagnostic notes
  -fdiagnostics-show-option
                          Print option name with mappable diagnostics
  -fdiagnostics-show-template-tree
                          Print a template comparison tree for differing templates
  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)
  -fdirect-access-external-data
                          Don't use GOT indirection to reference external data symbols
  -fdiscard-value-names   Discard value names in LLVM IR
  -fdollars-in-identifiers
                          Allow '$' in identifiers
  -fdouble-square-bracket-attributes
                          Enable '[[]]' attributes in all C and C++ language modes
  -fdriver-only           Only run the driver.
  -fdwarf-exceptions      Use DWARF style exceptions
  -feliminate-unused-debug-types
                          Do not emit  debug info for defined but unused types
  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker
  -fembed-bitcode=<option>
                          Embed LLVM bitcode
  -fembed-bitcode         Embed LLVM IR bitcode as data
  -fembed-offload-object=<value>
                          Embed Offloading device-side binary into host object file as a section.
  -femit-all-decls        Emit all declarations, even if unused
  -femit-dwarf-unwind=<value>
                          When to emit DWARF unwind (EH frame) info
  -femulated-tls          Use emutls functions to access thread_local variables
  -fenable-matrix         Enable matrix data type and related builtin functions
  -fexceptions            Enable support for exception handling
  -fexperimental-library  Control whether unstable and experimental library features are enabled. This option enables various library features that are either experimental (also known as TSes), or have been but are not stable yet in the selected Standard Library implementation. It is not recommended to use this option in production code, since neither ABI nor API stability are guaranteed. This is intended to provide a preview of features that will ship in the future for experimentation purposes
  -fexperimental-new-constant-interpreter
                          Enable the experimental new constant interpreter
  -fexperimental-relative-c++-abi-vtables
                          Use the experimental C++ class ABI for classes with virtual tables
  -fexperimental-sanitize-metadata=<value>
                          Specify the type of metadata to emit for binary analysis sanitizers
  -fexperimental-strict-floating-point
                          Enables experimental strict floating point in LLVM.
  -fextend-arguments=<value>
                          Controls how scalar integer arguments are extended in calls to unprototyped and varargs functions
  -ffast-math             Allow aggressive, lossy floating-point optimizations
  -ffile-compilation-dir=<value>
                          The compilation directory to embed in the debug info and coverage mapping.
  -ffile-prefix-map=<value>
                          remap file source paths in debug info, predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -ffile-reproducible     Use the target's platform-specific path separator character when expanding the __FILE__ macro
  -ffine-grained-bitfield-accesses
                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.
  -ffinite-loops          Assume all loops are finite.
  -ffixed-a0              Reserve the a0 register (M68k only)
  -ffixed-a1              Reserve the a1 register (M68k only)
  -ffixed-a2              Reserve the a2 register (M68k only)
  -ffixed-a3              Reserve the a3 register (M68k only)
  -ffixed-a4              Reserve the a4 register (M68k only)
  -ffixed-a5              Reserve the a5 register (M68k only)
  -ffixed-a6              Reserve the a6 register (M68k only)
  -ffixed-d0              Reserve the d0 register (M68k only)
  -ffixed-d1              Reserve the d1 register (M68k only)
  -ffixed-d2              Reserve the d2 register (M68k only)
  -ffixed-d3              Reserve the d3 register (M68k only)
  -ffixed-d4              Reserve the d4 register (M68k only)
  -ffixed-d5              Reserve the d5 register (M68k only)
  -ffixed-d6              Reserve the d6 register (M68k only)
  -ffixed-d7              Reserve the d7 register (M68k only)
  -ffixed-point           Enable fixed point types
  -ffixed-r19             Reserve register r19 (Hexagon only)
  -ffixed-r9              Reserve the r9 register (ARM only)
  -ffixed-x10             Reserve the x10 register (AArch64/RISC-V only)
  -ffixed-x11             Reserve the x11 register (AArch64/RISC-V only)
  -ffixed-x12             Reserve the x12 register (AArch64/RISC-V only)
  -ffixed-x13             Reserve the x13 register (AArch64/RISC-V only)
  -ffixed-x14             Reserve the x14 register (AArch64/RISC-V only)
  -ffixed-x15             Reserve the x15 register (AArch64/RISC-V only)
  -ffixed-x16             Reserve the x16 register (AArch64/RISC-V only)
  -ffixed-x17             Reserve the x17 register (AArch64/RISC-V only)
  -ffixed-x18             Reserve the x18 register (AArch64/RISC-V only)
  -ffixed-x19             Reserve the x19 register (AArch64/RISC-V only)
  -ffixed-x1              Reserve the x1 register (AArch64/RISC-V only)
  -ffixed-x20             Reserve the x20 register (AArch64/RISC-V only)
  -ffixed-x21             Reserve the x21 register (AArch64/RISC-V only)
  -ffixed-x22             Reserve the x22 register (AArch64/RISC-V only)
  -ffixed-x23             Reserve the x23 register (AArch64/RISC-V only)
  -ffixed-x24             Reserve the x24 register (AArch64/RISC-V only)
  -ffixed-x25             Reserve the x25 register (AArch64/RISC-V only)
  -ffixed-x26             Reserve the x26 register (AArch64/RISC-V only)
  -ffixed-x27             Reserve the x27 register (AArch64/RISC-V only)
  -ffixed-x28             Reserve the x28 register (AArch64/RISC-V only)
  -ffixed-x29             Reserve the x29 register (AArch64/RISC-V only)
  -ffixed-x2              Reserve the x2 register (AArch64/RISC-V only)
  -ffixed-x30             Reserve the x30 register (AArch64/RISC-V only)
  -ffixed-x31             Reserve the x31 register (AArch64/RISC-V only)
  -ffixed-x3              Reserve the x3 register (AArch64/RISC-V only)
  -ffixed-x4              Reserve the x4 register (AArch64/RISC-V only)
  -ffixed-x5              Reserve the x5 register (AArch64/RISC-V only)
  -ffixed-x6              Reserve the x6 register (AArch64/RISC-V only)
  -ffixed-x7              Reserve the x7 register (AArch64/RISC-V only)
  -ffixed-x8              Reserve the x8 register (AArch64/RISC-V only)
  -ffixed-x9              Reserve the x9 register (AArch64/RISC-V only)
  -fforce-dwarf-frame     Always emit a debug frame section
  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization
  -fforce-enable-int128   Enable support for int128_t type
  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (fuses across statements disregarding pragmas) | on (only fuses in the same statement unless dictated by pragmas) | off (never fuses) | fast-honor-pragmas (fuses across statements unless diectated by pragmas). Default is 'fast' for CUDA, 'fast-honor-pragmas' for HIP, and 'on' otherwise.
  -ffp-eval-method=<value>
                          Specifies the evaluation method to use for floating-point arithmetic.
  -ffp-exception-behavior=<value>
                          Specifies the exception behavior of floating-point operations.
  -ffp-model=<value>      Controls the semantics of floating-point calculations.
  -ffreestanding          Assert that the compilation takes place in a freestanding environment
  -ffuchsia-api-level=<value>
                          Set Fuchsia API level
  -ffunction-sections     Place each function in its own section
  -fgeneric-block-helpers Use generic block helpers for copying/destroying blocks
  -fglobal-isel           Enables the global instruction selector
  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard
  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime
  -fgnu89-inline          Use the gnu89 inline semantics
  -fgnuc-version=<value>  Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)
  -fgpu-allow-device-init Allow device side init function in HIP (experimental)
  -fgpu-default-stream=<value>
                          Specify default stream. The default value is 'legacy'. (HIP only)
  -fgpu-defer-diag        Defer host/device related diagnostic messages for CUDA/HIP
  -fgpu-flush-denormals-to-zero
                          Flush denormal floating point values to zero in CUDA/HIP device mode.
  -fgpu-rdc               Generate relocatable device code, also known as separate compilation mode
  -fgpu-sanitize          Enable sanitizer for AMDGPU target
  -fhip-fp32-correctly-rounded-divide-sqrt
                          Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fhip-kernel-arg-name   Specify that kernel argument names are preserved (HIP only)
  -fhip-new-launch-api    Use new kernel launching API for HIP
  -fignore-exceptions     Enable support for ignoring exception handling constructs
  -fimplicit-module-maps  Implicitly search the file system for module map files.
  -fin-descriptor-block-flags
                          Emit in-descriptor block flags
  -finline-functions      Inline suitable functions
  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline
  -finline-max-stacksize=<value>
                          Suppress inlining of functions whose stack size exceeds the given value
  -finput-charset=<value> Specify the default character set for source files
  -finstrument-function-entry-bare
                          Instrument function entry only, after inlining, without arguments to the instrumentation call
  -finstrument-functions-after-inlining
                          Like -finstrument-functions, but insert the calls after inlining
  -finstrument-functions  Generate calls to instrument function entry and exit
  -fintegrated-as         Enable the integrated assembler
  -fintegrated-cc1        Run cc1 in-process
  -fintegrated-objemitter Use internal machine object code emitter.
  -fjmc                   Enable just-my-code debugging
  -fjump-tables           Use jump tables for lowering switches
  -fkeep-static-consts    Keep static const variables if unused
  -flax-vector-conversions=<value>
                          Enable implicit vector bit-casts
  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)
  -flto=auto              Enable LTO in 'full' mode
  -flto=jobserver         Enable LTO in 'full' mode
  -flto=<value>           Set LTO mode
  -flto                   Enable LTO in 'full' mode
  -fmacro-prefix-map=<value>
                          remap file source paths in predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -fmath-errno            Require math functions to indicate errors by setting errno
  -fmax-tokens=<value>    Max total number of preprocessed tokens for -Wmax-tokens.
  -fmax-type-align=<value>
                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment
  -fmemory-profile=<directory>
                          Enable heap memory profiling and dump results into <directory>
  -fmemory-profile        Enable heap memory profiling
  -fmerge-all-constants   Allow merging of constants
  -fmessage-length=<value>
                          Format message diagnostics so that they fit within N columns
  -fminimize-whitespace   Minimize whitespace when emitting preprocessor output
  -fmodule-file=[<name>=]<file>
                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.
  -fmodule-header=<kind>  Build a C++20 Header Unit from a header that should be found in the user (fmodule-header=user) or system (fmodule-header=system) search path.
  -fmodule-header         Build a C++20 Header Unit from a header.
  -fmodule-map-file=<file>
                          Load this module map file
  -fmodule-name=<name>    Specify the name of the module to build
  -fmodule-related-to-pch Mark module as related to a PCH
  -fmodules-cache-path=<directory>
                          Specify the module cache path
  -fmodules-decluse       Require declaration of modules used within a module
  -fmodules-disable-diagnostic-validation
                          Disable validation of the diagnostic options when loading the module
  -fmodules-ignore-macro=<value>
                          Ignore the definition of the given macro when building and loading modules
  -fmodules-prune-after=<seconds>
                          Specify the interval (in seconds) after which a module file will be considered unused
  -fmodules-prune-interval=<seconds>
                          Specify the interval (in seconds) between attempts to prune the module cache
  -fmodules-search-all    Search even non-imported modules to resolve references
  -fmodules-strict-decluse
                          Like -fmodules-decluse but requires all headers to be in modules
  -fmodules-ts            Enable support for the C++ Modules TS
  -fmodules-user-build-path <directory>
                          Specify the module user build path
  -fmodules-validate-input-files-content
                          Validate PCM input files based on content if mtime differs
  -fmodules-validate-once-per-build-session
                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session
  -fmodules-validate-system-headers
                          Validate the system headers that a module depends on when loading the module
  -fmodules               Enable the 'modules' language feature
  -fms-compatibility-version=<value>
                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fms-compatibility      Enable full Microsoft Visual C++ compatibility
  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler
  -fms-hotpatch           Ensure that all functions can be hotpatched at runtime
  -fms-runtime-lib=<value>
                          Select Windows run-time library
  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'
  -fnew-infallible        Enable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-aapcs-bitfield-width
                          Do not follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -fno-access-control     Disable C++ access control
  -fno-addrsig            Don't emit an address-significance table
  -fno-apinotes-modules   Disable module-based external API notes support
  -fno-apinotes           Disable external API notes support
  -fno-assume-sane-operator-new
                          Don't assume that C++'s global operator new can't alias any pointer
  -fno-autolink           Disable generation of linker directives for automatic library linking
  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function
  -fno-builtin            Disable implicit builtin knowledge of functions
  -fno-c++-static-destructors
                          Disable C++ static destructor registration
  -fno-char8_t            Disable C++ builtin type char8_t
  -fno-color-diagnostics  Disable colors in diagnostics
  -fno-common             Compile common globals like normal definitions
  -fno-complete-member-pointers
                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings
  -fno-constant-nsarray-literals
                          Disable creation of CodeFoundation-type constant initializer `NSArray`s from array literals
  -fno-constant-nsdictionary-literals
                          Disable creation of CodeFoundation-type constant initializer `NSDictionary`s from dictionary literals
  -fno-constant-nsnumber-literals
                          Disable creation of CodeFoundation-type constant initializer `NSNumber`s from number literals
  -fno-coverage-mapping   Disable code coverage analysis
  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash
  -fno-cuda-approx-transcendentals
                          Don't use approximate transcendental functions
  -fno-cxx-modules        Disable modules for C++
  -fno-debug-macro        Do not emit macro debug information
  -fno-declspec           Disallow __declspec as a keyword
  -fno-delayed-template-parsing
                          Disable delayed template parsing
  -fno-delete-null-pointer-checks
                          Do not treat usage of null pointers as undefined behavior
  -fno-depscan-share      Turn off -fdepscan-share and -fdepscan-share-parent.
  -fno-diagnostics-fixit-info
                          Do not include fixit information in diagnostics
  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'
  -fno-direct-access-external-data
                          Use GOT indirection to reference external data symbols
  -fno-discard-value-names
                          Do not discard value names in LLVM IR
  -fno-dollars-in-identifiers
                          Disallow '$' in identifiers
  -fno-double-square-bracket-attributes
                          Disable '[[]]' attributes in all C and C++ language modes
  -fno-elide-constructors Disable C++ copy constructor elision
  -fno-elide-type         Do not elide types when printing diagnostics
  -fno-eliminate-unused-debug-types
                          Emit  debug info for defined but unused types
  -fno-exceptions         Disable support for exception handling
  -fno-experimental-relative-c++-abi-vtables
                          Do not use the experimental C++ class ABI for classes with virtual tables
  -fno-experimental-sanitize-metadata=<value>
                          Disable emitting metadata for binary analysis sanitizers
  -fno-file-reproducible  Use the host's platform-specific path separator character when expanding the __FILE__ macro
  -fno-fine-grained-bitfield-accesses
                          Use large-integer access for consecutive bitfield runs.
  -fno-finite-loops       Do not assume that any loop is finite.
  -fno-fixed-point        Disable fixed point types
  -fno-force-enable-int128
                          Disable support for int128_t type
  -fno-generic-block-helpers
                          Don't use generic block helpers for copying/destroying blocks
  -fno-global-isel        Disables the global instruction selector
  -fno-gnu-inline-asm     Disable GNU style inline asm
  -fno-gpu-allow-device-init
                          Don't allow device side init function in HIP (experimental)
  -fno-gpu-defer-diag     Don't defer host/device related diagnostic messages for CUDA/HIP
  -fno-hip-fp32-correctly-rounded-divide-sqrt
                          Don't specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fno-hip-kernel-arg-name
                          Don't specify that kernel argument names are preserved (HIP only)
  -fno-hip-new-launch-api Don't use new kernel launching API for HIP
  -fno-in-descriptor-block-flags
                          Don't emit in-descriptor block flags
  -fno-integrated-as      Disable the integrated assembler
  -fno-integrated-cc1     Spawn a separate process for each cc1
  -fno-integrated-objemitter
                          Use external machine object code emitter.
  -fno-jump-tables        Do not use jump tables for lowering switches
  -fno-keep-static-consts Don't keep static const variables if unused
  -fno-knr-functions      Disable support for K&R C function declarations
  -fno-lto                Disable LTO mode (default)
  -fno-memory-profile     Disable heap memory profiling
  -fno-merge-all-constants
                          Disallow merging of constants
  -fno-modules-check-relocated<value>
                          Skip checks for relocated modules when loading PCM files
  -fno-new-infallible     Disable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-objc-infer-related-result-type
                          do not infer Objective-C related result type based on method family
  -fno-offload-lto        Disable LTO mode (default) for offload compilation
  -fno-openmp-extensions  Disable all Clang extensions for OpenMP directives and clauses
  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators
  -fno-optimize-sibling-calls
                          Disable tail call optimization, keeping the call stack accurate
  -fno-pch-codegen        Do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fno-pch-debuginfo      Do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fno-plt                Use GOT indirection instead of PLT to make external function calls (x86 only)
  -fno-preserve-as-comments
                          Do not preserve comments in inline assembly
  -fno-profile-generate   Disable generation of profile instrumentation.
  -fno-profile-instr-generate
                          Disable generation of profile instrumentation.
  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization
  -fno-pseudo-probe-for-profiling
                          Do not emit pseudo probes for sample profiling
  -fno-ptrauth-abi-version
                          Disable Pointer Authentication ABI versioning
  -fno-ptrauth-kernel-abi-version
                          Disable Pointer Authentication kernel ABI versioning
  -fno-register-global-dtors-with-atexit
                          Don't use atexit or __cxa_atexit to register global destructors
  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags
  -fno-rtti-data          Disable generation of RTTI data
  -fno-rtti               Disable generation of rtti information
  -fno-sanitize-address-globals-dead-stripping
                          Disable linker dead stripping of globals in AddressSanitizer
  -fno-sanitize-address-outline-instrumentation
                          Use default code inlining logic for the address sanitizer
  -fno-sanitize-address-poison-custom-array-cookie
                          Disable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fno-sanitize-address-use-after-scope
                          Disable use-after-scope detection in AddressSanitizer
  -fno-sanitize-address-use-odr-indicator
                          Disable ODR indicator globals
  -fno-sanitize-cfi-canonical-jump-tables
                          Do not make the jump table addresses canonical in the symbol table
  -fno-sanitize-cfi-cross-dso
                          Disable control flow integrity (CFI) checks for cross-DSO calls.
  -fno-sanitize-coverage=<value>
                          Disable features of coverage instrumentation for Sanitizers
  -fno-sanitize-hwaddress-experimental-aliasing
                          Disable aliasing mode in HWAddressSanitizer
  -fno-sanitize-ignorelist
                          Don't use ignorelist file for sanitizers
  -fno-sanitize-memory-param-retval
                          Disable detection of uninitialized parameters and return values
  -fno-sanitize-memory-track-origins
                          Disable origins tracking in MemorySanitizer
  -fno-sanitize-memory-use-after-dtor
                          Disable use-after-destroy detection in MemorySanitizer
  -fno-sanitize-recover=<value>
                          Disable recovery for specified sanitizers
  -fno-sanitize-stable-abi
                          Conventional ABI instrumentation for sanitizer runtime. Default: Conventional
  -fno-sanitize-stats     Disable sanitizer statistics gathering.
  -fno-sanitize-thread-atomics
                          Disable atomic operations instrumentation in ThreadSanitizer
  -fno-sanitize-thread-func-entry-exit
                          Disable function entry/exit instrumentation in ThreadSanitizer
  -fno-sanitize-thread-memory-access
                          Disable memory access instrumentation in ThreadSanitizer
  -fno-sanitize-trap=<value>
                          Disable trapping for specified sanitizers
  -fno-sanitize-trap      Disable trapping for all sanitizers
  -fno-short-wchar        Force wchar_t to be an unsigned int
  -fno-show-column        Do not include column number on diagnostics
  -fno-show-source-location
                          Do not include source location information with diagnostics
  -fno-signed-char        char is unsigned
  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros
  -fno-spell-checking     Disable spell-checking
  -fno-split-machine-functions
                          Disable late function splitting using profile information (x86 ELF)
  -fno-split-stack        Wouldn't use segmented stack
  -fno-stack-check        Disable stack checking
  -fno-stack-clash-protection
                          Disable stack clash protection
  -fno-stack-protector    Disable the use of stack protectors
  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary
  -fno-strict-float-cast-overflow
                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions
  -fno-strict-return      Don't treat control flow paths that fall off the end of a non-void function as unreachable
  -fno-sycl               Disables SYCL kernels compilation for device
  -fno-temp-file          Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes
  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe
  -fno-trap-function-returns
                          The trap function specified by -ftrap-function never returns
  -fno-trigraphs          Do not process trigraph sequences
  -fno-typed-cxx-new-delete
                          Disable use of typed variants of C++ new() and delete()
  -fno-typed-memory-operations-experimental
                          Disable Typed Memory Operations call site rewriting
  -fno-unique-section-names
                          Don't use unique names for text and data sections
  -fno-unroll-loops       Turn off loop unroller
  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors
  -fno-use-init-array     Use .ctors/.dtors instead of .init_array/.fini_array
  -fno-visibility-inlines-hidden-static-local-var
                          Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)
  -fno-xray-function-index
                          Omit function index section at the expense of single-function patching performance
  -fno-zero-initialized-in-bss
                          Don't place zero initialized data in BSS
  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc
  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers
  -fobjc-disable-direct-methods-for-testing
                          Ignore attribute objc_direct so that direct methods can be tested
  -fobjc-encode-cxx-class-template-spec
                          Fully encode c++ class template specialization
  -fobjc-exceptions       Enable Objective-C exceptions
  -fobjc-relative-method-lists
                          Enable relative method lists
  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version
  -fobjc-weak             Enable ARC-style weak references in Objective-C
  -foffload-lto=<value>   Set LTO mode for offload compilation
  -foffload-lto           Enable LTO in 'full' mode for offload compilation
  -fopenmp-extensions     Enable all Clang extensions for OpenMP directives and clauses
  -fopenmp-implicit-rpath Set rpath on OpenMP executables
  -fopenmp-offload-mandatory
                          Do not create a host fallback if offloading to the device fails.
  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.
  -fopenmp-target-debug   Enable debugging in the OpenMP offloading device RTL
  -fopenmp-targets=<value>
                          Specify comma-separated list of triples OpenMP offloading targets to be supported
  -fopenmp-version=<value>
                          Set OpenMP version (e.g. 45 for OpenMP 4.5, 50 for OpenMP 5.0). Default value is 50.
  -fopenmp                Parse OpenMP pragmas and generate parallel code.
  -foptimization-record-file=<file>
                          Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.
  -foptimization-record-passes=<regex>
                          Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)
  -forder-file-instrumentation
                          Generate instrumented code to collect order file into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fpack-struct=<value>   Specify the default maximum struct packing alignment
  -fpascal-strings        Recognize and construct Pascal-style string literals
  -fpass-plugin=<dsopath> Load pass plugin from a dynamic shared object file (only with new pass manager).
  -fpatchable-function-entry=<N,M>
                          Generate M NOPs before function entry and N-M NOPs after function entry
  -fpcc-struct-return     Override the default ABI to return all structs on the stack
  -fpch-codegen           Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fpch-debuginfo         Generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fpch-instantiate-templates
                          Instantiate templates already while building a PCH
  -fpch-validate-input-files-content
                          Validate PCH input files based on content if mtime differs
  -fplugin-arg-<name>-<arg>
                          Pass <arg> to plugin <name>
  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)
  -fprebuilt-implicit-modules
                          Look up implicit modules in the prebuilt module path
  -fprebuilt-module-path=<directory>
                          Specify the prebuilt module path
  -fproc-stat-report=<value>
                          Save subprocess statistics to the given file
  -fproc-stat-report<value>
                          Print subprocess statistics
  -fprofile-exclude-files=<value>
                          Instrument only functions from files where names don't match all the regexes separated by a semi-colon
  -fprofile-filter-files=<value>
                          Instrument only functions from files where names match any regex separated by a semi-colon
  -fprofile-function-groups=<N>
                          Partition functions into N groups and select only functions in group i to be instrumented using -fprofile-selected-function-group
  -fprofile-generate=<directory>
                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate=<file>
                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate
                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fprofile-instr-use=<value>
                          Use instrumentation data for profile-guided optimization
  -fprofile-list=<value>  Filename defining the list of functions/files to instrument
  -fprofile-remapping-file=<file>
                          Use the remappings described in <file> to match the profile data against names in the program
  -fprofile-sample-accurate
                          Specifies that the sample profile is accurate
  -fprofile-sample-use=<value>
                          Enable sample-based profile guided optimizations
  -fprofile-selected-function-group=<i>
                          Partition functions into N groups using -fprofile-function-groups and select only functions in group i to be instrumented. The valid range is 0 to N-1 inclusive
  -fprofile-update=<method>
                          Set update method of profile counters
  -fprofile-use=<pathname>
                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.
  -fprotect-parens        Determines whether the optimizer honors parentheses when floating-point expressions are evaluated
  -fpseudo-probe-for-profiling
                          Emit pseudo probes for sample profiling
  -fptrauth-abi-version=<value>
                          Pointer Authentication ABI version
  -fptrauth-auth-traps    Enable traps on authentication failures
  -fptrauth-block-descriptor-pointers
                          enable signing block descriptors
  -fptrauth-calls         Enable signing and authentication of all indirect calls
  -fptrauth-function-pointer-type-discrimination
                          Enabling type discrimination on C function pointers
  -fptrauth-indirect-gotos
                          Enable signing and authentication of indirect goto targets
  -fptrauth-intrinsics    Enable pointer-authentication intrinsics
  -fptrauth-kernel-abi-version
                          Enable Pointer Authentication kernel ABI version
  -fptrauth-objc-class-ro Enable signing and authentication for ObjC class_ro pointers
  -fptrauth-objc-interface-sel
                          Enable signing and authentication of Objective-C object's 'SEL' fields
  -fptrauth-objc-isa-masking
                          pre- and post-authentication masking mode of objective-c isa pointers
  -fptrauth-objc-isa-mode=<value>
                          Authentication mode for ObjC isa field. Full auth if unspecified
  -fptrauth-objc-isa      Enable signing and authentication of Objective-C object's 'isa' field
  -fptrauth-returns       Enable signing and authentication of return addresses
  -fptrauth-soft          Enable software lowering of pointer authentication
  -fptrauth-vtable-pointer-address-discrimination
                          Enable address discrimination of vtable pointers
  -fptrauth-vtable-pointer-type-discrimination
                          Enable type discrimination of vtable pointers
  -frandomize-layout-seed-file=<file>
                          File holding the seed used by the randomize structure layout feature
  -frandomize-layout-seed=<seed>
                          The seed used by the randomize structure layout feature
  -freciprocal-math       Allow division operations to be reassociated
  -freg-struct-return     Override the default ABI to return small structs in registers
  -fregister-global-dtors-with-atexit
                          Use atexit or __cxa_atexit to register global destructors
  -frelaxed-template-template-args
                          Enable C++17 relaxed template template argument matching
  -freroll-loops          Turn on loop reroller
  -fropi                  Generate read-only position independent code (ARM only)
  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags
  -frwpi                  Generate read-write position independent code (ARM only)
  -fsafe-buffer-usage-suggestions
                          Display suggestions to update code associated with -Wunsafe-buffer-usage warnings
  -fsanitize-address-destructor=<value>
                          Set destructor type used in ASan instrumentation
  -fsanitize-address-field-padding=<value>
                          Level of field padding for AddressSanitizer
  -fsanitize-address-globals-dead-stripping
                          Enable linker dead stripping of globals in AddressSanitizer
  -fsanitize-address-outline-instrumentation
                          Always generate function calls for address sanitizer instrumentation
  -fsanitize-address-poison-custom-array-cookie
                          Enable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fsanitize-address-use-after-return=<mode>
                          Select the mode of detecting stack use-after-return in AddressSanitizer
  -fsanitize-address-use-after-scope
                          Enable use-after-scope detection in AddressSanitizer
  -fsanitize-address-use-odr-indicator
                          Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size
  -fsanitize-blacklist=<value>
                          Alias for -fsanitize-ignorelist=
  -fsanitize-cfi-canonical-jump-tables
                          Make the jump table addresses canonical in the symbol table
  -fsanitize-cfi-cross-dso
                          Enable control flow integrity (CFI) checks for cross-DSO calls.
  -fsanitize-cfi-icall-generalize-pointers
                          Generalize pointers in CFI indirect call type signature checks
  -fsanitize-coverage-allowlist=<value>
                          Restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones
  -fsanitize-coverage-ignorelist=<value>
                          Disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones
  -fsanitize-coverage=<value>
                          Specify the type of coverage instrumentation for Sanitizers
  -fsanitize-hwaddress-abi=<value>
                          Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.
  -fsanitize-hwaddress-experimental-aliasing
                          Enable aliasing mode in HWAddressSanitizer
  -fsanitize-ignorelist=<value>
                          Path to ignorelist file for sanitizers
  -fsanitize-memory-param-retval
                          Enable detection of uninitialized parameters and return values
  -fsanitize-memory-track-origins=<value>
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-track-origins
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-use-after-dtor
                          Enable use-after-destroy detection in MemorySanitizer
  -fsanitize-memtag-mode=<value>
                          Set default MTE mode to 'sync' (default) or 'async'
  -fsanitize-recover=<value>
                          Enable recovery for specified sanitizers
  -fsanitize-stable-abi   Stable  ABI instrumentation for sanitizer runtime. Default: Conventional
  -fsanitize-stats        Enable sanitizer statistics gathering.
  -fsanitize-system-blacklist=<value>
                          Alias for -fsanitize-system-ignorelist=
  -fsanitize-system-ignorelist=<value>
                          Path to system ignorelist file for sanitizers
  -fsanitize-thread-atomics
                          Enable atomic operations instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-func-entry-exit
                          Enable function entry/exit instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-memory-access
                          Enable memory access instrumentation in ThreadSanitizer (default)
  -fsanitize-trap=<value> Enable trapping for specified sanitizers
  -fsanitize-trap         Enable trapping for all sanitizers
  -fsanitize-undefined-strip-path-components=<number>
                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.
  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks
  -fsave-optimization-record=<format>
                          Generate an optimization record file in a specific format
  -fsave-optimization-record
                          Generate a YAML optimization record file
  -fseh-exceptions        Use SEH style exceptions
  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values
  -fshort-wchar           Force wchar_t to be a short unsigned int
  -fshow-overloads=<value>
                          Which overload candidates to show when overload resolution fails. Defaults to 'all'
  -fshow-skipped-includes Show skipped includes in -H output.
  -fsigned-char           char is signed
  -fsized-deallocation    Enable C++14 sized global deallocation functions
  -fsjlj-exceptions       Use SjLj style exceptions
  -fslp-vectorize         Enable the superword-level parallelism vectorization passes
  -fsmall-block-descriptors
                          Enable small block descriptors
  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF
  -fsplit-lto-unit        Enables splitting of the LTO unit
  -fsplit-machine-functions
                          Enable late function splitting using profile information (x86 ELF)
  -fsplit-stack           Use segmented stack
  -fstack-check           Enable stack checking
  -fstack-clash-protection
                          Enable stack clash protection
  -fstack-protector-all   Enable stack protectors for all functions
  -fstack-protector-strong
                          Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable
  -fstack-protector       Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca , which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable. A function with a stack protector has a guard value added to the stack frame that is checked on function exit. The guard value must be positioned in the stack frame such that a buffer overflow from a vulnerable variable will overwrite the guard value before overwriting the function's return address. The reference stack guard value is stored in a global variable.
  -fstack-size-section    Emit section containing metadata on function stack sizes
  -fstack-usage           Emit .su file containing information on function stack sizes
  -fstandalone-debug      Emit full debug info for all types used by the program
  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range
  -fstrict-flex-arrays=<n>
                          Enable optimizations based on the strict definition of flexible arrays
  -fstrict-float-cast-overflow
                          Assume that overflowing float-to-int casts are undefined (default)
  -fstrict-vtable-pointers
                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects
  -fsuppress-conflicting-types
                          Ignore errors from conflicting types in function declarations
  -fswift-async-fp=<option>
                          Control emission of Swift async extended frame info
  -fsycl                  Enables SYCL kernels compilation for device
  -fsyntax-only           Run the preprocessor, parser and semantic analysis stages
  -fsystem-module         Build this module as a system module. Only used with -emit-module
  -ftarget-variant-availability-checks
                          Enable availability checks for the target variant platform
  -fthin-link-bitcode=<value>
                          Write minimized bitcode to <file> for the ThinLTO thin link only
  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index
  -ftime-report=<value>   (For new pass manager) 'per-pass': one report for each pass; 'per-pass-run': one report for each pass invocation
  -ftime-trace-granularity=<value>
                          Minimum time granularity (in microseconds) traced by time profiler
  -ftime-trace=<value>    Similar to -ftime-trace. Specify the JSON file or a directory which will contain the JSON file
  -ftime-trace            Turn on time profiler. Generates JSON file based on output filename.
  -ftrap-function-returns The trap function specified by -ftrap-function may return normally
  -ftrap-function=<value> Issue call to specified function rather than a trap instruction
  -ftrapv-handler=<function name>
                          Specify the function to be called on overflow
  -ftrapv                 Trap on integer overflow
  -ftrigraphs             Process trigraph sequences
  -ftrivial-auto-var-init-skip-cpp-obj
                          do not auto-initialize objects initialized by a C++ constructor
  -ftrivial-auto-var-init-skip-non-pod
                          do not auto-initialize non-POD objects
  -ftrivial-auto-var-init-skip-non-ptr-array
                          do not auto-initialize arrays other than arrays of pointers
  -ftrivial-auto-var-init-skip-stl
                          do not auto-initialize variables in STL namespace
  -ftrivial-auto-var-init-stop-after=<value>
                          Stop initializing trivial automatic stack variables after the specified number of instances
  -ftrivial-auto-var-init=<value>
                          Initialize trivial automatic stack variables. Defaults to 'uninitialized'
  -ftrivial-auto-var-zero-init-max-size=<value>
                          Zero initialize only first N bytes of each stack variable; 0 value turns off the limit.
  -ftyped-cxx-new-delete  Enable use of typed variants of C++ new() and delete()
  -ftyped-memory-operations-experimental
                          Enable Typed Memory Operations call site rewriting
  -funique-basic-block-section-names
                          Use unique names for basic block sections (ELF Only)
  -funique-internal-linkage-names
                          Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path
  -funroll-loops          Turn on loop unroller
  -fuse-cuid=<value>      Method to generate ID's for compilation units for single source offloading languages CUDA and HIP: 'hash' (ID's generated by hashing file path and command line options) | 'random' (ID's generated as random numbers) | 'none' (disabled). Default is 'hash'. This option will be overridden by option '-cuid=[ID]' if it is specified.
  -fuse-line-directives   Use #line in preprocessed output
  -fvalidate-ast-input-files-content
                          Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical
  -fveclib=<value>        Use the given vector functions library
  -fvectorize             Enable the loop vectorization passes
  -fverbose-asm           Generate verbose assembly output
  -fvirtual-function-elimination
                          Enables dead virtual function elimination optimization. Requires -flto=full
  -fvisibility-dllexport=<value>
                          The visibility for dllexport definitions [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-dllimport=<value>
                          The visibility for dllimport external declarations [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-nodllstorageclass=<value>
                          The visibility for external declarations without an explicit DLL dllstorageclass [-fvisibility-from-dllstorageclass]
  -fvisibility-from-dllstorageclass
                          Set the visibility of symbols in the generated code from their DLL storage class
  -fvisibility-global-new-delete-hidden
                          Give global C++ operator new and delete declarations hidden visibility
  -fvisibility-inlines-hidden-static-local-var
                          When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default
  -fvisibility-inlines-hidden
                          Give inline C++ member functions hidden visibility by default
  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default
  -fvisibility-nodllstorageclass=<value>
                          The visibility for definitions without an explicit DLL export class [-fvisibility-from-dllstorageclass]
  -fvisibility=<value>    Set the default symbol visibility for all global definitions
  -fwasm-exceptions       Use WebAssembly style exceptions
  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto
  -fwrapv                 Treat signed integer overflow as two's complement
  -fwritable-strings      Store string literals as writable data
  -fxl-pragma-pack        Enable IBM XL #pragma pack handling
  -fxray-always-emit-customevents
                          Always emit __xray_customevent(...) calls even if the containing function is not always instrumented
  -fxray-always-emit-typedevents
                          Always emit __xray_typedevent(...) calls even if the containing function is not always instrumented
  -fxray-always-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.
  -fxray-attr-list=<value>
                          Filename defining the list of functions/types for imbuing XRay attributes.
  -fxray-function-groups=<value>
                          Only instrument 1 of N groups
  -fxray-ignore-loops     Don't instrument functions with loops unless they also meet the minimum function size
  -fxray-instruction-threshold=<value>
                          Sets the minimum function size to instrument with XRay
  -fxray-instrumentation-bundle=<value>
                          Select which XRay instrumentation points to emit. Options: all, none, function-entry, function-exit, function, custom. Default is 'all'.  'function' includes both 'function-entry' and 'function-exit'.
  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit
  -fxray-link-deps        Tells clang to add the link dependencies for XRay.
  -fxray-modes=<value>    List of modes to link in by default into XRay instrumented binaries.
  -fxray-never-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.
  -fxray-selected-function-group=<value>
                          When using -fxray-function-groups, select which group of functions to instrument. Valid range is 0 to fxray-function-groups - 1
  -fzero-call-used-regs=<value>
                          Clear call-used registers upon function return (AArch64/x86 only)
  -fzvector               Enable System z vector language extension
  -F <value>              Add directory to framework include search path
  --gcc-install-dir=<value>
                          Use GCC installation in the specified directory. The directory ends with path components like 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Note: executables (e.g. ld) used by the compiler are not overridden by the selected GCC installation
  --gcc-toolchain=<value> Specify a directory where Clang can find 'include' and 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Clang will use the GCC installation with the largest version
  -gcodeview-ghash        Emit type record hashes in a .debug$H section
  -gcodeview              Generate CodeView debug information
  -gdwarf-2               Generate source-level debug information with dwarf version 2
  -gdwarf-3               Generate source-level debug information with dwarf version 3
  -gdwarf-4               Generate source-level debug information with dwarf version 4
  -gdwarf-5               Generate source-level debug information with dwarf version 5
  -gdwarf32               Enables DWARF32 format for ELF binaries, if debug information emission is enabled.
  -gdwarf64               Enables DWARF64 format for ELF binaries, if debug information emission is enabled.
  -gdwarf                 Generate source-level debug information with the default dwarf version
  -gembed-source          Embed source text in DWARF debug sections
  -gen-reproducer=<value> Emit reproducer on (option: off, crash (default), error, always)
  -gline-directives-only  Emit debug line info directives only
  -gline-tables-only      Emit debug line number tables only
  -gmodules               Generate debug info with external references to clang modules or precompiled headers
  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections
  -gno-inline-line-tables Don't emit inline line tables.
  --gpu-bundle-output     Bundle output files of HIP device compilation
  --gpu-instrument-lib=<value>
                          Instrument device library for HIP, which is a LLVM bitcode containing __cyg_profile_func_enter and __cyg_profile_func_exit
  --gpu-max-threads-per-block=<value>
                          Default max threads per block for kernel launch bounds for HIP
  -greproducible          Tune debug info to be reproducible.
  -gsplit-dwarf=<value>   Set DWARF fission mode
  -gz=<value>             DWARF debug sections compression type
  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)
  -g                      Generate source-level debug information
  --help-hidden           Display help for hidden options
  -help                   Display available options
  --hip-device-lib=<value>
                          HIP device library
  --hip-link              Link clang-offload-bundler bundles for HIP
  --hip-path=<value>      HIP runtime installation path, used for finding HIP version and adding HIP include path.
  --hip-version=<value>   HIP version in the format of major.minor.patch
  --hipspv-pass-plugin=<dsopath>
                          path to a pass plugin for HIP to SPIR-V passes.
  -H                      Show header includes and nesting depth
  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path
  -iapinotes-modules <directory>
                          Add directory to the API notes search path referenced by module name
  -iapinotes-path <file>  Include API notes file
  -ibuiltininc            Enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it
  -idirafter <value>      Add directory to AFTER include search path
  -iframeworkwithsysroot <directory>
                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot
  -iframework <value>     Add directory to SYSTEM framework search path
  -imacros <file>         Include macros from file before parsing
  -include-pch <file>     Include precompiled header file
  -include <file>         Include file before parsing
  -index-header-map       Make the next included directory (-I or -F) an indexer header map
  -index-ignore-macros    Ignore macros during indexing
  -index-ignore-pcms      Ignore symbols from imported pcm modules
  -index-ignore-system-symbols
                          Ignore symbols from system headers
  -index-record-codegen-name
                          Record the codegen name for symbols
  -index-store-path <value>
                          Enable indexing with the specified data store path
  -index-unit-output-path <path>
                          Use <path> as the output path for this compilation unit in the index unit file
  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix
  -iquote <directory>     Add directory to QUOTE include search path
  -isysroot <dir>         Set the system root directory (usually /)
  -isystem-after <directory>
                          Add directory to end of the SYSTEM include search path
  -isystem <directory>    Add directory to SYSTEM include search path
  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system
  -ivfsstatcache <value>  Use the stat data cached in file instead of doing filesystem syscalls. See clang-stat-cache utility.
  -iwithprefixbefore <dir>
                          Set directory to include search path with prefix
  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix
  -iwithsysroot <directory>
                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot
  -I <dir>                Add directory to the end of the list of include search paths
  --libomptarget-amdgcn-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-amdgpu-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-nvptx-bc-path=<value>
                          Path to libomptarget-nvptx bitcode library
  -L <dir>                Add directory to library search path
  -mabi=quadword-atomics  Enable quadword atomics ABI on AIX (AIX PPC64 only). Uses lqarx/stqcx. instructions.
  -mabi=vec-default       Enable the default Altivec ABI on AIX (AIX only). Uses only volatile vector registers.
  -mabi=vec-extabi        Enable the extended Altivec ABI on AIX (AIX only). Uses volatile and nonvolatile vector registers
  -mabicalls              Enable SVR4-style position-independent code (Mips only)
  -maix-struct-return     Return all structs in memory (PPC32 only)
  -malign-branch-boundary=<value>
                          Specify the boundary's size to align branches
  -malign-branch=<value>  Specify types of branches to align
  -malign-double          Align doubles to two words in structs (x86 only)
  -mamdgpu-ieee           Sets the IEEE bit in the expected default floating point  mode register. Floating point opcodes that support exception flag gathering quiet and propagate signaling NaN inputs per IEEE 754-2008. This option changes the ABI. (AMDGPU only)
  -mbackchain             Link stack frames through backchain on System Z
  -mbranch-protection=<value>
                          Enforce targets of indirect branches and function returns
  -mbranches-within-32B-boundaries
                          Align selected branches (fused, jcc, jmp) within 32-byte boundary
  -mcmodel=medany         Equivalent to -mcmodel=medium, compatible with RISC-V gcc.
  -mcmodel=medlow         Equivalent to -mcmodel=small, compatible with RISC-V gcc.
  -mcmse                  Allow use of CMSE (Armv8-M Security Extensions)
  -mcode-object-v3        Legacy option to specify code object ABI V3 (AMDGPU only)
  -mcode-object-version=<value>
                          Specify code object ABI version. Defaults to 4. (AMDGPU only)
  -mcrc                   Allow use of CRC instructions (ARM/Mips only)
  -mcumode                Specify CU wavefront execution mode (AMDGPU only)
  -mdefault-visibility-export-mapping=<value>
                          Mapping between default visibility and export
  -mdouble=<n             Force double to be <n> bits
  -MD                     Write a depfile containing user and system headers
  -meabi <value>          Set EABI type. Default depends on triple)
  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)
  -menable-experimental-extensions
                          Enable use of experimental RISC-V extensions.
  -menable-unsafe-fp-math Allow unsafe floating-point math optimizations which may decrease precision
  -mexec-model=<value>    Execution model (WebAssembly only)
  -mexecute-only          Disallow generation of data access to code sections (ARM only)
  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mfentry                Insert calls to fentry at function entry (x86/SystemZ only)
  -mfix-cmse-cve-2021-35465
                          Work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mfix-cortex-a57-aes-1742098
                          Work around Cortex-A57 Erratum 1742098 (ARM only)
  -mfix-cortex-a72-aes-1655431
                          Work around Cortex-A72 Erratum 1655431 (ARM only)
  -mfp32                  Use 32-bit floating point registers (MIPS only)
  -mfp64                  Use 64-bit floating point registers (MIPS only)
  -mframe-chain=<value>   Select the frame chain model used to emit frame records (Arm only).
  -mfunction-return=<value>
                          Replace returns with jumps to ``__x86_return_thunk`` (x86 only, error otherwise)
  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>
  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64/x86 only)
  -mglobal-merge          Enable merging of globals
  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mguard=<value>         Enable or disable Control Flow Guard checks and guard tables emission
  -MG                     Add missing headers to depfile
  -mharden-sls=<value>    Select straight-line speculation hardening scope (ARM/AArch64/X86 only). <arg> must be: all, none, retbr(ARM/AArch64), blr(ARM/AArch64), comdat(ARM/AArch64), nocomdat(ARM/AArch64), return(X86), indirect-jmp(X86)
  -mhvx-ieee-fp           Enable Hexagon HVX IEEE floating-point
  -mhvx-length=<value>    Set Hexagon Vector Length
  -mhvx-qfloat            Enable Hexagon HVX QFloat instructions
  -mhvx=<value>           Enable Hexagon Vector eXtensions
  -mhvx                   Enable Hexagon Vector eXtensions
  -miamcu                 Use Intel MCU ABI
  -mibt-seal              Optimize fcf-protection=branch/full (requires LTO).
  -mignore-xcoff-visibility
                          Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspecified' visibility in XCOFF object file
  --migrate               Run the migrator
  -mincremental-linker-compatible
                          (integrated-as) Emit an object file which can be used with an incremental linker
  -mindirect-branch-cs-prefix
                          Add cs prefix to call and jmp to indirect thunk
  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation
  -mios-version-min=<value>
                          Set iOS deployment target
  -MJ <value>             Write a compilation database entry per input
  -mllvm <value>          Additional arguments to forward to LLVM's option processing
  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)
  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.
  -mlong-double-128       Force long double to be 128 bits
  -mlong-double-64        Force long double to be 64 bits
  -mlong-double-80        Force long double to be 80 bits, padded to 128 bits for storage
  -mlvi-cfi               Enable only control-flow mitigations for Load Value Injection (LVI)
  -mlvi-hardening         Enable all mitigations for Load Value Injection (LVI)
  -mmacos-version-min=<value>
                          Set macOS deployment target
  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.
  -mmark-bti-property     Add .note.gnu.property with BTI to assembly files (AArch64 only)
  -MMD                    Write a depfile containing user headers
  -mmemops                Enable generation of memop instructions
  -mmlir <value>          Additional arguments to forward to MLIR's option processing
  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard
  -mmsa                   Enable MSA ASE (MIPS only)
  -mmt                    Enable MT ASE (MIPS only)
  -MM                     Like -MMD, but also implies -E and writes to stdout by default
  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)
  -mno-bti-at-return-twice
                          Do not add a BTI instruction after a setjmp or other return-twice construct (Arm/AArch64 only)
  -mno-code-object-v3     Legacy option to specify code object ABI V2 (AMDGPU only)
  -mno-crc                Disallow use of CRC instructions (Mips only)
  -mno-cumode             Specify WGP wavefront execution mode (AMDGPU only)
  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)
  -mno-execute-only       Allow generation of data access to code sections (ARM only)
  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mno-fix-cmse-cve-2021-35465
                          Don't work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mno-fix-cortex-a53-835769
                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mno-fix-cortex-a57-aes-1742098
                          Don't work around Cortex-A57 Erratum 1742098 (ARM only)
  -mno-fix-cortex-a72-aes-1655431
                          Don't work around Cortex-A72 Erratum 1655431 (ARM only)
  -mno-global-merge       Disable merging of globals
  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mno-hvx-ieee-fp        Disable Hexagon HVX IEEE floating-point
  -mno-hvx-qfloat         Disable Hexagon HVX QFloat instructions
  -mno-hvx                Disable Hexagon Vector eXtensions
  -mno-implicit-float     Don't generate implicit floating point instructions
  -mno-implicit-sme       Don't generate implicit SME instructions or mode switches
  -mno-incremental-linker-compatible
                          (integrated-as) Emit an object file which cannot be used with an incremental linker
  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)
  -mno-long-calls         Restore the default behaviour of not generating long calls
  -mno-lvi-cfi            Disable control-flow mitigations for Load Value Injection (LVI)
  -mno-lvi-hardening      Disable mitigations for Load Value Injection (LVI)
  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.
  -mno-memops             Disable generation of memop instructions
  -mno-movt               Disallow use of movt/movw pairs (ARM only)
  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard
  -mno-msa                Disable MSA ASE (MIPS only)
  -mno-mt                 Disable MT ASE (MIPS only)
  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.
  -mno-nvj                Disable generation of new-value jumps
  -mno-nvs                Disable generation of new-value stores
  -mno-outline-atomics    Don't generate local calls to out-of-line atomic operations
  -mno-outline            Disable function outlining (AArch64 only)
  -mno-packets            Disable generation of instruction packets
  -mno-relax              Disable linker relaxation
  -mno-restrict-it        Allow generation of complex IT blocks.
  -mno-save-restore       Disable using library calls for save and restore
  -mno-seses              Disable speculative execution side effect suppression (SESES)
  -mno-stack-arg-probe    Disable stack probes which are enabled by default
  -mno-tgsplit            Disable threadgroup split execution mode (AMDGPU only)
  -mno-tls-direct-seg-refs
                          Disable direct TLS access through segment registers
  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)
  -mno-wavefrontsize64    Specify wavefront size 32 mode (AMDGPU only)
  -mnocrc                 Disallow use of CRC instructions (ARM only)
  -mnop-mcount            Generate mcount/__fentry__ calls as nops. To activate they need to be patched in.
  -mnvj                   Enable generation of new-value jumps
  -mnvs                   Enable generation of new-value stores
  -module-dependency-dir <value>
                          Directory to dump module dependencies to
  -module-file-info       Provide information about a particular module file
  -momit-leaf-frame-pointer
                          Omit frame pointer setup for leaf functions
  -moutline-atomics       Generate local calls to out-of-line atomic operations
  -moutline               Enable function outlining (AArch64 only)
  -mpacked-stack          Use packed stack layout (SystemZ only).
  -mpackets               Enable generation of instruction packets
  -mpad-max-prefix-size=<value>
                          Specify maximum number of prefixes to use for padding
  -mprefer-vector-width=<value>
                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.
  -MP                     Create phony target for each dependency (other than main file)
  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility
  -MQ <value>             Specify name of main file output to quote in depfile
  -mrecord-mcount         Generate a __mcount_loc section entry for each __fentry__ call.
  -mrelax-all             (integrated-as) Relax all machine instructions
  -mrelax                 Enable linker relaxation
  -mrestrict-it           Disallow generation of complex IT blocks.
  -mrtd                   Make StdCall calling convention the default
  -msave-restore          Enable using library calls for save and restore
  -mseses                 Enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations
  -msign-return-address=<value>
                          Select return address signing scope
  -mskip-rax-setup        Skip setting up RAX register when passing variable arguments (x86 only)
  -msmall-data-limit=<value>
                          Put global and static data smaller than the limit into a special section
  -msoft-float            Use software floating point
  -mstack-alignment=<value>
                          Set the stack alignment
  -mstack-arg-probe       Enable stack probes
  -mstack-probe-size=<value>
                          Set the stack probe size
  -mstack-protector-guard-offset=<value>
                          Use the given offset for addressing the stack-protector guard
  -mstack-protector-guard-reg=<value>
                          Use the given reg for addressing the stack-protector guard
  -mstack-protector-guard-symbol=<value>
                          Use the given symbol for addressing the stack-protector guard
  -mstack-protector-guard=<value>
                          Use the given guard (global, tls) for addressing the stack-protector guard
  -mstackrealign          Force realign the stack at entry to every function
  -msve-vector-bits=<value>
                          Specify the size in bits of an SVE vector register. Defaults to the vector length agnostic value of "scalable". (AArch64 only)
  -msvr4-struct-return    Return small structs in registers (PPC32 only)
  -mtargetos=<value>      Set the deployment target to be the specified OS and OS version
  -mtgsplit               Enable threadgroup split execution mode (AMDGPU only)
  -mthread-model <value>  The thread model to use. Defaults to 'posix')
  -mtls-direct-seg-refs   Enable direct TLS access through segment registers (default)
  -mtls-size=<value>      Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)
  -mtp=<value>            Thread pointer access method (AArch32/AArch64 only)
  -mtune=<value>          Only supported on AArch64, PowerPC, RISC-V, SystemZ, and X86
  -MT <value>             Specify name of main file output in depfile
  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)
  -munsafe-fp-atomics     Enable unsafe floating point atomic instructions (AMDGPU only)
  -mvscale-max=<value>    Specify the vscale maximum. Defaults to the vector length agnostic value of "0". (AArch64 only)
  -mvscale-min=<value>    Specify the vscale minimum. Defaults to "1". (AArch64 only)
  -MV                     Use NMake/Jom format for the depfile
  -mwavefrontsize64       Specify wavefront size 64 mode (AMDGPU only)
  -M                      Like -MD, but also implies -E and writes to stdout by default
  --no-cuda-include-ptx=<value>
                          Do not include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.
  --no-default-config     Disable loading default configuration files
  --no-gpu-bundle-output  Do not bundle output files of HIP device compilation
  -no-hip-rt              Do not link against HIP runtime libraries
  --no-offload-arch=<value>
                          Remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. 'all' resets the list to its default value.
  --no-offload-new-driver Don't Use the new driver for offloading compilation.
  --no-system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as not including a system header.
  -nobuiltininc           Disable builtin #include directories
  -nogpuinc               Do not add include paths for CUDA/HIP and do not include the default CUDA/HIP wrapper headers
  -nogpulib               Do not link device library for CUDA/HIP device compilation
  -nohipwrapperinc        Do not include the default HIP wrapper headers and include paths
  -nostdinc++             Disable standard #include directories for the C++ standard library
  -ObjC++                 Treat source input files as Objective-C++ inputs
  -objcmt-allowlist-dir-path=<value>
                          Only modify files with a filename contained in the provided directory path
  -objcmt-atomic-property Make migration to 'atomic' properties
  -objcmt-migrate-all     Enable migration to modern ObjC
  -objcmt-migrate-annotation
                          Enable migration to property and method annotations
  -objcmt-migrate-designated-init
                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods
  -objcmt-migrate-instancetype
                          Enable migration to infer instancetype for method result type
  -objcmt-migrate-literals
                          Enable migration to modern ObjC literals
  -objcmt-migrate-ns-macros
                          Enable migration to NS_ENUM/NS_OPTIONS macros
  -objcmt-migrate-property-dot-syntax
                          Enable migration of setter/getter messages to property-dot syntax
  -objcmt-migrate-property
                          Enable migration to modern ObjC property
  -objcmt-migrate-protocol-conformance
                          Enable migration to add protocol conformance on classes
  -objcmt-migrate-readonly-property
                          Enable migration to modern ObjC readonly property
  -objcmt-migrate-readwrite-property
                          Enable migration to modern ObjC readwrite property
  -objcmt-migrate-subscripting
                          Enable migration to modern ObjC subscripting
  -objcmt-ns-nonatomic-iosonly
                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute
  -objcmt-returns-innerpointer-property
                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER
  -objcmt-whitelist-dir-path=<value>
                          Alias for -objcmt-allowlist-dir-path
  -ObjC                   Treat source input files as Objective-C inputs
  -object-file-name=<file>
                          Set the output <file> for debug infos
  --offload-arch=<value>  CUDA offloading device architecture (e.g. sm_35), or HIP offloading target ID in the form of a device architecture followed by target ID features delimited by a colon. Each target ID feature is a pre-defined string followed by a plus or minus sign (e.g. gfx908:xnack+:sramecc-).  May be specified more than once.
  --offload-device-only   Only compile for the offloading device.
  --offload-host-device   Only compile for the offloading host.
  --offload-host-only     Only compile for the offloading host.
  --offload-link          Use the new offloading linker to perform the link job.
  --offload-new-driver    Use the new driver for offloading compilation.
  --offload=<value>       Specify comma-separated list of offloading target triples (CUDA and HIP only)
  -o <file>               Write output to <file>
  -pedantic               Warn on language extensions
  -pg                     Enable mcount instrumentation
  -pipe                   Use pipes between commands, when possible
  --precompile            Only precompile the input
  -print-diagnostic-options
                          Print all of Clang's warning options
  -print-effective-triple Print the effective target triple
  -print-file-name=<file> Print the full library path of <file>
  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace
  -print-libgcc-file-name Print the library path for the currently used compiler runtime library ("libgcc.a" or "libclang_rt.builtins.*.a")
  -print-prog-name=<name> Print the full program path of <name>
  -print-resource-dir     Print the resource directory pathname
  -print-rocm-search-dirs Print the paths used for finding ROCm installation
  -print-runtime-dir      Print the directory pathname containing clangs runtime libraries
  -print-search-dirs      Print the paths used for finding libraries and programs
  -print-supported-cpus   Print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)
  -print-target-triple    Print the normalized target triple
  -print-targets          Print the registered targets
  -pthread                Support POSIX threads in generated code
  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)
  -P                      Disable linemarker output in -E mode
  -Qn                     Do not emit metadata containing compiler name and version
  -Qunused-arguments      Don't emit warning for unused driver arguments
  -Qy                     Emit metadata containing compiler name and version
  -relocatable-pch        Whether to build a relocatable precompiled header
  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++
  -rewrite-objc           Rewrite Objective-C source to C++
  --rocm-device-lib-path=<value>
                          ROCm device library path. Alternative to rocm-path.
  --rocm-path=<value>     ROCm installation path, used for finding and automatically linking required bitcode libraries.
  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression
  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression
  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression
  -rtlib=<value>          Compiler runtime library to use
  -R<remark>              Enable the specified remark
  -save-stats=<value>     Save llvm statistics.
  -save-stats             Save llvm statistics.
  -save-temps=<value>     Save intermediate compilation results.
  -save-temps             Save intermediate compilation results
  -serialize-diagnostics <value>
                          Serialize compiler diagnostics to a file
  -shared-libsan          Dynamically link the sanitizer runtime
  --start-no-unused-arguments
                          Don't emit warnings about unused arguments for the following arguments
  -static-libsan          Statically link the sanitizer runtime
  -static-openmp          Use the static host OpenMP runtime while linking.
  -std=<value>            Language standard to compile for
  -stdlib++-isystem <directory>
                          Use directory as the C++ standard library include path
  -stdlib=<value>         C++ standard library to use
  -sycl-std=<value>       SYCL language standard to compile for.
  --system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as including a system header.
  -S                      Only run preprocess and compilation steps
  --target=<value>        Generate code for the given target
  -time                   Time individual commands
  -traditional-cpp        Enable some traditional CPP emulation
  -trigraphs              Process trigraph sequences
  -T <script>             Specify <script> as linker script
  -undef                  undef all system defines
  -unwindlib=<value>      Unwind library to use
  -U <macro>              Undefine macro <macro>
  --verify-debug-info     Verify the binary representation of debug output
  -verify-pch             Load and verify that a pre-compiled header file is not stale
  --version               Print version information
  -v                      Show commands to run and use verbose output
  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler
  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED
  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker
  -working-directory <value>
                          Resolve file paths relative to the specified directory
  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor
  -W<warning>             Enable the specified warning
  -w                      Suppress all warnings
  -Xanalyzer <arg>        Pass <arg> to the static analyzer
  -Xarch_device <arg>     Pass <arg> to the CUDA/HIP device compilation
  -Xarch_host <arg>       Pass <arg> to the CUDA/HIP host compilation
  -Xassembler <arg>       Pass <arg> to the assembler
  -Xclang=<arg>           Alias for -Xclang
  -Xclang <arg>           Pass <arg> to clang -cc1
  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation
  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler
  -Xlinker <arg>          Pass <arg> to the linker
  -Xoffload-linker<triple> <arg>
                          Pass <arg> to the offload linkers or the ones idenfied by -<triple>
  -Xopenmp-target=<triple> <arg>
                          Pass <arg> to the target offloading toolchain identified by <triple>.
  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.
  -Xpreprocessor <arg>    Pass <arg> to the preprocessor
  -x <language>           Treat subsequent input files as having type <language>
  -z <arg>                Pass -z <arg> to the linker
Executing: g++ --help | head -n 500
Detected CLANG compiler
=============================================================================================
TESTING: checkCxxDialect from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:773)
  Determine the CXX dialect supported by the compiler (language) [and corresponding compiler
    option - if any].

    isGNUish indicates if the compiler is gnu compliant (i.e. clang).
    -with-<lang>-dialect can take options:
      auto: use highest supported dialect configure can determine
      [[c|gnu][xx|++]]23: not yet supported
      [[c|gnu][xx|++]]20: gnu++20 or c++20
      [[c|gnu][xx|++]]17: gnu++17 or c++17
      [[c|gnu][xx|++]]14: gnu++14 or c++14
      [[c|gnu][xx|++]]11: gnu++11 or c++11
      0: disable CxxDialect check and use compiler default

    On return this function sets the following values:
    - if needed, appends the relevant CXX dialect flag to <lang> compiler flags
    - self.cxxDialectRange = (minSupportedDialect,maxSupportedDialect) (e.g. ('c++11','c++14'))
    - self.addDefine('HAVE_{LANG}_DIALECT_CXX{DIALECT_NUM}',1) for every supported dialect
    - self.lang+'dialect' = 'c++'+maxDialectNumber (e.g. 'c++14') but ONLY if the user
      specifically requests a dialect version, otherwise this is not set

    Raises a config.base.ConfigureSetupError if:
    - The user has set both the --with-dialect=[...] configure options and -std=[...] in their
      compiler flags
    - The combination of specifically requested packages cannot all be compiled with the same flag
    - An unknown C++ dialect is provided

    The config.base.ConfigureSetupErrors are NOT meant to be caught, as they are fatal errors
    on part of the user

    Raises a RuntimeError (which may be caught) if:
    - The compiler does not support at minimum -std=c++11
    
Executing: g++ --version
stdout:
Apple clang version 15.0.0 (clang-1500.3.9.4)
Target: arm64-apple-darwin23.4.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
Did not detect MSVC
          checkCxxDialect: checking C++ dialect version for language "CXX" using compiler "g++"
          checkCxxDialect: PETSc believes compiler (g++) IS gnu-ish
          checkCxxDialect: PETSc believes that we have NOT processed g++ before
          checkCxxDialect: configure option after sanitization: --with-cxx-dialect=AUTO
          checkCxxDialect: dialect AUTO has been NOT explicitly selected for CXX
          checkCxxDialect: Have potential flag pool:
	   - -std=gnu++20
	   - -std=c++20
	   - -std=gnu++17
	   - -std=c++17
	   - -std=gnu++14
	   - -std=c++14
	   - -std=gnu++11
	   - -std=c++11
          checkCxxDialect: checking CXX 20 for cxx with -std=gnu++20
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   -std=gnu++20   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

// c++11 includes
#include <memory>
#include <random>
#include <complex>
#include <iostream>
#include <algorithm>

template<class T> void ignore(const T&) { } // silence unused variable warnings
class valClass
{
public:
  int i;
  valClass() { i = 3; }
  valClass(int x) : i(x) { }
};

class MoveSemantics
{
  std::unique_ptr<valClass> _member;

public:
  MoveSemantics(int val = 4) : _member(new valClass(val)) { }
  MoveSemantics& operator=(MoveSemantics &&other) noexcept = default;
};

template<typename T> constexpr T Cubed( T x ) { return x*x*x; }
auto trailing(int x) -> int { return x+2; }
enum class Shapes : int {SQUARE,CIRCLE};
template<class ... Types> struct Tuple { };
using PetscErrorCode = int;


// c++14 includes
#include <type_traits>

template<class T> constexpr T pi = T(3.1415926535897932385L);  // variable template


// c++17 includes
#include <string_view>
#include <any>
#include <optional>
#include <variant>

[[nodiscard]] int nodiscardFunc() { return 0; }
struct S2
{
  // static inline member variables since c++17
  static inline int var = 8675309;
  void f(int i);
};
void S2::f(int i)
{
  // until c++17: Error: invalid syntax
  // since c++17: OK: captures the enclosing S2 by copy
  auto lmbd = [=, *this] { std::cout << i << " " << this->var << std::endl; };
  lmbd();
}


// c++20 includes
#include <compare>
#include <concepts>

consteval int sqr_cpp20(int n)
{
  return n*n;
}
constexpr auto r = sqr_cpp20(10);
static_assert(r == 100);

const char *g_cpp20() { return "dynamic initialization"; }
constexpr const char *f_cpp20(bool p) { return p ? "constant initializer" : g_cpp20(); }
constinit const char *cinit_c = f_cpp20(true); // OK

// Declaration of the concept "Hashable", which is satisfied by any type 'T'
// such that for values 'a' of type 'T', the expression std::hash<T>{}(a)
// compiles and its result is convertible to std::size_t
template <typename T>
concept Hashable = requires(T a)
{
  { std::hash<T>{}(a) } -> std::convertible_to<std::size_t>;
};

struct meow {};

// Constrained C++20 function template:
template <Hashable T>
void f_concept(T) {}

void abbrev_f1(auto); // same as template<class T> void abbrev_f1(T)
void abbrev_f4(const std::destructible auto*, std::floating_point auto&); // same as template<C3 T, C4 U> void abbrev_f4(const T*, U&);

template<>
void abbrev_f4<int>(const int*, const double&); // specialization of abbrev_f4<int, const double> (since C++20)

int main(void) {

// c++11 body
valClass cls = valClass(); // value initialization
int i = cls.i;             // i is not declared const
const int& rci = i;        // but rci is
const_cast<int&>(rci) = 4;

constexpr int big_value = 1234;
decltype(big_value) ierr = big_value;
auto ret = trailing(ierr);
MoveSemantics bob;
MoveSemantics alice;
alice = std::move(bob);ignore(alice);
Tuple<> t0;ignore(t0);
Tuple<long> t1;ignore(t1);
Tuple<int,float> t2;ignore(t2);
std::random_device rd;
std::mt19937 mt(rd());
std::normal_distribution<double> dist(0,1);
const double x = dist(mt);
std::cout << x << ret << std::endl;
std::vector<std::unique_ptr<double>> vector;
std::sort(vector.begin(), vector.end(), [](std::unique_ptr<double> &a, std::unique_ptr<double> &b) { return *a < *b; });


// c++14 body
auto ptr = std::make_unique<int>();
*ptr = 1;
std::cout << pi<double> << std::endl;
constexpr const std::complex<double> const_i(0.0,1.0);
auto lambda = [](auto x, auto y) { return x + y; };
std::cout << lambda(3,4) << std::real(const_i) << std::endl;


// c++17 body
std::variant<int,float> v,w;
v = 42;               // v contains int
int ivar = std::get<int>(v);
w = std::get<0>(v);   // same effect as the previous line
w = v;                // same effect as the previous line
S2 foo;
foo.f(ivar);
if constexpr (std::is_arithmetic_v<int>) std::cout << "c++17" << std::endl;
typedef std::integral_constant<Shapes,Shapes::SQUARE> squareShape;
// static_assert with no message since c++17
static_assert(std::is_same_v<squareShape,squareShape>);
auto val = nodiscardFunc();ignore(val);


// c++20 body
ignore(cinit_c);

using std::operator""s;
f_concept("abc"s);

  return 0;
}

              Output from compiling with  -std=gnu++20 

Added Cxx compiler flag -std=gnu++20
          checkCxxDialect: success using -std=gnu++20 for Cxx dialect C++20, set new cxxDialectRange: ('c++11', 'c++20')
            Defined "HAVE_CXX_DIALECT_CXX11" to "1"
            Defined "HAVE_CXX_DIALECT_CXX14" to "1"
            Defined "HAVE_CXX_DIALECT_CXX17" to "1"
            Defined "HAVE_CXX_DIALECT_CXX20" to "1"
=============================================================================================
TESTING: checkCxxPreprocessor from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:1785)
  Locate a functional Cxx preprocessor
    Checking for program /opt/homebrew/opt/gcc@12/bin/g++...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/g++...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/g++...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/g++...not found
    Checking for program /opt/homebrew/bin/g++...not found
    Checking for program /opt/homebrew/sbin/g++...not found
    Checking for program /usr/local/bin/g++...not found
    Checking for program /System/Cryptexes/App/usr/bin/g++...not found
    Checking for program /usr/bin/g++...found
              Defined make macro "CXXPP" to "g++ -E"
Preprocessing source:
#include "confdefs.h"
#include "conffix.h"
#include <cstdlib>

Executing: g++ -E  -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Preprocess output before filtering:
Preprocess output after filtering:
=============================================================================================
TESTING: checkCUDACompiler from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:1504)
  Locate a functional CUDA compiler
    Checking for program /opt/homebrew/opt/gcc@12/bin/nvcc...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/nvcc...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/nvcc...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/nvcc...not found
    Checking for program /opt/homebrew/bin/nvcc...not found
    Checking for program /opt/homebrew/sbin/nvcc...not found
    Checking for program /usr/local/bin/nvcc...not found
    Checking for program /System/Cryptexes/App/usr/bin/nvcc...not found
    Checking for program /usr/bin/nvcc...not found
    Checking for program /bin/nvcc...not found
    Checking for program /usr/sbin/nvcc...not found
    Checking for program /sbin/nvcc...not found
    Checking for program /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin/nvcc...not found
    Checking for program /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin/nvcc...not found
    Checking for program /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin/nvcc...not found
    Checking for program /opt/X11/bin/nvcc...not found
    Checking for program /Library/TeX/texbin/nvcc...not found
    Checking for program /Users/jacksonbaglino/Petsc-3.20/lib/petsc/bin/win32fe/nvcc...not found
    Checking for program /Developer/NVIDIA/CUDA-6.5/bin/nvcc...not found
    Checking for program /Users/jacksonbaglino/Petsc-3.20/lib/petsc/bin/win32fe/nvcc...not found
  Unable to find programs: ['nvcc'] in listing of the specific search path: ['/Developer/NVIDIA/CUDA-6.5/bin']
      Warning accessing /Developer/NVIDIA/CUDA-6.5/bin gives errors: [Errno 2] No such file or directory: '/Developer/NVIDIA/CUDA-6.5/bin'
    Checking for program /usr/local/cuda/bin/nvcc...not found
    Checking for program /Users/jacksonbaglino/Petsc-3.20/lib/petsc/bin/win32fe/nvcc...not found
  Unable to find programs: ['nvcc'] in listing of the specific search path: ['/usr/local/cuda/bin']
      Warning accessing /usr/local/cuda/bin gives errors: [Errno 2] No such file or directory: '/usr/local/cuda/bin'
    Checking for program /opt/homebrew/opt/gcc@12/bin/clang...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/clang...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/clang...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/clang...not found
    Checking for program /opt/homebrew/bin/clang...not found
    Checking for program /opt/homebrew/sbin/clang...not found
    Checking for program /usr/local/bin/clang...not found
    Checking for program /System/Cryptexes/App/usr/bin/clang...not found
    Checking for program /usr/bin/clang...found
              Defined make macro "CUDAC" to "clang"
Executing: clang -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cu 
stdout:
clang: error: cannot find libdevice for sm_35; provide path to different CUDA installation via '--cuda-path', or pass '-nocudalib' to build without linking with libdevice
clang: error: cannot find CUDA installation; provide its path via '--cuda-path', or pass '-nocudainc' to build without CUDA includes
clang: error: cannot find CUDA installation; provide its path via '--cuda-path', or pass '-nocudainc' to build without CUDA includes
Possible ERROR while running compiler: exit code 1
stderr:
clang: error: cannot find libdevice for sm_35; provide path to different CUDA installation via '--cuda-path', or pass '-nocudalib' to build without linking with libdevice
clang: error: cannot find CUDA installation; provide its path via '--cuda-path', or pass '-nocudainc' to build without CUDA includes
clang: error: cannot find CUDA installation; provide its path via '--cuda-path', or pass '-nocudainc' to build without CUDA includes
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

          Error testing CUDA compiler: Cannot compile CUDA with clang.
            Deleting "CUDAC"
=============================================================================================
TESTING: checkDeviceHostCompiler from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:751)
  Set the host compiler (HC) of the device compiler (DC) to the HC unless the DC already explicitly sets its HC. This may be needed if the default HC used by the DC is ancient and PETSc uses a different HC (e.g., through --with-cxx=...).
          checkDeviceHostCompiler: checking CUDA accepts host compiler g++
=============================================================================================
TESTING: checkHIPCompiler from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:1566)
  Locate a functional HIP compiler
    Checking for program /opt/homebrew/opt/gcc@12/bin/hipcc...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/hipcc...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/hipcc...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/hipcc...not found
    Checking for program /opt/homebrew/bin/hipcc...not found
    Checking for program /opt/homebrew/sbin/hipcc...not found
    Checking for program /usr/local/bin/hipcc...not found
    Checking for program /System/Cryptexes/App/usr/bin/hipcc...not found
    Checking for program /usr/bin/hipcc...not found
    Checking for program /bin/hipcc...not found
    Checking for program /usr/sbin/hipcc...not found
    Checking for program /sbin/hipcc...not found
    Checking for program /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin/hipcc...not found
    Checking for program /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin/hipcc...not found
    Checking for program /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin/hipcc...not found
    Checking for program /opt/X11/bin/hipcc...not found
    Checking for program /Library/TeX/texbin/hipcc...not found
    Checking for program /Users/jacksonbaglino/Petsc-3.20/lib/petsc/bin/win32fe/hipcc...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/opt/rocm/bin/hipcc...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/opt/rocm/bin/hipcc...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/opt/rocm/bin/hipcc...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/opt/rocm/bin/hipcc...not found
    Checking for program /opt/homebrew/bin/opt/rocm/bin/hipcc...not found
    Checking for program /opt/homebrew/sbin/opt/rocm/bin/hipcc...not found
    Checking for program /usr/local/bin/opt/rocm/bin/hipcc...not found
    Checking for program /System/Cryptexes/App/usr/bin/opt/rocm/bin/hipcc...not found
    Checking for program /usr/bin/opt/rocm/bin/hipcc...not found
    Checking for program /bin/opt/rocm/bin/hipcc...not found
    Checking for program /usr/sbin/opt/rocm/bin/hipcc...not found
    Checking for program /sbin/opt/rocm/bin/hipcc...not found
    Checking for program /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin/opt/rocm/bin/hipcc...not found
    Checking for program /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin/opt/rocm/bin/hipcc...not found
    Checking for program /var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin/opt/rocm/bin/hipcc...not found
    Checking for program /opt/X11/bin/opt/rocm/bin/hipcc...not found
    Checking for program /Library/TeX/texbin/opt/rocm/bin/hipcc...not found
    Checking for program /Users/jacksonbaglino/Petsc-3.20/lib/petsc/bin/win32fe/opt/rocm/bin/hipcc...not found
=============================================================================================
TESTING: checkDeviceHostCompiler from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:751)
  Set the host compiler (HC) of the device compiler (DC) to the HC unless the DC already explicitly sets its HC. This may be needed if the default HC used by the DC is ancient and PETSc uses a different HC (e.g., through --with-cxx=...).
=============================================================================================
TESTING: checkSYCLCompiler from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:1625)
  Locate a functional SYCL compiler
=============================================================================================
TESTING: checkDeviceHostCompiler from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:751)
  Set the host compiler (HC) of the device compiler (DC) to the HC unless the DC already explicitly sets its HC. This may be needed if the default HC used by the DC is ancient and PETSc uses a different HC (e.g., through --with-cxx=...).
=============================================================================================
TESTING: checkFortranCompiler from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:1878)
  Locate a functional Fortran compiler
    Checking for program /opt/homebrew/opt/gcc@12/bin/gfortran-12...found
              Defined make macro "FC" to "gfortran-12"
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o  -lpetsc-ufod4vtr9mqHvKIQiVAm
stdout:
ld: library not found for -lpetsc-ufod4vtr9mqHvKIQiVAm
collect2: error: ld returned 1 exit status
Possible ERROR while running linker: exit code 1
stderr:
ld: library not found for -lpetsc-ufod4vtr9mqHvKIQiVAm
collect2: error: ld returned 1 exit status
======== Checking running linked program
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
Testing executable /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest to see if it can be run
Executing: /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest
Running Executable with threads to time it out at 60
Executing: /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest
Executing: gfortran-12 --version
stdout:
GNU Fortran (Homebrew GCC 12.4.0) 12.4.0
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
=============================================================================================
TESTING: checkFortranPreprocessor from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:1914)
  Locate a functional Fortran preprocessor
    Checking for program /opt/homebrew/opt/gcc@12/bin/gfortran-12...found
              Defined make macro "FPP" to "gfortran-12 -E"
Preprocessing source:
#define foo 10

Executing: gfortran-12 -E  -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Preprocess output before filtering:
Preprocess output after filtering:
=============================================================================================
TESTING: checkFortranComments from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:1933)
  Make sure fortran comment "!" works
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main
! comment

      end

          Fortran comments can use ! in column 1
=============================================================================================
TESTING: checkLargeFileIO from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2105)
  check for large file support with 64-bit offset
=============================================================================================
TESTING: checkArchiver from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2198)
  Check that the archiver exists and can make a library usable by the compiler
Detected Non-Windows compiler
Executing: ar -V
stdout:
usage:  ar -d [-TLsv] archive file ...
	ar -m [-TLsv] archive file ...
	ar -m [-abiTLsv] position archive file ...
	ar -p [-TLsv] archive [file ...]
	ar -q [-cTLsv] archive file ...
	ar -r [-cuTLsv] archive file ...
	ar -r [-abciuTLsv] position archive file ...
	ar -t [-TLsv] archive [file ...]
	ar -x [-ouTLsv] archive [file ...]
Executing: ar -V
stdout:
usage:  ar -d [-TLsv] archive file ...
	ar -m [-TLsv] archive file ...
	ar -m [-abiTLsv] position archive file ...
	ar -p [-TLsv] archive [file ...]
	ar -q [-cTLsv] archive file ...
	ar -r [-cuTLsv] archive file ...
	ar -r [-abciuTLsv] position archive file ...
	ar -t [-TLsv] archive [file ...]
	ar -x [-ouTLsv] archive [file ...]
                Defined make macro "FAST_AR_FLAGS" to "Scq"
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
int foo(int a) {
  return a+1;
}


    Checking for program /opt/homebrew/opt/gcc@12/bin/ar...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/ar...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/ar...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/ar...not found
    Checking for program /opt/homebrew/bin/ar...not found
    Checking for program /opt/homebrew/sbin/ar...not found
    Checking for program /usr/local/bin/ar...not found
    Checking for program /System/Cryptexes/App/usr/bin/ar...not found
    Checking for program /usr/bin/ar...found
              Defined make macro "AR" to "/usr/bin/ar"
    Checking for program /opt/homebrew/opt/gcc@12/bin/ranlib...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/ranlib...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/ranlib...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/ranlib...not found
    Checking for program /opt/homebrew/bin/ranlib...not found
    Checking for program /opt/homebrew/sbin/ranlib...not found
    Checking for program /usr/local/bin/ranlib...not found
    Checking for program /System/Cryptexes/App/usr/bin/ranlib...not found
    Checking for program /usr/bin/ranlib...found
              Defined make macro "RANLIB" to "/usr/bin/ranlib -c"
Executing: /usr/bin/ar cr /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/libconf1.a /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conf1.o
Executing: /usr/bin/ranlib -c /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/libconf1.a
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
extern int foo(int);

int main(void) {
  int b = foo(1);  (void)b;
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest    /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -L/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -lconf1 
            Defined make macro "AR_FLAGS" to "cr"
            Defined make macro "AR_LIB_SUFFIX" to "a"
=============================================================================================
TESTING: checkArchiverRecipeArgfile from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2270)
  Checks if AR handles @ notation
Executing: /usr/bin/ar cr checkRecipeArgfile.a @checkRecipeArgfile.args
stdout: ar: @checkRecipeArgfile.args: No such file or directory
Possible ERROR while running archiver: exit code 1
stderr:
ar: @checkRecipeArgfile.args: No such file or directory
=============================================================================================
TESTING: checkSharedLinker from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2352)
  Check that the linker can produce shared libraries
          Checking shared linker /usr/bin/ar using flags []
    Checking for program /usr/bin/ar...found
              Defined make macro "LD_SHARED" to "/usr/bin/ar"
Executing: gcc --help | head -n 20 
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
stdout: error: write on a pipe with no reader
Executing: gcc --help
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
  -cl-ext=<value>         OpenCL only. Enable or disable OpenCL extensions/optional features. The argument is a comma-separated sequence of one or more extension names, each prefixed by '+' or '-'.
  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.
  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.
  -cl-fp32-correctly-rounded-divide-sqrt
                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.
  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.
  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.
  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.
  -cl-no-stdinc           OpenCL only. Disables all standard includes containing non-native compiler types and functions.
  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.
  -cl-single-precision-constant
                          OpenCL only. Treat double precision floating-point constant as single precision constant.
  -cl-std=<value>         OpenCL language standard to compile for.
  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.
  -cl-uniform-work-group-size
                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel
  -cl-unsafe-math-optimizations
                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.
  --config=<file>         Specify configuration file
  --cuda-compile-host-device
                          Compile CUDA code for both host and device (default). Has no effect on non-CUDA compilations.
  --cuda-device-only      Compile CUDA code for device only
  --cuda-feature=<value>  Manually specify the CUDA feature to use
  --cuda-host-only        Compile CUDA code for host only. Has no effect on non-CUDA compilations.
  --cuda-include-ptx=<value>
                          Include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --cuda-noopt-device-debug
                          Enable device-side debug info generation. Disables ptxas optimizations.
  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation
  --cuda-path=<value>     CUDA installation path
  -cuid=<value>           An ID for compilation unit, which should be the same for the same compilation unit but different for different compilation units. It is used to externalize device-side static variables for single source offloading languages CUDA and HIP so that they can be accessed by the host code of the same compilation unit.
  -cxx-isystem <directory>
                          Add directory to the C++ SYSTEM include search path
  -C                      Include comments in preprocessed output
  -c                      Only run preprocess, compile, and assemble steps
  -darwin-target-variant-triple <value>
                          Specify the darwin target variant triple
  -darwin-target-variant <value>
                          Generate code for an additional runtime variant of the deployment target
  -dD                     Print macro definitions in -E mode in addition to normal output
  -dependency-dot <value> Filename to write DOT-formatted header dependencies to
  -dependency-file <value>
                          Filename (or -) to write dependency output to
  -dI                     Print include directives in -E mode in addition to normal output
  -dM                     Print macro definitions in -E mode instead of normal output
  -dsym-dir <dir>         Directory to output dSYM's (if any) to
  -dump-depscan-tree=<value>
                          emit the CAS identifier for the tree instead of the full -cc1
  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)
  -emit-ast               Emit Clang AST files for source inputs
  -emit-interface-stubs   Generate Interface Stub Files.
  -emit-llvm              Use the LLVM representation for assembler and object files
  -emit-merged-ifs        Generate Interface Stub Files, emit merged text not binary.
  --emit-static-lib       Enable linker job to emit a static library.
  --end-no-unused-arguments
                          Start emitting warnings for unused driver arguments
  --extract-api-ignores=<value>
                          Comma separated list of files containing a new line separated list of API symbols to ignore when extracting API information.
  -extract-api            Extract API information
  -E                      Only run the preprocessor
  -faapcs-bitfield-load   Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).
  -faapcs-bitfield-width  Follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -faddrsig               Emit an address-significance table
  -falign-loops=<N>       N must be a power of two. Align loops to the boundary
  -faligned-allocation    Enable C++17 aligned allocation functions
  -fallow-editor-placeholders
                          Treat editor placeholders as valid source code
  -faltivec-src-compat=<value>
                          Source-level compatibility for Altivec vectors (for PowerPC targets). This includes results of vector comparison (scalar for 'xl', vector for 'gcc') as well as behavior when initializing with a scalar (splatting for 'xl', element zero only for 'gcc'). For 'mixed', the compatibility is as 'gcc' for 'vector bool/vector pixel' and as 'xl' for other types. Current default is 'mixed'.
  -fansi-escape-codes     Use ANSI escape codes for diagnostics
  -fapinotes-cache-path=<directory>
                          Does nothing; API notes are no longer cached separately from modules
  -fapinotes-modules      Enable module-based external API notes support
  -fapinotes-swift-version=<version>
                          Specify the Swift version to use when filtering API notes
  -fapinotes              Enable external API notes support
  -fapple-kext            Use Apple's kernel extensions ABI
  -fapple-link-rtlib      Force linking the clang builtins runtime library
  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling
  -fapplication-extension Restrict code to those available for App Extensions
  -fapprox-func           Allow certain math function calls to be replaced with an approximately equivalent calculation
  -fasync-exceptions      Enable EH Asynchronous exceptions
  -fbasic-block-sections=<value>
                          Place each function's basic blocks in unique sections (ELF Only)
  -fbinutils-version=<major.minor>
                          Produced object files can use all ELF features supported by this binutils version and newer. If -fno-integrated-as is specified, the generated assembly will consider GNU as support. 'none' means that all ELF features can be used, regardless of binutils support. Defaults to 2.26.
  -fblocks                Enable the 'blocks' language feature
  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler
  -fbranch-target-identification
                          Emit branch target identification instructions for indirect branch destinations
  -fbuild-session-file=<file>
                          Use the last modification time of <file> as the build session timestamp
  -fbuild-session-timestamp=<time since Epoch in seconds>
                          Time when the current build session started
  -fbuiltin-module-map    Load the clang builtins module map file.
  -fc++-abi=<value>       C++ ABI to use. This will override the target C++ ABI.
  -fcall-saved-x10        Make the x10 register call-saved (AArch64 only)
  -fcall-saved-x11        Make the x11 register call-saved (AArch64 only)
  -fcall-saved-x12        Make the x12 register call-saved (AArch64 only)
  -fcall-saved-x13        Make the x13 register call-saved (AArch64 only)
  -fcall-saved-x14        Make the x14 register call-saved (AArch64 only)
  -fcall-saved-x15        Make the x15 register call-saved (AArch64 only)
  -fcall-saved-x18        Make the x18 register call-saved (AArch64 only)
  -fcall-saved-x8         Make the x8 register call-saved (AArch64 only)
  -fcall-saved-x9         Make the x9 register call-saved (AArch64 only)
  -fcf-protection=<value> Instrument control-flow architecture protection
  -fcf-protection         Enable cf-protection in 'full' mode
  -fchar8_t               Enable C++ builtin type char8_t
  -fclang-abi-compat=<version>
                          Attempt to match the ABI of Clang <version>
  -fcolor-diagnostics     Enable colors in diagnostics
  -fcomment-block-commands=<arg>
                          Treat each comma separated argument in <arg> as a documentation comment block command
  -fcommon                Place uninitialized global variables in a common block
  -fcomplete-member-pointers
                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fconvergent-functions  Assume functions may be convergent
  -fcoro-aligned-allocation
                          Prefer aligned allocation for C++ Coroutines
  -fcoroutines-ts         Enable support for the C++ Coroutines TS
  -fcoverage-compilation-dir=<value>
                          The compilation directory to embed in the coverage mapping.
  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis
  -fcoverage-prefix-map=<value>
                          remap file source paths in coverage mapping
  -fcrash-diagnostics-dir=<dir>
                          Put crash-report files in <dir>
  -fcrash-diagnostics=<value>
                          Set level of crash diagnostic reporting, (option: off, compiler, all)
  -fcrash-diagnostics     Enable crash diagnostic reporting (default)
  -fcs-profile-generate=<directory>
                          Generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcs-profile-generate   Generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcuda-approx-transcendentals
                          Use approximate transcendental functions
  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces
  -fcxx-exceptions        Enable C++ exceptions
  -fcxx-modules           Enable modules for C++
  -fdata-sections         Place each data in its own section
  -fdebug-compilation-dir=<value>
                          The compilation directory to embed in the debug info
  -fdebug-default-version=<value>
                          Default DWARF version to use, if a -g option caused DWARF debug info to be produced
  -fdebug-info-for-profiling
                          Emit extra debug info to make sample profile more accurate
  -fdebug-macro           Emit macro debug information
  -fdebug-prefix-map=<value>
                          remap file source paths in debug info
  -fdebug-ranges-base-address
                          Use DWARF base address selection entries in .debug_ranges
  -fdebug-types-section   Place debug types in their own section (ELF Only)
  -fdeclspec              Allow __declspec as a keyword
  -fdelayed-template-parsing
                          Parse templated function definitions at the end of the translation unit
  -fdelete-null-pointer-checks
                          Treat usage of null pointers as undefined behavior (default)
  -fdepscan-daemon=<value>
                          Specify the path to the daemon to be used. Clang will use the daemon specified, rather than try to spawn its own based on parent processes.
  -fdepscan-include-tree  Set dep-scanner to produce the include tree
  -fdepscan-prefix-map-sdk=<new>
                          With -fdepscan, auto-detect the SDK path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map-toolchain=<new>
                          With -fdepscan, auto-detect the toolchain path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map=<old>=<new>
                          With -fdepscan, seamlessly filter the CAS filesystem to apply the given prefix, updating the command-line to match.
  -fdepscan-share-identifier <value>
                          Share depscan daemon for Clang invocations using the same string identifier.
  -fdepscan-share-parent=<value>
                          Share state based on the PID of the parent command if the name matches. See also -fdepscan-share-stop.
  -fdepscan-share-parent  Share state based on the PID of the parent command. See also -fdepscan-share-stop.
  -fdepscan-share-stop=<value>
                          Stop looking for the command named by -fdepscan-share if a process with the name of the provided argument is found first. Also blocks -fdepscan-share=parent if the parent has this name. E.g., -fdepscan -fdepscan-share=ninja -fdepscan-share-stop=cmake looks for 'ninja' and 'cmake' in the process tree; if 'ninja' is found first, state is shared based on ninja's PID; if 'cmake' is found first, state is not shared.
  -fdepscan-share=<value> If the argument is the name of a command in the process tree, share state based on its PID. E.g., -fdepscan -fdepscan-share=ninja will search for 'ninja' in the process tree and share state based on its PID if found. See also -fdepscan-share-stop.
  -fdepscan=<value>       Scan for dependencies ahead of compiling, generating a pruned CAS tree to send to -fcas-fs. Values are 'auto', 'daemon' (see -fdepscan-share and -fdepscan-share-parent), 'inline', or 'off' (default).
  -fdepscan               Turn on -fdepscan=auto.
  -fdiagnostics-absolute-paths
                          Print absolute paths in diagnostics
  -fdiagnostics-hotness-threshold=<value>
                          Prevent optimization remarks from being output if they do not have at least this profile count. Use 'auto' to apply the threshold from profile summary
  -fdiagnostics-misexpect-tolerance=<value>
                          Prevent misexpect diagnostics from being output if the profile counts are within N% of the expected. 
  -fdiagnostics-parseable-fixits
                          Print fix-its in machine parseable form
  -fdiagnostics-print-source-range-info
                          Print source range spans in numeric form
  -fdiagnostics-show-hotness
                          Enable profile hotness information in diagnostic line
  -fdiagnostics-show-note-include-stack
                          Display include stacks for diagnostic notes
  -fdiagnostics-show-option
                          Print option name with mappable diagnostics
  -fdiagnostics-show-template-tree
                          Print a template comparison tree for differing templates
  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)
  -fdirect-access-external-data
                          Don't use GOT indirection to reference external data symbols
  -fdiscard-value-names   Discard value names in LLVM IR
  -fdollars-in-identifiers
                          Allow '$' in identifiers
  -fdouble-square-bracket-attributes
                          Enable '[[]]' attributes in all C and C++ language modes
  -fdriver-only           Only run the driver.
  -fdwarf-exceptions      Use DWARF style exceptions
  -feliminate-unused-debug-types
                          Do not emit  debug info for defined but unused types
  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker
  -fembed-bitcode=<option>
                          Embed LLVM bitcode
  -fembed-bitcode         Embed LLVM IR bitcode as data
  -fembed-offload-object=<value>
                          Embed Offloading device-side binary into host object file as a section.
  -femit-all-decls        Emit all declarations, even if unused
  -femit-dwarf-unwind=<value>
                          When to emit DWARF unwind (EH frame) info
  -femulated-tls          Use emutls functions to access thread_local variables
  -fenable-matrix         Enable matrix data type and related builtin functions
  -fexceptions            Enable support for exception handling
  -fexperimental-library  Control whether unstable and experimental library features are enabled. This option enables various library features that are either experimental (also known as TSes), or have been but are not stable yet in the selected Standard Library implementation. It is not recommended to use this option in production code, since neither ABI nor API stability are guaranteed. This is intended to provide a preview of features that will ship in the future for experimentation purposes
  -fexperimental-new-constant-interpreter
                          Enable the experimental new constant interpreter
  -fexperimental-relative-c++-abi-vtables
                          Use the experimental C++ class ABI for classes with virtual tables
  -fexperimental-sanitize-metadata=<value>
                          Specify the type of metadata to emit for binary analysis sanitizers
  -fexperimental-strict-floating-point
                          Enables experimental strict floating point in LLVM.
  -fextend-arguments=<value>
                          Controls how scalar integer arguments are extended in calls to unprototyped and varargs functions
  -ffast-math             Allow aggressive, lossy floating-point optimizations
  -ffile-compilation-dir=<value>
                          The compilation directory to embed in the debug info and coverage mapping.
  -ffile-prefix-map=<value>
                          remap file source paths in debug info, predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -ffile-reproducible     Use the target's platform-specific path separator character when expanding the __FILE__ macro
  -ffine-grained-bitfield-accesses
                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.
  -ffinite-loops          Assume all loops are finite.
  -ffixed-a0              Reserve the a0 register (M68k only)
  -ffixed-a1              Reserve the a1 register (M68k only)
  -ffixed-a2              Reserve the a2 register (M68k only)
  -ffixed-a3              Reserve the a3 register (M68k only)
  -ffixed-a4              Reserve the a4 register (M68k only)
  -ffixed-a5              Reserve the a5 register (M68k only)
  -ffixed-a6              Reserve the a6 register (M68k only)
  -ffixed-d0              Reserve the d0 register (M68k only)
  -ffixed-d1              Reserve the d1 register (M68k only)
  -ffixed-d2              Reserve the d2 register (M68k only)
  -ffixed-d3              Reserve the d3 register (M68k only)
  -ffixed-d4              Reserve the d4 register (M68k only)
  -ffixed-d5              Reserve the d5 register (M68k only)
  -ffixed-d6              Reserve the d6 register (M68k only)
  -ffixed-d7              Reserve the d7 register (M68k only)
  -ffixed-point           Enable fixed point types
  -ffixed-r19             Reserve register r19 (Hexagon only)
  -ffixed-r9              Reserve the r9 register (ARM only)
  -ffixed-x10             Reserve the x10 register (AArch64/RISC-V only)
  -ffixed-x11             Reserve the x11 register (AArch64/RISC-V only)
  -ffixed-x12             Reserve the x12 register (AArch64/RISC-V only)
  -ffixed-x13             Reserve the x13 register (AArch64/RISC-V only)
  -ffixed-x14             Reserve the x14 register (AArch64/RISC-V only)
  -ffixed-x15             Reserve the x15 register (AArch64/RISC-V only)
  -ffixed-x16             Reserve the x16 register (AArch64/RISC-V only)
  -ffixed-x17             Reserve the x17 register (AArch64/RISC-V only)
  -ffixed-x18             Reserve the x18 register (AArch64/RISC-V only)
  -ffixed-x19             Reserve the x19 register (AArch64/RISC-V only)
  -ffixed-x1              Reserve the x1 register (AArch64/RISC-V only)
  -ffixed-x20             Reserve the x20 register (AArch64/RISC-V only)
  -ffixed-x21             Reserve the x21 register (AArch64/RISC-V only)
  -ffixed-x22             Reserve the x22 register (AArch64/RISC-V only)
  -ffixed-x23             Reserve the x23 register (AArch64/RISC-V only)
  -ffixed-x24             Reserve the x24 register (AArch64/RISC-V only)
  -ffixed-x25             Reserve the x25 register (AArch64/RISC-V only)
  -ffixed-x26             Reserve the x26 register (AArch64/RISC-V only)
  -ffixed-x27             Reserve the x27 register (AArch64/RISC-V only)
  -ffixed-x28             Reserve the x28 register (AArch64/RISC-V only)
  -ffixed-x29             Reserve the x29 register (AArch64/RISC-V only)
  -ffixed-x2              Reserve the x2 register (AArch64/RISC-V only)
  -ffixed-x30             Reserve the x30 register (AArch64/RISC-V only)
  -ffixed-x31             Reserve the x31 register (AArch64/RISC-V only)
  -ffixed-x3              Reserve the x3 register (AArch64/RISC-V only)
  -ffixed-x4              Reserve the x4 register (AArch64/RISC-V only)
  -ffixed-x5              Reserve the x5 register (AArch64/RISC-V only)
  -ffixed-x6              Reserve the x6 register (AArch64/RISC-V only)
  -ffixed-x7              Reserve the x7 register (AArch64/RISC-V only)
  -ffixed-x8              Reserve the x8 register (AArch64/RISC-V only)
  -ffixed-x9              Reserve the x9 register (AArch64/RISC-V only)
  -fforce-dwarf-frame     Always emit a debug frame section
  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization
  -fforce-enable-int128   Enable support for int128_t type
  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (fuses across statements disregarding pragmas) | on (only fuses in the same statement unless dictated by pragmas) | off (never fuses) | fast-honor-pragmas (fuses across statements unless diectated by pragmas). Default is 'fast' for CUDA, 'fast-honor-pragmas' for HIP, and 'on' otherwise.
  -ffp-eval-method=<value>
                          Specifies the evaluation method to use for floating-point arithmetic.
  -ffp-exception-behavior=<value>
                          Specifies the exception behavior of floating-point operations.
  -ffp-model=<value>      Controls the semantics of floating-point calculations.
  -ffreestanding          Assert that the compilation takes place in a freestanding environment
  -ffuchsia-api-level=<value>
                          Set Fuchsia API level
  -ffunction-sections     Place each function in its own section
  -fgeneric-block-helpers Use generic block helpers for copying/destroying blocks
  -fglobal-isel           Enables the global instruction selector
  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard
  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime
  -fgnu89-inline          Use the gnu89 inline semantics
  -fgnuc-version=<value>  Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)
  -fgpu-allow-device-init Allow device side init function in HIP (experimental)
  -fgpu-default-stream=<value>
                          Specify default stream. The default value is 'legacy'. (HIP only)
  -fgpu-defer-diag        Defer host/device related diagnostic messages for CUDA/HIP
  -fgpu-flush-denormals-to-zero
                          Flush denormal floating point values to zero in CUDA/HIP device mode.
  -fgpu-rdc               Generate relocatable device code, also known as separate compilation mode
  -fgpu-sanitize          Enable sanitizer for AMDGPU target
  -fhip-fp32-correctly-rounded-divide-sqrt
                          Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fhip-kernel-arg-name   Specify that kernel argument names are preserved (HIP only)
  -fhip-new-launch-api    Use new kernel launching API for HIP
  -fignore-exceptions     Enable support for ignoring exception handling constructs
  -fimplicit-module-maps  Implicitly search the file system for module map files.
  -fin-descriptor-block-flags
                          Emit in-descriptor block flags
  -finline-functions      Inline suitable functions
  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline
  -finline-max-stacksize=<value>
                          Suppress inlining of functions whose stack size exceeds the given value
  -finput-charset=<value> Specify the default character set for source files
  -finstrument-function-entry-bare
                          Instrument function entry only, after inlining, without arguments to the instrumentation call
  -finstrument-functions-after-inlining
                          Like -finstrument-functions, but insert the calls after inlining
  -finstrument-functions  Generate calls to instrument function entry and exit
  -fintegrated-as         Enable the integrated assembler
  -fintegrated-cc1        Run cc1 in-process
  -fintegrated-objemitter Use internal machine object code emitter.
  -fjmc                   Enable just-my-code debugging
  -fjump-tables           Use jump tables for lowering switches
  -fkeep-static-consts    Keep static const variables if unused
  -flax-vector-conversions=<value>
                          Enable implicit vector bit-casts
  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)
  -flto=auto              Enable LTO in 'full' mode
  -flto=jobserver         Enable LTO in 'full' mode
  -flto=<value>           Set LTO mode
  -flto                   Enable LTO in 'full' mode
  -fmacro-prefix-map=<value>
                          remap file source paths in predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -fmath-errno            Require math functions to indicate errors by setting errno
  -fmax-tokens=<value>    Max total number of preprocessed tokens for -Wmax-tokens.
  -fmax-type-align=<value>
                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment
  -fmemory-profile=<directory>
                          Enable heap memory profiling and dump results into <directory>
  -fmemory-profile        Enable heap memory profiling
  -fmerge-all-constants   Allow merging of constants
  -fmessage-length=<value>
                          Format message diagnostics so that they fit within N columns
  -fminimize-whitespace   Minimize whitespace when emitting preprocessor output
  -fmodule-file=[<name>=]<file>
                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.
  -fmodule-header=<kind>  Build a C++20 Header Unit from a header that should be found in the user (fmodule-header=user) or system (fmodule-header=system) search path.
  -fmodule-header         Build a C++20 Header Unit from a header.
  -fmodule-map-file=<file>
                          Load this module map file
  -fmodule-name=<name>    Specify the name of the module to build
  -fmodule-related-to-pch Mark module as related to a PCH
  -fmodules-cache-path=<directory>
                          Specify the module cache path
  -fmodules-decluse       Require declaration of modules used within a module
  -fmodules-disable-diagnostic-validation
                          Disable validation of the diagnostic options when loading the module
  -fmodules-ignore-macro=<value>
                          Ignore the definition of the given macro when building and loading modules
  -fmodules-prune-after=<seconds>
                          Specify the interval (in seconds) after which a module file will be considered unused
  -fmodules-prune-interval=<seconds>
                          Specify the interval (in seconds) between attempts to prune the module cache
  -fmodules-search-all    Search even non-imported modules to resolve references
  -fmodules-strict-decluse
                          Like -fmodules-decluse but requires all headers to be in modules
  -fmodules-ts            Enable support for the C++ Modules TS
  -fmodules-user-build-path <directory>
                          Specify the module user build path
  -fmodules-validate-input-files-content
                          Validate PCM input files based on content if mtime differs
  -fmodules-validate-once-per-build-session
                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session
  -fmodules-validate-system-headers
                          Validate the system headers that a module depends on when loading the module
  -fmodules               Enable the 'modules' language feature
  -fms-compatibility-version=<value>
                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fms-compatibility      Enable full Microsoft Visual C++ compatibility
  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler
  -fms-hotpatch           Ensure that all functions can be hotpatched at runtime
  -fms-runtime-lib=<value>
                          Select Windows run-time library
  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'
  -fnew-infallible        Enable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-aapcs-bitfield-width
                          Do not follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -fno-access-control     Disable C++ access control
  -fno-addrsig            Don't emit an address-significance table
  -fno-apinotes-modules   Disable module-based external API notes support
  -fno-apinotes           Disable external API notes support
  -fno-assume-sane-operator-new
                          Don't assume that C++'s global operator new can't alias any pointer
  -fno-autolink           Disable generation of linker directives for automatic library linking
  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function
  -fno-builtin            Disable implicit builtin knowledge of functions
  -fno-c++-static-destructors
                          Disable C++ static destructor registration
  -fno-char8_t            Disable C++ builtin type char8_t
  -fno-color-diagnostics  Disable colors in diagnostics
  -fno-common             Compile common globals like normal definitions
  -fno-complete-member-pointers
                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings
  -fno-constant-nsarray-literals
                          Disable creation of CodeFoundation-type constant initializer `NSArray`s from array literals
  -fno-constant-nsdictionary-literals
                          Disable creation of CodeFoundation-type constant initializer `NSDictionary`s from dictionary literals
  -fno-constant-nsnumber-literals
                          Disable creation of CodeFoundation-type constant initializer `NSNumber`s from number literals
  -fno-coverage-mapping   Disable code coverage analysis
  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash
  -fno-cuda-approx-transcendentals
                          Don't use approximate transcendental functions
  -fno-cxx-modules        Disable modules for C++
  -fno-debug-macro        Do not emit macro debug information
  -fno-declspec           Disallow __declspec as a keyword
  -fno-delayed-template-parsing
                          Disable delayed template parsing
  -fno-delete-null-pointer-checks
                          Do not treat usage of null pointers as undefined behavior
  -fno-depscan-share      Turn off -fdepscan-share and -fdepscan-share-parent.
  -fno-diagnostics-fixit-info
                          Do not include fixit information in diagnostics
  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'
  -fno-direct-access-external-data
                          Use GOT indirection to reference external data symbols
  -fno-discard-value-names
                          Do not discard value names in LLVM IR
  -fno-dollars-in-identifiers
                          Disallow '$' in identifiers
  -fno-double-square-bracket-attributes
                          Disable '[[]]' attributes in all C and C++ language modes
  -fno-elide-constructors Disable C++ copy constructor elision
  -fno-elide-type         Do not elide types when printing diagnostics
  -fno-eliminate-unused-debug-types
                          Emit  debug info for defined but unused types
  -fno-exceptions         Disable support for exception handling
  -fno-experimental-relative-c++-abi-vtables
                          Do not use the experimental C++ class ABI for classes with virtual tables
  -fno-experimental-sanitize-metadata=<value>
                          Disable emitting metadata for binary analysis sanitizers
  -fno-file-reproducible  Use the host's platform-specific path separator character when expanding the __FILE__ macro
  -fno-fine-grained-bitfield-accesses
                          Use large-integer access for consecutive bitfield runs.
  -fno-finite-loops       Do not assume that any loop is finite.
  -fno-fixed-point        Disable fixed point types
  -fno-force-enable-int128
                          Disable support for int128_t type
  -fno-generic-block-helpers
                          Don't use generic block helpers for copying/destroying blocks
  -fno-global-isel        Disables the global instruction selector
  -fno-gnu-inline-asm     Disable GNU style inline asm
  -fno-gpu-allow-device-init
                          Don't allow device side init function in HIP (experimental)
  -fno-gpu-defer-diag     Don't defer host/device related diagnostic messages for CUDA/HIP
  -fno-hip-fp32-correctly-rounded-divide-sqrt
                          Don't specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fno-hip-kernel-arg-name
                          Don't specify that kernel argument names are preserved (HIP only)
  -fno-hip-new-launch-api Don't use new kernel launching API for HIP
  -fno-in-descriptor-block-flags
                          Don't emit in-descriptor block flags
  -fno-integrated-as      Disable the integrated assembler
  -fno-integrated-cc1     Spawn a separate process for each cc1
  -fno-integrated-objemitter
                          Use external machine object code emitter.
  -fno-jump-tables        Do not use jump tables for lowering switches
  -fno-keep-static-consts Don't keep static const variables if unused
  -fno-knr-functions      Disable support for K&R C function declarations
  -fno-lto                Disable LTO mode (default)
  -fno-memory-profile     Disable heap memory profiling
  -fno-merge-all-constants
                          Disallow merging of constants
  -fno-modules-check-relocated<value>
                          Skip checks for relocated modules when loading PCM files
  -fno-new-infallible     Disable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-objc-infer-related-result-type
                          do not infer Objective-C related result type based on method family
  -fno-offload-lto        Disable LTO mode (default) for offload compilation
  -fno-openmp-extensions  Disable all Clang extensions for OpenMP directives and clauses
  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators
  -fno-optimize-sibling-calls
                          Disable tail call optimization, keeping the call stack accurate
  -fno-pch-codegen        Do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fno-pch-debuginfo      Do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fno-plt                Use GOT indirection instead of PLT to make external function calls (x86 only)
  -fno-preserve-as-comments
                          Do not preserve comments in inline assembly
  -fno-profile-generate   Disable generation of profile instrumentation.
  -fno-profile-instr-generate
                          Disable generation of profile instrumentation.
  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization
  -fno-pseudo-probe-for-profiling
                          Do not emit pseudo probes for sample profiling
  -fno-ptrauth-abi-version
                          Disable Pointer Authentication ABI versioning
  -fno-ptrauth-kernel-abi-version
                          Disable Pointer Authentication kernel ABI versioning
  -fno-register-global-dtors-with-atexit
                          Don't use atexit or __cxa_atexit to register global destructors
  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags
  -fno-rtti-data          Disable generation of RTTI data
  -fno-rtti               Disable generation of rtti information
  -fno-sanitize-address-globals-dead-stripping
                          Disable linker dead stripping of globals in AddressSanitizer
  -fno-sanitize-address-outline-instrumentation
                          Use default code inlining logic for the address sanitizer
  -fno-sanitize-address-poison-custom-array-cookie
                          Disable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fno-sanitize-address-use-after-scope
                          Disable use-after-scope detection in AddressSanitizer
  -fno-sanitize-address-use-odr-indicator
                          Disable ODR indicator globals
  -fno-sanitize-cfi-canonical-jump-tables
                          Do not make the jump table addresses canonical in the symbol table
  -fno-sanitize-cfi-cross-dso
                          Disable control flow integrity (CFI) checks for cross-DSO calls.
  -fno-sanitize-coverage=<value>
                          Disable features of coverage instrumentation for Sanitizers
  -fno-sanitize-hwaddress-experimental-aliasing
                          Disable aliasing mode in HWAddressSanitizer
  -fno-sanitize-ignorelist
                          Don't use ignorelist file for sanitizers
  -fno-sanitize-memory-param-retval
                          Disable detection of uninitialized parameters and return values
  -fno-sanitize-memory-track-origins
                          Disable origins tracking in MemorySanitizer
  -fno-sanitize-memory-use-after-dtor
                          Disable use-after-destroy detection in MemorySanitizer
  -fno-sanitize-recover=<value>
                          Disable recovery for specified sanitizers
  -fno-sanitize-stable-abi
                          Conventional ABI instrumentation for sanitizer runtime. Default: Conventional
  -fno-sanitize-stats     Disable sanitizer statistics gathering.
  -fno-sanitize-thread-atomics
                          Disable atomic operations instrumentation in ThreadSanitizer
  -fno-sanitize-thread-func-entry-exit
                          Disable function entry/exit instrumentation in ThreadSanitizer
  -fno-sanitize-thread-memory-access
                          Disable memory access instrumentation in ThreadSanitizer
  -fno-sanitize-trap=<value>
                          Disable trapping for specified sanitizers
  -fno-sanitize-trap      Disable trapping for all sanitizers
  -fno-short-wchar        Force wchar_t to be an unsigned int
  -fno-show-column        Do not include column number on diagnostics
  -fno-show-source-location
                          Do not include source location information with diagnostics
  -fno-signed-char        char is unsigned
  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros
  -fno-spell-checking     Disable spell-checking
  -fno-split-machine-functions
                          Disable late function splitting using profile information (x86 ELF)
  -fno-split-stack        Wouldn't use segmented stack
  -fno-stack-check        Disable stack checking
  -fno-stack-clash-protection
                          Disable stack clash protection
  -fno-stack-protector    Disable the use of stack protectors
  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary
  -fno-strict-float-cast-overflow
                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions
  -fno-strict-return      Don't treat control flow paths that fall off the end of a non-void function as unreachable
  -fno-sycl               Disables SYCL kernels compilation for device
  -fno-temp-file          Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes
  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe
  -fno-trap-function-returns
                          The trap function specified by -ftrap-function never returns
  -fno-trigraphs          Do not process trigraph sequences
  -fno-typed-cxx-new-delete
                          Disable use of typed variants of C++ new() and delete()
  -fno-typed-memory-operations-experimental
                          Disable Typed Memory Operations call site rewriting
  -fno-unique-section-names
                          Don't use unique names for text and data sections
  -fno-unroll-loops       Turn off loop unroller
  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors
  -fno-use-init-array     Use .ctors/.dtors instead of .init_array/.fini_array
  -fno-visibility-inlines-hidden-static-local-var
                          Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)
  -fno-xray-function-index
                          Omit function index section at the expense of single-function patching performance
  -fno-zero-initialized-in-bss
                          Don't place zero initialized data in BSS
  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc
  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers
  -fobjc-disable-direct-methods-for-testing
                          Ignore attribute objc_direct so that direct methods can be tested
  -fobjc-encode-cxx-class-template-spec
                          Fully encode c++ class template specialization
  -fobjc-exceptions       Enable Objective-C exceptions
  -fobjc-relative-method-lists
                          Enable relative method lists
  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version
  -fobjc-weak             Enable ARC-style weak references in Objective-C
  -foffload-lto=<value>   Set LTO mode for offload compilation
  -foffload-lto           Enable LTO in 'full' mode for offload compilation
  -fopenmp-extensions     Enable all Clang extensions for OpenMP directives and clauses
  -fopenmp-implicit-rpath Set rpath on OpenMP executables
  -fopenmp-offload-mandatory
                          Do not create a host fallback if offloading to the device fails.
  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.
  -fopenmp-target-debug   Enable debugging in the OpenMP offloading device RTL
  -fopenmp-targets=<value>
                          Specify comma-separated list of triples OpenMP offloading targets to be supported
  -fopenmp-version=<value>
                          Set OpenMP version (e.g. 45 for OpenMP 4.5, 50 for OpenMP 5.0). Default value is 50.
  -fopenmp                Parse OpenMP pragmas and generate parallel code.
  -foptimization-record-file=<file>
                          Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.
  -foptimization-record-passes=<regex>
                          Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)
  -forder-file-instrumentation
                          Generate instrumented code to collect order file into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fpack-struct=<value>   Specify the default maximum struct packing alignment
  -fpascal-strings        Recognize and construct Pascal-style string literals
  -fpass-plugin=<dsopath> Load pass plugin from a dynamic shared object file (only with new pass manager).
  -fpatchable-function-entry=<N,M>
                          Generate M NOPs before function entry and N-M NOPs after function entry
  -fpcc-struct-return     Override the default ABI to return all structs on the stack
  -fpch-codegen           Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fpch-debuginfo         Generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fpch-instantiate-templates
                          Instantiate templates already while building a PCH
  -fpch-validate-input-files-content
                          Validate PCH input files based on content if mtime differs
  -fplugin-arg-<name>-<arg>
                          Pass <arg> to plugin <name>
  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)
  -fprebuilt-implicit-modules
                          Look up implicit modules in the prebuilt module path
  -fprebuilt-module-path=<directory>
                          Specify the prebuilt module path
  -fproc-stat-report=<value>
                          Save subprocess statistics to the given file
  -fproc-stat-report<value>
                          Print subprocess statistics
  -fprofile-exclude-files=<value>
                          Instrument only functions from files where names don't match all the regexes separated by a semi-colon
  -fprofile-filter-files=<value>
                          Instrument only functions from files where names match any regex separated by a semi-colon
  -fprofile-function-groups=<N>
                          Partition functions into N groups and select only functions in group i to be instrumented using -fprofile-selected-function-group
  -fprofile-generate=<directory>
                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate=<file>
                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate
                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fprofile-instr-use=<value>
                          Use instrumentation data for profile-guided optimization
  -fprofile-list=<value>  Filename defining the list of functions/files to instrument
  -fprofile-remapping-file=<file>
                          Use the remappings described in <file> to match the profile data against names in the program
  -fprofile-sample-accurate
                          Specifies that the sample profile is accurate
  -fprofile-sample-use=<value>
                          Enable sample-based profile guided optimizations
  -fprofile-selected-function-group=<i>
                          Partition functions into N groups using -fprofile-function-groups and select only functions in group i to be instrumented. The valid range is 0 to N-1 inclusive
  -fprofile-update=<method>
                          Set update method of profile counters
  -fprofile-use=<pathname>
                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.
  -fprotect-parens        Determines whether the optimizer honors parentheses when floating-point expressions are evaluated
  -fpseudo-probe-for-profiling
                          Emit pseudo probes for sample profiling
  -fptrauth-abi-version=<value>
                          Pointer Authentication ABI version
  -fptrauth-auth-traps    Enable traps on authentication failures
  -fptrauth-block-descriptor-pointers
                          enable signing block descriptors
  -fptrauth-calls         Enable signing and authentication of all indirect calls
  -fptrauth-function-pointer-type-discrimination
                          Enabling type discrimination on C function pointers
  -fptrauth-indirect-gotos
                          Enable signing and authentication of indirect goto targets
  -fptrauth-intrinsics    Enable pointer-authentication intrinsics
  -fptrauth-kernel-abi-version
                          Enable Pointer Authentication kernel ABI version
  -fptrauth-objc-class-ro Enable signing and authentication for ObjC class_ro pointers
  -fptrauth-objc-interface-sel
                          Enable signing and authentication of Objective-C object's 'SEL' fields
  -fptrauth-objc-isa-masking
                          pre- and post-authentication masking mode of objective-c isa pointers
  -fptrauth-objc-isa-mode=<value>
                          Authentication mode for ObjC isa field. Full auth if unspecified
  -fptrauth-objc-isa      Enable signing and authentication of Objective-C object's 'isa' field
  -fptrauth-returns       Enable signing and authentication of return addresses
  -fptrauth-soft          Enable software lowering of pointer authentication
  -fptrauth-vtable-pointer-address-discrimination
                          Enable address discrimination of vtable pointers
  -fptrauth-vtable-pointer-type-discrimination
                          Enable type discrimination of vtable pointers
  -frandomize-layout-seed-file=<file>
                          File holding the seed used by the randomize structure layout feature
  -frandomize-layout-seed=<seed>
                          The seed used by the randomize structure layout feature
  -freciprocal-math       Allow division operations to be reassociated
  -freg-struct-return     Override the default ABI to return small structs in registers
  -fregister-global-dtors-with-atexit
                          Use atexit or __cxa_atexit to register global destructors
  -frelaxed-template-template-args
                          Enable C++17 relaxed template template argument matching
  -freroll-loops          Turn on loop reroller
  -fropi                  Generate read-only position independent code (ARM only)
  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags
  -frwpi                  Generate read-write position independent code (ARM only)
  -fsafe-buffer-usage-suggestions
                          Display suggestions to update code associated with -Wunsafe-buffer-usage warnings
  -fsanitize-address-destructor=<value>
                          Set destructor type used in ASan instrumentation
  -fsanitize-address-field-padding=<value>
                          Level of field padding for AddressSanitizer
  -fsanitize-address-globals-dead-stripping
                          Enable linker dead stripping of globals in AddressSanitizer
  -fsanitize-address-outline-instrumentation
                          Always generate function calls for address sanitizer instrumentation
  -fsanitize-address-poison-custom-array-cookie
                          Enable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fsanitize-address-use-after-return=<mode>
                          Select the mode of detecting stack use-after-return in AddressSanitizer
  -fsanitize-address-use-after-scope
                          Enable use-after-scope detection in AddressSanitizer
  -fsanitize-address-use-odr-indicator
                          Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size
  -fsanitize-blacklist=<value>
                          Alias for -fsanitize-ignorelist=
  -fsanitize-cfi-canonical-jump-tables
                          Make the jump table addresses canonical in the symbol table
  -fsanitize-cfi-cross-dso
                          Enable control flow integrity (CFI) checks for cross-DSO calls.
  -fsanitize-cfi-icall-generalize-pointers
                          Generalize pointers in CFI indirect call type signature checks
  -fsanitize-coverage-allowlist=<value>
                          Restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones
  -fsanitize-coverage-ignorelist=<value>
                          Disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones
  -fsanitize-coverage=<value>
                          Specify the type of coverage instrumentation for Sanitizers
  -fsanitize-hwaddress-abi=<value>
                          Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.
  -fsanitize-hwaddress-experimental-aliasing
                          Enable aliasing mode in HWAddressSanitizer
  -fsanitize-ignorelist=<value>
                          Path to ignorelist file for sanitizers
  -fsanitize-memory-param-retval
                          Enable detection of uninitialized parameters and return values
  -fsanitize-memory-track-origins=<value>
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-track-origins
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-use-after-dtor
                          Enable use-after-destroy detection in MemorySanitizer
  -fsanitize-memtag-mode=<value>
                          Set default MTE mode to 'sync' (default) or 'async'
  -fsanitize-recover=<value>
                          Enable recovery for specified sanitizers
  -fsanitize-stable-abi   Stable  ABI instrumentation for sanitizer runtime. Default: Conventional
  -fsanitize-stats        Enable sanitizer statistics gathering.
  -fsanitize-system-blacklist=<value>
                          Alias for -fsanitize-system-ignorelist=
  -fsanitize-system-ignorelist=<value>
                          Path to system ignorelist file for sanitizers
  -fsanitize-thread-atomics
                          Enable atomic operations instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-func-entry-exit
                          Enable function entry/exit instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-memory-access
                          Enable memory access instrumentation in ThreadSanitizer (default)
  -fsanitize-trap=<value> Enable trapping for specified sanitizers
  -fsanitize-trap         Enable trapping for all sanitizers
  -fsanitize-undefined-strip-path-components=<number>
                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.
  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks
  -fsave-optimization-record=<format>
                          Generate an optimization record file in a specific format
  -fsave-optimization-record
                          Generate a YAML optimization record file
  -fseh-exceptions        Use SEH style exceptions
  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values
  -fshort-wchar           Force wchar_t to be a short unsigned int
  -fshow-overloads=<value>
                          Which overload candidates to show when overload resolution fails. Defaults to 'all'
  -fshow-skipped-includes Show skipped includes in -H output.
  -fsigned-char           char is signed
  -fsized-deallocation    Enable C++14 sized global deallocation functions
  -fsjlj-exceptions       Use SjLj style exceptions
  -fslp-vectorize         Enable the superword-level parallelism vectorization passes
  -fsmall-block-descriptors
                          Enable small block descriptors
  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF
  -fsplit-lto-unit        Enables splitting of the LTO unit
  -fsplit-machine-functions
                          Enable late function splitting using profile information (x86 ELF)
  -fsplit-stack           Use segmented stack
  -fstack-check           Enable stack checking
  -fstack-clash-protection
                          Enable stack clash protection
  -fstack-protector-all   Enable stack protectors for all functions
  -fstack-protector-strong
                          Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable
  -fstack-protector       Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca , which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable. A function with a stack protector has a guard value added to the stack frame that is checked on function exit. The guard value must be positioned in the stack frame such that a buffer overflow from a vulnerable variable will overwrite the guard value before overwriting the function's return address. The reference stack guard value is stored in a global variable.
  -fstack-size-section    Emit section containing metadata on function stack sizes
  -fstack-usage           Emit .su file containing information on function stack sizes
  -fstandalone-debug      Emit full debug info for all types used by the program
  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range
  -fstrict-flex-arrays=<n>
                          Enable optimizations based on the strict definition of flexible arrays
  -fstrict-float-cast-overflow
                          Assume that overflowing float-to-int casts are undefined (default)
  -fstrict-vtable-pointers
                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects
  -fsuppress-conflicting-types
                          Ignore errors from conflicting types in function declarations
  -fswift-async-fp=<option>
                          Control emission of Swift async extended frame info
  -fsycl                  Enables SYCL kernels compilation for device
  -fsyntax-only           Run the preprocessor, parser and semantic analysis stages
  -fsystem-module         Build this module as a system module. Only used with -emit-module
  -ftarget-variant-availability-checks
                          Enable availability checks for the target variant platform
  -fthin-link-bitcode=<value>
                          Write minimized bitcode to <file> for the ThinLTO thin link only
  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index
  -ftime-report=<value>   (For new pass manager) 'per-pass': one report for each pass; 'per-pass-run': one report for each pass invocation
  -ftime-trace-granularity=<value>
                          Minimum time granularity (in microseconds) traced by time profiler
  -ftime-trace=<value>    Similar to -ftime-trace. Specify the JSON file or a directory which will contain the JSON file
  -ftime-trace            Turn on time profiler. Generates JSON file based on output filename.
  -ftrap-function-returns The trap function specified by -ftrap-function may return normally
  -ftrap-function=<value> Issue call to specified function rather than a trap instruction
  -ftrapv-handler=<function name>
                          Specify the function to be called on overflow
  -ftrapv                 Trap on integer overflow
  -ftrigraphs             Process trigraph sequences
  -ftrivial-auto-var-init-skip-cpp-obj
                          do not auto-initialize objects initialized by a C++ constructor
  -ftrivial-auto-var-init-skip-non-pod
                          do not auto-initialize non-POD objects
  -ftrivial-auto-var-init-skip-non-ptr-array
                          do not auto-initialize arrays other than arrays of pointers
  -ftrivial-auto-var-init-skip-stl
                          do not auto-initialize variables in STL namespace
  -ftrivial-auto-var-init-stop-after=<value>
                          Stop initializing trivial automatic stack variables after the specified number of instances
  -ftrivial-auto-var-init=<value>
                          Initialize trivial automatic stack variables. Defaults to 'uninitialized'
  -ftrivial-auto-var-zero-init-max-size=<value>
                          Zero initialize only first N bytes of each stack variable; 0 value turns off the limit.
  -ftyped-cxx-new-delete  Enable use of typed variants of C++ new() and delete()
  -ftyped-memory-operations-experimental
                          Enable Typed Memory Operations call site rewriting
  -funique-basic-block-section-names
                          Use unique names for basic block sections (ELF Only)
  -funique-internal-linkage-names
                          Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path
  -funroll-loops          Turn on loop unroller
  -fuse-cuid=<value>      Method to generate ID's for compilation units for single source offloading languages CUDA and HIP: 'hash' (ID's generated by hashing file path and command line options) | 'random' (ID's generated as random numbers) | 'none' (disabled). Default is 'hash'. This option will be overridden by option '-cuid=[ID]' if it is specified.
  -fuse-line-directives   Use #line in preprocessed output
  -fvalidate-ast-input-files-content
                          Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical
  -fveclib=<value>        Use the given vector functions library
  -fvectorize             Enable the loop vectorization passes
  -fverbose-asm           Generate verbose assembly output
  -fvirtual-function-elimination
                          Enables dead virtual function elimination optimization. Requires -flto=full
  -fvisibility-dllexport=<value>
                          The visibility for dllexport definitions [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-dllimport=<value>
                          The visibility for dllimport external declarations [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-nodllstorageclass=<value>
                          The visibility for external declarations without an explicit DLL dllstorageclass [-fvisibility-from-dllstorageclass]
  -fvisibility-from-dllstorageclass
                          Set the visibility of symbols in the generated code from their DLL storage class
  -fvisibility-global-new-delete-hidden
                          Give global C++ operator new and delete declarations hidden visibility
  -fvisibility-inlines-hidden-static-local-var
                          When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default
  -fvisibility-inlines-hidden
                          Give inline C++ member functions hidden visibility by default
  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default
  -fvisibility-nodllstorageclass=<value>
                          The visibility for definitions without an explicit DLL export class [-fvisibility-from-dllstorageclass]
  -fvisibility=<value>    Set the default symbol visibility for all global definitions
  -fwasm-exceptions       Use WebAssembly style exceptions
  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto
  -fwrapv                 Treat signed integer overflow as two's complement
  -fwritable-strings      Store string literals as writable data
  -fxl-pragma-pack        Enable IBM XL #pragma pack handling
  -fxray-always-emit-customevents
                          Always emit __xray_customevent(...) calls even if the containing function is not always instrumented
  -fxray-always-emit-typedevents
                          Always emit __xray_typedevent(...) calls even if the containing function is not always instrumented
  -fxray-always-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.
  -fxray-attr-list=<value>
                          Filename defining the list of functions/types for imbuing XRay attributes.
  -fxray-function-groups=<value>
                          Only instrument 1 of N groups
  -fxray-ignore-loops     Don't instrument functions with loops unless they also meet the minimum function size
  -fxray-instruction-threshold=<value>
                          Sets the minimum function size to instrument with XRay
  -fxray-instrumentation-bundle=<value>
                          Select which XRay instrumentation points to emit. Options: all, none, function-entry, function-exit, function, custom. Default is 'all'.  'function' includes both 'function-entry' and 'function-exit'.
  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit
  -fxray-link-deps        Tells clang to add the link dependencies for XRay.
  -fxray-modes=<value>    List of modes to link in by default into XRay instrumented binaries.
  -fxray-never-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.
  -fxray-selected-function-group=<value>
                          When using -fxray-function-groups, select which group of functions to instrument. Valid range is 0 to fxray-function-groups - 1
  -fzero-call-used-regs=<value>
                          Clear call-used registers upon function return (AArch64/x86 only)
  -fzvector               Enable System z vector language extension
  -F <value>              Add directory to framework include search path
  --gcc-install-dir=<value>
                          Use GCC installation in the specified directory. The directory ends with path components like 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Note: executables (e.g. ld) used by the compiler are not overridden by the selected GCC installation
  --gcc-toolchain=<value> Specify a directory where Clang can find 'include' and 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Clang will use the GCC installation with the largest version
  -gcodeview-ghash        Emit type record hashes in a .debug$H section
  -gcodeview              Generate CodeView debug information
  -gdwarf-2               Generate source-level debug information with dwarf version 2
  -gdwarf-3               Generate source-level debug information with dwarf version 3
  -gdwarf-4               Generate source-level debug information with dwarf version 4
  -gdwarf-5               Generate source-level debug information with dwarf version 5
  -gdwarf32               Enables DWARF32 format for ELF binaries, if debug information emission is enabled.
  -gdwarf64               Enables DWARF64 format for ELF binaries, if debug information emission is enabled.
  -gdwarf                 Generate source-level debug information with the default dwarf version
  -gembed-source          Embed source text in DWARF debug sections
  -gen-reproducer=<value> Emit reproducer on (option: off, crash (default), error, always)
  -gline-directives-only  Emit debug line info directives only
  -gline-tables-only      Emit debug line number tables only
  -gmodules               Generate debug info with external references to clang modules or precompiled headers
  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections
  -gno-inline-line-tables Don't emit inline line tables.
  --gpu-bundle-output     Bundle output files of HIP device compilation
  --gpu-instrument-lib=<value>
                          Instrument device library for HIP, which is a LLVM bitcode containing __cyg_profile_func_enter and __cyg_profile_func_exit
  --gpu-max-threads-per-block=<value>
                          Default max threads per block for kernel launch bounds for HIP
  -greproducible          Tune debug info to be reproducible.
  -gsplit-dwarf=<value>   Set DWARF fission mode
  -gz=<value>             DWARF debug sections compression type
  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)
  -g                      Generate source-level debug information
  --help-hidden           Display help for hidden options
  -help                   Display available options
  --hip-device-lib=<value>
                          HIP device library
  --hip-link              Link clang-offload-bundler bundles for HIP
  --hip-path=<value>      HIP runtime installation path, used for finding HIP version and adding HIP include path.
  --hip-version=<value>   HIP version in the format of major.minor.patch
  --hipspv-pass-plugin=<dsopath>
                          path to a pass plugin for HIP to SPIR-V passes.
  -H                      Show header includes and nesting depth
  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path
  -iapinotes-modules <directory>
                          Add directory to the API notes search path referenced by module name
  -iapinotes-path <file>  Include API notes file
  -ibuiltininc            Enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it
  -idirafter <value>      Add directory to AFTER include search path
  -iframeworkwithsysroot <directory>
                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot
  -iframework <value>     Add directory to SYSTEM framework search path
  -imacros <file>         Include macros from file before parsing
  -include-pch <file>     Include precompiled header file
  -include <file>         Include file before parsing
  -index-header-map       Make the next included directory (-I or -F) an indexer header map
  -index-ignore-macros    Ignore macros during indexing
  -index-ignore-pcms      Ignore symbols from imported pcm modules
  -index-ignore-system-symbols
                          Ignore symbols from system headers
  -index-record-codegen-name
                          Record the codegen name for symbols
  -index-store-path <value>
                          Enable indexing with the specified data store path
  -index-unit-output-path <path>
                          Use <path> as the output path for this compilation unit in the index unit file
  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix
  -iquote <directory>     Add directory to QUOTE include search path
  -isysroot <dir>         Set the system root directory (usually /)
  -isystem-after <directory>
                          Add directory to end of the SYSTEM include search path
  -isystem <directory>    Add directory to SYSTEM include search path
  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system
  -ivfsstatcache <value>  Use the stat data cached in file instead of doing filesystem syscalls. See clang-stat-cache utility.
  -iwithprefixbefore <dir>
                          Set directory to include search path with prefix
  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix
  -iwithsysroot <directory>
                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot
  -I <dir>                Add directory to the end of the list of include search paths
  --libomptarget-amdgcn-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-amdgpu-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-nvptx-bc-path=<value>
                          Path to libomptarget-nvptx bitcode library
  -L <dir>                Add directory to library search path
  -mabi=quadword-atomics  Enable quadword atomics ABI on AIX (AIX PPC64 only). Uses lqarx/stqcx. instructions.
  -mabi=vec-default       Enable the default Altivec ABI on AIX (AIX only). Uses only volatile vector registers.
  -mabi=vec-extabi        Enable the extended Altivec ABI on AIX (AIX only). Uses volatile and nonvolatile vector registers
  -mabicalls              Enable SVR4-style position-independent code (Mips only)
  -maix-struct-return     Return all structs in memory (PPC32 only)
  -malign-branch-boundary=<value>
                          Specify the boundary's size to align branches
  -malign-branch=<value>  Specify types of branches to align
  -malign-double          Align doubles to two words in structs (x86 only)
  -mamdgpu-ieee           Sets the IEEE bit in the expected default floating point  mode register. Floating point opcodes that support exception flag gathering quiet and propagate signaling NaN inputs per IEEE 754-2008. This option changes the ABI. (AMDGPU only)
  -mbackchain             Link stack frames through backchain on System Z
  -mbranch-protection=<value>
                          Enforce targets of indirect branches and function returns
  -mbranches-within-32B-boundaries
                          Align selected branches (fused, jcc, jmp) within 32-byte boundary
  -mcmodel=medany         Equivalent to -mcmodel=medium, compatible with RISC-V gcc.
  -mcmodel=medlow         Equivalent to -mcmodel=small, compatible with RISC-V gcc.
  -mcmse                  Allow use of CMSE (Armv8-M Security Extensions)
  -mcode-object-v3        Legacy option to specify code object ABI V3 (AMDGPU only)
  -mcode-object-version=<value>
                          Specify code object ABI version. Defaults to 4. (AMDGPU only)
  -mcrc                   Allow use of CRC instructions (ARM/Mips only)
  -mcumode                Specify CU wavefront execution mode (AMDGPU only)
  -mdefault-visibility-export-mapping=<value>
                          Mapping between default visibility and export
  -mdouble=<n             Force double to be <n> bits
  -MD                     Write a depfile containing user and system headers
  -meabi <value>          Set EABI type. Default depends on triple)
  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)
  -menable-experimental-extensions
                          Enable use of experimental RISC-V extensions.
  -menable-unsafe-fp-math Allow unsafe floating-point math optimizations which may decrease precision
  -mexec-model=<value>    Execution model (WebAssembly only)
  -mexecute-only          Disallow generation of data access to code sections (ARM only)
  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mfentry                Insert calls to fentry at function entry (x86/SystemZ only)
  -mfix-cmse-cve-2021-35465
                          Work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mfix-cortex-a57-aes-1742098
                          Work around Cortex-A57 Erratum 1742098 (ARM only)
  -mfix-cortex-a72-aes-1655431
                          Work around Cortex-A72 Erratum 1655431 (ARM only)
  -mfp32                  Use 32-bit floating point registers (MIPS only)
  -mfp64                  Use 64-bit floating point registers (MIPS only)
  -mframe-chain=<value>   Select the frame chain model used to emit frame records (Arm only).
  -mfunction-return=<value>
                          Replace returns with jumps to ``__x86_return_thunk`` (x86 only, error otherwise)
  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>
  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64/x86 only)
  -mglobal-merge          Enable merging of globals
  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mguard=<value>         Enable or disable Control Flow Guard checks and guard tables emission
  -MG                     Add missing headers to depfile
  -mharden-sls=<value>    Select straight-line speculation hardening scope (ARM/AArch64/X86 only). <arg> must be: all, none, retbr(ARM/AArch64), blr(ARM/AArch64), comdat(ARM/AArch64), nocomdat(ARM/AArch64), return(X86), indirect-jmp(X86)
  -mhvx-ieee-fp           Enable Hexagon HVX IEEE floating-point
  -mhvx-length=<value>    Set Hexagon Vector Length
  -mhvx-qfloat            Enable Hexagon HVX QFloat instructions
  -mhvx=<value>           Enable Hexagon Vector eXtensions
  -mhvx                   Enable Hexagon Vector eXtensions
  -miamcu                 Use Intel MCU ABI
  -mibt-seal              Optimize fcf-protection=branch/full (requires LTO).
  -mignore-xcoff-visibility
                          Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspecified' visibility in XCOFF object file
  --migrate               Run the migrator
  -mincremental-linker-compatible
                          (integrated-as) Emit an object file which can be used with an incremental linker
  -mindirect-branch-cs-prefix
                          Add cs prefix to call and jmp to indirect thunk
  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation
  -mios-version-min=<value>
                          Set iOS deployment target
  -MJ <value>             Write a compilation database entry per input
  -mllvm <value>          Additional arguments to forward to LLVM's option processing
  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)
  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.
  -mlong-double-128       Force long double to be 128 bits
  -mlong-double-64        Force long double to be 64 bits
  -mlong-double-80        Force long double to be 80 bits, padded to 128 bits for storage
  -mlvi-cfi               Enable only control-flow mitigations for Load Value Injection (LVI)
  -mlvi-hardening         Enable all mitigations for Load Value Injection (LVI)
  -mmacos-version-min=<value>
                          Set macOS deployment target
  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.
  -mmark-bti-property     Add .note.gnu.property with BTI to assembly files (AArch64 only)
  -MMD                    Write a depfile containing user headers
  -mmemops                Enable generation of memop instructions
  -mmlir <value>          Additional arguments to forward to MLIR's option processing
  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard
  -mmsa                   Enable MSA ASE (MIPS only)
  -mmt                    Enable MT ASE (MIPS only)
  -MM                     Like -MMD, but also implies -E and writes to stdout by default
  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)
  -mno-bti-at-return-twice
                          Do not add a BTI instruction after a setjmp or other return-twice construct (Arm/AArch64 only)
  -mno-code-object-v3     Legacy option to specify code object ABI V2 (AMDGPU only)
  -mno-crc                Disallow use of CRC instructions (Mips only)
  -mno-cumode             Specify WGP wavefront execution mode (AMDGPU only)
  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)
  -mno-execute-only       Allow generation of data access to code sections (ARM only)
  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mno-fix-cmse-cve-2021-35465
                          Don't work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mno-fix-cortex-a53-835769
                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mno-fix-cortex-a57-aes-1742098
                          Don't work around Cortex-A57 Erratum 1742098 (ARM only)
  -mno-fix-cortex-a72-aes-1655431
                          Don't work around Cortex-A72 Erratum 1655431 (ARM only)
  -mno-global-merge       Disable merging of globals
  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mno-hvx-ieee-fp        Disable Hexagon HVX IEEE floating-point
  -mno-hvx-qfloat         Disable Hexagon HVX QFloat instructions
  -mno-hvx                Disable Hexagon Vector eXtensions
  -mno-implicit-float     Don't generate implicit floating point instructions
  -mno-implicit-sme       Don't generate implicit SME instructions or mode switches
  -mno-incremental-linker-compatible
                          (integrated-as) Emit an object file which cannot be used with an incremental linker
  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)
  -mno-long-calls         Restore the default behaviour of not generating long calls
  -mno-lvi-cfi            Disable control-flow mitigations for Load Value Injection (LVI)
  -mno-lvi-hardening      Disable mitigations for Load Value Injection (LVI)
  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.
  -mno-memops             Disable generation of memop instructions
  -mno-movt               Disallow use of movt/movw pairs (ARM only)
  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard
  -mno-msa                Disable MSA ASE (MIPS only)
  -mno-mt                 Disable MT ASE (MIPS only)
  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.
  -mno-nvj                Disable generation of new-value jumps
  -mno-nvs                Disable generation of new-value stores
  -mno-outline-atomics    Don't generate local calls to out-of-line atomic operations
  -mno-outline            Disable function outlining (AArch64 only)
  -mno-packets            Disable generation of instruction packets
  -mno-relax              Disable linker relaxation
  -mno-restrict-it        Allow generation of complex IT blocks.
  -mno-save-restore       Disable using library calls for save and restore
  -mno-seses              Disable speculative execution side effect suppression (SESES)
  -mno-stack-arg-probe    Disable stack probes which are enabled by default
  -mno-tgsplit            Disable threadgroup split execution mode (AMDGPU only)
  -mno-tls-direct-seg-refs
                          Disable direct TLS access through segment registers
  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)
  -mno-wavefrontsize64    Specify wavefront size 32 mode (AMDGPU only)
  -mnocrc                 Disallow use of CRC instructions (ARM only)
  -mnop-mcount            Generate mcount/__fentry__ calls as nops. To activate they need to be patched in.
  -mnvj                   Enable generation of new-value jumps
  -mnvs                   Enable generation of new-value stores
  -module-dependency-dir <value>
                          Directory to dump module dependencies to
  -module-file-info       Provide information about a particular module file
  -momit-leaf-frame-pointer
                          Omit frame pointer setup for leaf functions
  -moutline-atomics       Generate local calls to out-of-line atomic operations
  -moutline               Enable function outlining (AArch64 only)
  -mpacked-stack          Use packed stack layout (SystemZ only).
  -mpackets               Enable generation of instruction packets
  -mpad-max-prefix-size=<value>
                          Specify maximum number of prefixes to use for padding
  -mprefer-vector-width=<value>
                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.
  -MP                     Create phony target for each dependency (other than main file)
  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility
  -MQ <value>             Specify name of main file output to quote in depfile
  -mrecord-mcount         Generate a __mcount_loc section entry for each __fentry__ call.
  -mrelax-all             (integrated-as) Relax all machine instructions
  -mrelax                 Enable linker relaxation
  -mrestrict-it           Disallow generation of complex IT blocks.
  -mrtd                   Make StdCall calling convention the default
  -msave-restore          Enable using library calls for save and restore
  -mseses                 Enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations
  -msign-return-address=<value>
                          Select return address signing scope
  -mskip-rax-setup        Skip setting up RAX register when passing variable arguments (x86 only)
  -msmall-data-limit=<value>
                          Put global and static data smaller than the limit into a special section
  -msoft-float            Use software floating point
  -mstack-alignment=<value>
                          Set the stack alignment
  -mstack-arg-probe       Enable stack probes
  -mstack-probe-size=<value>
                          Set the stack probe size
  -mstack-protector-guard-offset=<value>
                          Use the given offset for addressing the stack-protector guard
  -mstack-protector-guard-reg=<value>
                          Use the given reg for addressing the stack-protector guard
  -mstack-protector-guard-symbol=<value>
                          Use the given symbol for addressing the stack-protector guard
  -mstack-protector-guard=<value>
                          Use the given guard (global, tls) for addressing the stack-protector guard
  -mstackrealign          Force realign the stack at entry to every function
  -msve-vector-bits=<value>
                          Specify the size in bits of an SVE vector register. Defaults to the vector length agnostic value of "scalable". (AArch64 only)
  -msvr4-struct-return    Return small structs in registers (PPC32 only)
  -mtargetos=<value>      Set the deployment target to be the specified OS and OS version
  -mtgsplit               Enable threadgroup split execution mode (AMDGPU only)
  -mthread-model <value>  The thread model to use. Defaults to 'posix')
  -mtls-direct-seg-refs   Enable direct TLS access through segment registers (default)
  -mtls-size=<value>      Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)
  -mtp=<value>            Thread pointer access method (AArch32/AArch64 only)
  -mtune=<value>          Only supported on AArch64, PowerPC, RISC-V, SystemZ, and X86
  -MT <value>             Specify name of main file output in depfile
  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)
  -munsafe-fp-atomics     Enable unsafe floating point atomic instructions (AMDGPU only)
  -mvscale-max=<value>    Specify the vscale maximum. Defaults to the vector length agnostic value of "0". (AArch64 only)
  -mvscale-min=<value>    Specify the vscale minimum. Defaults to "1". (AArch64 only)
  -MV                     Use NMake/Jom format for the depfile
  -mwavefrontsize64       Specify wavefront size 64 mode (AMDGPU only)
  -M                      Like -MD, but also implies -E and writes to stdout by default
  --no-cuda-include-ptx=<value>
                          Do not include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.
  --no-default-config     Disable loading default configuration files
  --no-gpu-bundle-output  Do not bundle output files of HIP device compilation
  -no-hip-rt              Do not link against HIP runtime libraries
  --no-offload-arch=<value>
                          Remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. 'all' resets the list to its default value.
  --no-offload-new-driver Don't Use the new driver for offloading compilation.
  --no-system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as not including a system header.
  -nobuiltininc           Disable builtin #include directories
  -nogpuinc               Do not add include paths for CUDA/HIP and do not include the default CUDA/HIP wrapper headers
  -nogpulib               Do not link device library for CUDA/HIP device compilation
  -nohipwrapperinc        Do not include the default HIP wrapper headers and include paths
  -nostdinc++             Disable standard #include directories for the C++ standard library
  -ObjC++                 Treat source input files as Objective-C++ inputs
  -objcmt-allowlist-dir-path=<value>
                          Only modify files with a filename contained in the provided directory path
  -objcmt-atomic-property Make migration to 'atomic' properties
  -objcmt-migrate-all     Enable migration to modern ObjC
  -objcmt-migrate-annotation
                          Enable migration to property and method annotations
  -objcmt-migrate-designated-init
                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods
  -objcmt-migrate-instancetype
                          Enable migration to infer instancetype for method result type
  -objcmt-migrate-literals
                          Enable migration to modern ObjC literals
  -objcmt-migrate-ns-macros
                          Enable migration to NS_ENUM/NS_OPTIONS macros
  -objcmt-migrate-property-dot-syntax
                          Enable migration of setter/getter messages to property-dot syntax
  -objcmt-migrate-property
                          Enable migration to modern ObjC property
  -objcmt-migrate-protocol-conformance
                          Enable migration to add protocol conformance on classes
  -objcmt-migrate-readonly-property
                          Enable migration to modern ObjC readonly property
  -objcmt-migrate-readwrite-property
                          Enable migration to modern ObjC readwrite property
  -objcmt-migrate-subscripting
                          Enable migration to modern ObjC subscripting
  -objcmt-ns-nonatomic-iosonly
                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute
  -objcmt-returns-innerpointer-property
                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER
  -objcmt-whitelist-dir-path=<value>
                          Alias for -objcmt-allowlist-dir-path
  -ObjC                   Treat source input files as Objective-C inputs
  -object-file-name=<file>
                          Set the output <file> for debug infos
  --offload-arch=<value>  CUDA offloading device architecture (e.g. sm_35), or HIP offloading target ID in the form of a device architecture followed by target ID features delimited by a colon. Each target ID feature is a pre-defined string followed by a plus or minus sign (e.g. gfx908:xnack+:sramecc-).  May be specified more than once.
  --offload-device-only   Only compile for the offloading device.
  --offload-host-device   Only compile for the offloading host.
  --offload-host-only     Only compile for the offloading host.
  --offload-link          Use the new offloading linker to perform the link job.
  --offload-new-driver    Use the new driver for offloading compilation.
  --offload=<value>       Specify comma-separated list of offloading target triples (CUDA and HIP only)
  -o <file>               Write output to <file>
  -pedantic               Warn on language extensions
  -pg                     Enable mcount instrumentation
  -pipe                   Use pipes between commands, when possible
  --precompile            Only precompile the input
  -print-diagnostic-options
                          Print all of Clang's warning options
  -print-effective-triple Print the effective target triple
  -print-file-name=<file> Print the full library path of <file>
  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace
  -print-libgcc-file-name Print the library path for the currently used compiler runtime library ("libgcc.a" or "libclang_rt.builtins.*.a")
  -print-prog-name=<name> Print the full program path of <name>
  -print-resource-dir     Print the resource directory pathname
  -print-rocm-search-dirs Print the paths used for finding ROCm installation
  -print-runtime-dir      Print the directory pathname containing clangs runtime libraries
  -print-search-dirs      Print the paths used for finding libraries and programs
  -print-supported-cpus   Print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)
  -print-target-triple    Print the normalized target triple
  -print-targets          Print the registered targets
  -pthread                Support POSIX threads in generated code
  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)
  -P                      Disable linemarker output in -E mode
  -Qn                     Do not emit metadata containing compiler name and version
  -Qunused-arguments      Don't emit warning for unused driver arguments
  -Qy                     Emit metadata containing compiler name and version
  -relocatable-pch        Whether to build a relocatable precompiled header
  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++
  -rewrite-objc           Rewrite Objective-C source to C++
  --rocm-device-lib-path=<value>
                          ROCm device library path. Alternative to rocm-path.
  --rocm-path=<value>     ROCm installation path, used for finding and automatically linking required bitcode libraries.
  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression
  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression
  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression
  -rtlib=<value>          Compiler runtime library to use
  -R<remark>              Enable the specified remark
  -save-stats=<value>     Save llvm statistics.
  -save-stats             Save llvm statistics.
  -save-temps=<value>     Save intermediate compilation results.
  -save-temps             Save intermediate compilation results
  -serialize-diagnostics <value>
                          Serialize compiler diagnostics to a file
  -shared-libsan          Dynamically link the sanitizer runtime
  --start-no-unused-arguments
                          Don't emit warnings about unused arguments for the following arguments
  -static-libsan          Statically link the sanitizer runtime
  -static-openmp          Use the static host OpenMP runtime while linking.
  -std=<value>            Language standard to compile for
  -stdlib++-isystem <directory>
                          Use directory as the C++ standard library include path
  -stdlib=<value>         C++ standard library to use
  -sycl-std=<value>       SYCL language standard to compile for.
  --system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as including a system header.
  -S                      Only run preprocess and compilation steps
  --target=<value>        Generate code for the given target
  -time                   Time individual commands
  -traditional-cpp        Enable some traditional CPP emulation
  -trigraphs              Process trigraph sequences
  -T <script>             Specify <script> as linker script
  -undef                  undef all system defines
  -unwindlib=<value>      Unwind library to use
  -U <macro>              Undefine macro <macro>
  --verify-debug-info     Verify the binary representation of debug output
  -verify-pch             Load and verify that a pre-compiled header file is not stale
  --version               Print version information
  -v                      Show commands to run and use verbose output
  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler
  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED
  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker
  -working-directory <value>
                          Resolve file paths relative to the specified directory
  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor
  -W<warning>             Enable the specified warning
  -w                      Suppress all warnings
  -Xanalyzer <arg>        Pass <arg> to the static analyzer
  -Xarch_device <arg>     Pass <arg> to the CUDA/HIP device compilation
  -Xarch_host <arg>       Pass <arg> to the CUDA/HIP host compilation
  -Xassembler <arg>       Pass <arg> to the assembler
  -Xclang=<arg>           Alias for -Xclang
  -Xclang <arg>           Pass <arg> to clang -cc1
  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation
  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler
  -Xlinker <arg>          Pass <arg> to the linker
  -Xoffload-linker<triple> <arg>
                          Pass <arg> to the offload linkers or the ones idenfied by -<triple>
  -Xopenmp-target=<triple> <arg>
                          Pass <arg> to the target offloading toolchain identified by <triple>.
  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.
  -Xpreprocessor <arg>    Pass <arg> to the preprocessor
  -x <language>           Treat subsequent input files as having type <language>
  -z <arg>                Pass -z <arg> to the linker
Executing: gcc -qversion
stdout:
clang: error: unknown argument '-qversion'; did you mean '--version'?
clang: error: no input files
Executing: gcc -show
stdout:
clang: error: unknown argument: '-show'
clang: error: no input files
            Skipping checking MPI compiler command for PIC flag since MPI compiler -show causes an exception so is likely not an MPI compiler
          Trying C compiler flag -PIC
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -PIC   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
stdout: clang: error: unknown argument '-PIC'; did you mean '-fPIC'?
Possible ERROR while running compiler: exit code 1
stderr:
clang: error: unknown argument '-PIC'; did you mean '-fPIC'?
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -PIC 
clang: error: unknown argument '-PIC'; did you mean '-fPIC'?

PETSc Error: No output file produced
              Rejecting compiler flag -PIC  due to nonzero status from link
          Rejected C compiler flag -PIC because it was not compatible with shared linker /usr/bin/ar using flags []
          Trying C compiler flag -qPIC
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -qPIC   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
stdout: clang: error: unknown argument '-qPIC'; did you mean '-fPIC'?
Possible ERROR while running compiler: exit code 1
stderr:
clang: error: unknown argument '-qPIC'; did you mean '-fPIC'?
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -qPIC 
clang: error: unknown argument '-qPIC'; did you mean '-fPIC'?

PETSc Error: No output file produced
              Rejecting compiler flag -qPIC  due to nonzero status from link
          Rejected C compiler flag -qPIC because it was not compatible with shared linker /usr/bin/ar using flags []
          Trying C compiler flag -KPIC
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -KPIC   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
stdout: clang: error: unknown argument '-KPIC'; did you mean '-fPIC'?
Possible ERROR while running compiler: exit code 1
stderr:
clang: error: unknown argument '-KPIC'; did you mean '-fPIC'?
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -KPIC 
clang: error: unknown argument '-KPIC'; did you mean '-fPIC'?

PETSc Error: No output file produced
              Rejecting compiler flag -KPIC  due to nonzero status from link
          Rejected C compiler flag -KPIC because it was not compatible with shared linker /usr/bin/ar using flags []
          Trying C compiler flag -fPIC
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -fPIC 

Added C compiler flag -fPIC
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
#include <stdio.h>
int (*fprintf_ptr)(FILE*,const char*,...) = fprintf;
int  foo(void){
  fprintf_ptr(stdout,"hello");
  return 0;
}
void bar(void){foo();}

Executing: /usr/bin/ar  cr /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/libconftest.a  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o ; /usr/bin/ranlib -c /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/libconftest.a
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
int foo(void);

int main(void) {
int ret = foo();
if (ret) {}

  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest    -fPIC /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o  -L/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -lconftest
          Using shared linker /usr/bin/ar with flags [] and library extension a
=============================================================================================
TESTING: checkLinkerMac from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2427)
  Tests some Apple Mac specific linker flags
            Defined "USING_DARWIN" to "1"
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-ld_classic   -fPIC /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
            Valid C linker flag -Wl,-ld_classic
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-bind_at_load -Wl,-ld_classic  -fPIC /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
stdout: ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -bind_at_load is deprecated on macOS
Linker output before filtering:
ld: warning: -bind_at_load is deprecated on macOS
Linker output after filtering:
ld: warning: -bind_at_load is deprecated on macOS
            Valid C linker flag -Wl,-bind_at_load
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-commons,use_dylibs -Wl,-ld_classic -Wl,-bind_at_load  -fPIC /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Linker output before filtering:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Linker output after filtering:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
            Valid C linker flag -Wl,-commons,use_dylibs
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-search_paths_first -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs  -fPIC /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Linker output before filtering:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Linker output after filtering:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
            Valid C linker flag -Wl,-search_paths_first
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-no_compact_unwind -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first  -fPIC /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Linker output before filtering:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Linker output after filtering:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
            Valid C linker flag -Wl,-no_compact_unwind
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: g++  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-ld_classic   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
            Valid Cxx linker flag -Wl,-ld_classic
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: g++  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-bind_at_load -Wl,-ld_classic  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
stdout: ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -bind_at_load is deprecated on macOS
Linker output before filtering:
ld: warning: -bind_at_load is deprecated on macOS
Linker output after filtering:
ld: warning: -bind_at_load is deprecated on macOS
            Valid Cxx linker flag -Wl,-bind_at_load
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: g++  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-commons,use_dylibs -Wl,-ld_classic -Wl,-bind_at_load  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Linker output before filtering:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Linker output after filtering:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
            Valid Cxx linker flag -Wl,-commons,use_dylibs
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: g++  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-search_paths_first -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Linker output before filtering:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Linker output after filtering:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
            Valid Cxx linker flag -Wl,-search_paths_first
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: g++  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-no_compact_unwind -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Linker output before filtering:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Linker output after filtering:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
            Valid Cxx linker flag -Wl,-no_compact_unwind
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-ld_classic   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
            Valid FC linker flag -Wl,-ld_classic
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-bind_at_load -Wl,-ld_classic  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
            Valid FC linker flag -Wl,-bind_at_load
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-commons,use_dylibs -Wl,-ld_classic -Wl,-bind_at_load  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
            Valid FC linker flag -Wl,-commons,use_dylibs
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-search_paths_first -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
            Valid FC linker flag -Wl,-search_paths_first
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-no_compact_unwind -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
            Valid FC linker flag -Wl,-no_compact_unwind
=============================================================================================
TESTING: checkPIC from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2055)
  Determine the PIC option for each compiler
          Skip checking PIC options on user request
=============================================================================================
TESTING: checkSharedLinkerPaths from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2466)
  Determine the shared linker path options
       - IRIX: -rpath
       - Linux, OSF: -Wl,-rpath,
       - Solaris: -R
       - FreeBSD: -Wl,-R,
Executing: gcc -V
stdout:
clang: error: argument to '-V' is missing (expected 1 value)
clang: error: no input files
          Trying C linker flag -Wl,-rpath,
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-rpath,/Users/jacksonbaglino/Petsc-3.20 -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -fPIC /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
            Valid C linker flag -Wl,-rpath,/Users/jacksonbaglino/Petsc-3.20
Executing: gcc -V
stdout:
clang: error: argument to '-V' is missing (expected 1 value)
clang: error: no input files
          Trying Cxx linker flag -Wl,-rpath,
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: g++  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-rpath,/Users/jacksonbaglino/Petsc-3.20 -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
            Valid Cxx linker flag -Wl,-rpath,/Users/jacksonbaglino/Petsc-3.20
Executing: gcc -V
stdout:
clang: error: argument to '-V' is missing (expected 1 value)
clang: error: no input files
          Trying FC linker flag -Wl,-rpath,
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-rpath,/Users/jacksonbaglino/Petsc-3.20 -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
            Valid FC linker flag -Wl,-rpath,/Users/jacksonbaglino/Petsc-3.20
=============================================================================================
TESTING: checkLibC from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2505)
  Test whether we need to explicitly include libc in shared linking
       - Mac OSX requires an explicit reference to libc for shared linking
=============================================================================================
TESTING: checkDynamicLinker from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2551)
  Check that the linker can dynamically load shared libraries
Checking for header: dlfcn.h
Preprocessing source:
#include "confdefs.h"
#include "conffix.h"
#include <dlfcn.h>

Executing: gcc -E  -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.headers  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.headers/conftest.c 
Preprocess output before filtering:
Preprocess output after filtering:
              Defined "HAVE_DLFCN_H" to "1"
            Checking for functions [dlopen dlsym dlclose] in library [''] []
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
/* Override any gcc2 internal prototype to avoid an error. */
char dlopen();
static void _check_dlopen() { dlopen(); }
char dlsym();
static void _check_dlsym() { dlsym(); }
char dlclose();
static void _check_dlclose() { dlclose(); }

int main(void) {
_check_dlopen();
_check_dlsym();
_check_dlclose();
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -fPIC /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries/conftest.o   
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
/* Override any gcc2 internal prototype to avoid an error. */
char dlopen();
static void _check_dlopen() { dlopen(); }
char dlsym();
static void _check_dlsym() { dlsym(); }
char dlclose();
static void _check_dlclose() { dlclose(); }
void dummy(void) {_check_dlopen();
_check_dlsym();
_check_dlclose();}

Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90 
Successful compile:
Source:
      program main
      print*,'testing'
      stop
      end
 
Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/confc.o   
          Checking dynamic linker gcc using flags ['-dynamiclib -undefined dynamic_lookup']
    Checking for program /opt/homebrew/opt/gcc@12/bin/gcc...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/gcc...not found
    Checking for program /Users/jacksonbaglino/PetIGA-3.20/projects/effective_thermal_cond/venv_EffK/bin/gcc...not found
    Checking for program /opt/homebrew/opt/gcc@12/bin/gcc...not found
    Checking for program /opt/homebrew/bin/gcc...not found
    Checking for program /opt/homebrew/sbin/gcc...not found
    Checking for program /usr/local/bin/gcc...not found
    Checking for program /System/Cryptexes/App/usr/bin/gcc...not found
    Checking for program /usr/bin/gcc...found
              Defined make macro "DYNAMICLINKER" to "gcc"
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -dynamiclib -undefined dynamic_lookup -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -fPIC /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
stdout: ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
            Valid C linker flag -dynamiclib -undefined dynamic_lookup
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
#include <stdio.h>
int foo(void) {printf("test");return 0;}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/libconftest.dylib  -dynamiclib -undefined dynamic_lookup  -fPIC /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
#include <dlfcn.h>
#include <stdio.h>

int main(void) {

void *handle = dlopen("/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/libconftest.dylib", 0);
int (*foo)(void) = (int (*)(void)) dlsym(handle, "foo");

if (!foo) {
  printf("Could not load symbol\n");
  return -1;
}
if ((*foo)()) {
  printf("Invalid return from foo()\n");
  return -1;
}
if (dlclose(handle)) {
  printf("Could not close library\n");
  return -1;
}

  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -fPIC /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
          Using dynamic linker gcc with flags ['-dynamiclib -undefined dynamic_lookup'] and library extension dylib
=============================================================================================
TESTING: checkPragma from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2013)
  Check for all available applicable languages whether they complain (including warnings!) about potentially unknown pragmas
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC -Wunknown-pragmas   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

                  Output from compiling with  -fPIC -Wunknown-pragmas 

Added C compiler flag -Wunknown-pragmas
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC -Wunknown-pragmas  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
#pragma GCC poison TEST

int main(void) {
  return 0;
}

Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wunknown-pragmas   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

                  Output from compiling with  -Wunknown-pragmas 

Added Cxx compiler flag -Wunknown-pragmas
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wunknown-pragmas  -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
#pragma GCC poison TEST

int main(void) {
  return 0;
}

=============================================================================================
TESTING: checkAtFileOption from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2743)
  Check if linker supports @file option
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  @/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/optfile -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -fPIC /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
            Valid C linker flag @/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/optfile
            Defined make macro "PCC_AT_FILE" to "1"
=============================================================================================
TESTING: output from config.setCompilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/setCompilers.py:2600)
  Output module data as defines and substitutions
            Substituting "CC" with "gcc"
            Substituting "CFLAGS" with " -fPIC"
            Defined make macro "CC_LINKER_SLFLAG" to "-Wl,-rpath,"
            Substituting "CPP" with "gcc -E"
            Substituting "CPPFLAGS" with ""
            Substituting "CXX" with "g++"
            Substituting "CXX_CXXFLAGS" with " -std=gnu++20"
            Substituting "CXXFLAGS" with ""
            Substituting "CXX_LINKER_SLFLAG" with "-Wl,-rpath,"
            Substituting "CXXPP" with "g++ -E"
            Substituting "CXXPPFLAGS" with ""
            Substituting "FC" with "gfortran-12"
            Substituting "FFLAGS" with ""
            Defined make macro "FC_LINKER_SLFLAG" to "-Wl,-rpath,"
            Substituting "LDFLAGS" with ""
            Substituting "FPP" with "gfortran-12 -E"
            Substituting "FPPFLAGS" with ""
            Substituting "LIBS" with ""
            Substituting "SHARED_LIBRARY_FLAG" with ""
    child config.setCompilers took 6.881836 seconds
=============================================================================================
TESTING: configureIndexSize from PETSc.options.indexTypes(/Users/jacksonbaglino/Petsc-3.20/config/PETSc/options/indexTypes.py:38)
  Determine the size of PETSc indices (32 or 64-bit), from -with-64-bit-indices
            Defined make macro "PETSC_INDEX_SIZE" to "32"
    child PETSc.options.indexTypes took 0.000509 seconds
=============================================================================================
TESTING: configureCompilerFlags from config.compilerFlags(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilerFlags.py:82)
  Get the default compiler flags
Executing: gcc --version
stdout:
Apple clang version 15.0.0 (clang-1500.3.9.4)
Target: arm64-apple-darwin23.4.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
getCompilerVersion: gcc Apple clang version 15.0.0 (clang-1500.3.9.4)
              Defined make macro "C_VERSION" to "Apple clang version 15.0.0 (clang-1500.3.9.4)"
                Defined make macro "MPICC_SHOW" to "Unavailable"
Executing: gcc --help | head -n 20 
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
stdout: error: write on a pipe with no reader
Executing: gcc --help
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
  -cl-ext=<value>         OpenCL only. Enable or disable OpenCL extensions/optional features. The argument is a comma-separated sequence of one or more extension names, each prefixed by '+' or '-'.
  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.
  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.
  -cl-fp32-correctly-rounded-divide-sqrt
                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.
  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.
  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.
  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.
  -cl-no-stdinc           OpenCL only. Disables all standard includes containing non-native compiler types and functions.
  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.
  -cl-single-precision-constant
                          OpenCL only. Treat double precision floating-point constant as single precision constant.
  -cl-std=<value>         OpenCL language standard to compile for.
  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.
  -cl-uniform-work-group-size
                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel
  -cl-unsafe-math-optimizations
                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.
  --config=<file>         Specify configuration file
  --cuda-compile-host-device
                          Compile CUDA code for both host and device (default). Has no effect on non-CUDA compilations.
  --cuda-device-only      Compile CUDA code for device only
  --cuda-feature=<value>  Manually specify the CUDA feature to use
  --cuda-host-only        Compile CUDA code for host only. Has no effect on non-CUDA compilations.
  --cuda-include-ptx=<value>
                          Include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --cuda-noopt-device-debug
                          Enable device-side debug info generation. Disables ptxas optimizations.
  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation
  --cuda-path=<value>     CUDA installation path
  -cuid=<value>           An ID for compilation unit, which should be the same for the same compilation unit but different for different compilation units. It is used to externalize device-side static variables for single source offloading languages CUDA and HIP so that they can be accessed by the host code of the same compilation unit.
  -cxx-isystem <directory>
                          Add directory to the C++ SYSTEM include search path
  -C                      Include comments in preprocessed output
  -c                      Only run preprocess, compile, and assemble steps
  -darwin-target-variant-triple <value>
                          Specify the darwin target variant triple
  -darwin-target-variant <value>
                          Generate code for an additional runtime variant of the deployment target
  -dD                     Print macro definitions in -E mode in addition to normal output
  -dependency-dot <value> Filename to write DOT-formatted header dependencies to
  -dependency-file <value>
                          Filename (or -) to write dependency output to
  -dI                     Print include directives in -E mode in addition to normal output
  -dM                     Print macro definitions in -E mode instead of normal output
  -dsym-dir <dir>         Directory to output dSYM's (if any) to
  -dump-depscan-tree=<value>
                          emit the CAS identifier for the tree instead of the full -cc1
  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)
  -emit-ast               Emit Clang AST files for source inputs
  -emit-interface-stubs   Generate Interface Stub Files.
  -emit-llvm              Use the LLVM representation for assembler and object files
  -emit-merged-ifs        Generate Interface Stub Files, emit merged text not binary.
  --emit-static-lib       Enable linker job to emit a static library.
  --end-no-unused-arguments
                          Start emitting warnings for unused driver arguments
  --extract-api-ignores=<value>
                          Comma separated list of files containing a new line separated list of API symbols to ignore when extracting API information.
  -extract-api            Extract API information
  -E                      Only run the preprocessor
  -faapcs-bitfield-load   Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).
  -faapcs-bitfield-width  Follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -faddrsig               Emit an address-significance table
  -falign-loops=<N>       N must be a power of two. Align loops to the boundary
  -faligned-allocation    Enable C++17 aligned allocation functions
  -fallow-editor-placeholders
                          Treat editor placeholders as valid source code
  -faltivec-src-compat=<value>
                          Source-level compatibility for Altivec vectors (for PowerPC targets). This includes results of vector comparison (scalar for 'xl', vector for 'gcc') as well as behavior when initializing with a scalar (splatting for 'xl', element zero only for 'gcc'). For 'mixed', the compatibility is as 'gcc' for 'vector bool/vector pixel' and as 'xl' for other types. Current default is 'mixed'.
  -fansi-escape-codes     Use ANSI escape codes for diagnostics
  -fapinotes-cache-path=<directory>
                          Does nothing; API notes are no longer cached separately from modules
  -fapinotes-modules      Enable module-based external API notes support
  -fapinotes-swift-version=<version>
                          Specify the Swift version to use when filtering API notes
  -fapinotes              Enable external API notes support
  -fapple-kext            Use Apple's kernel extensions ABI
  -fapple-link-rtlib      Force linking the clang builtins runtime library
  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling
  -fapplication-extension Restrict code to those available for App Extensions
  -fapprox-func           Allow certain math function calls to be replaced with an approximately equivalent calculation
  -fasync-exceptions      Enable EH Asynchronous exceptions
  -fbasic-block-sections=<value>
                          Place each function's basic blocks in unique sections (ELF Only)
  -fbinutils-version=<major.minor>
                          Produced object files can use all ELF features supported by this binutils version and newer. If -fno-integrated-as is specified, the generated assembly will consider GNU as support. 'none' means that all ELF features can be used, regardless of binutils support. Defaults to 2.26.
  -fblocks                Enable the 'blocks' language feature
  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler
  -fbranch-target-identification
                          Emit branch target identification instructions for indirect branch destinations
  -fbuild-session-file=<file>
                          Use the last modification time of <file> as the build session timestamp
  -fbuild-session-timestamp=<time since Epoch in seconds>
                          Time when the current build session started
  -fbuiltin-module-map    Load the clang builtins module map file.
  -fc++-abi=<value>       C++ ABI to use. This will override the target C++ ABI.
  -fcall-saved-x10        Make the x10 register call-saved (AArch64 only)
  -fcall-saved-x11        Make the x11 register call-saved (AArch64 only)
  -fcall-saved-x12        Make the x12 register call-saved (AArch64 only)
  -fcall-saved-x13        Make the x13 register call-saved (AArch64 only)
  -fcall-saved-x14        Make the x14 register call-saved (AArch64 only)
  -fcall-saved-x15        Make the x15 register call-saved (AArch64 only)
  -fcall-saved-x18        Make the x18 register call-saved (AArch64 only)
  -fcall-saved-x8         Make the x8 register call-saved (AArch64 only)
  -fcall-saved-x9         Make the x9 register call-saved (AArch64 only)
  -fcf-protection=<value> Instrument control-flow architecture protection
  -fcf-protection         Enable cf-protection in 'full' mode
  -fchar8_t               Enable C++ builtin type char8_t
  -fclang-abi-compat=<version>
                          Attempt to match the ABI of Clang <version>
  -fcolor-diagnostics     Enable colors in diagnostics
  -fcomment-block-commands=<arg>
                          Treat each comma separated argument in <arg> as a documentation comment block command
  -fcommon                Place uninitialized global variables in a common block
  -fcomplete-member-pointers
                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fconvergent-functions  Assume functions may be convergent
  -fcoro-aligned-allocation
                          Prefer aligned allocation for C++ Coroutines
  -fcoroutines-ts         Enable support for the C++ Coroutines TS
  -fcoverage-compilation-dir=<value>
                          The compilation directory to embed in the coverage mapping.
  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis
  -fcoverage-prefix-map=<value>
                          remap file source paths in coverage mapping
  -fcrash-diagnostics-dir=<dir>
                          Put crash-report files in <dir>
  -fcrash-diagnostics=<value>
                          Set level of crash diagnostic reporting, (option: off, compiler, all)
  -fcrash-diagnostics     Enable crash diagnostic reporting (default)
  -fcs-profile-generate=<directory>
                          Generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcs-profile-generate   Generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcuda-approx-transcendentals
                          Use approximate transcendental functions
  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces
  -fcxx-exceptions        Enable C++ exceptions
  -fcxx-modules           Enable modules for C++
  -fdata-sections         Place each data in its own section
  -fdebug-compilation-dir=<value>
                          The compilation directory to embed in the debug info
  -fdebug-default-version=<value>
                          Default DWARF version to use, if a -g option caused DWARF debug info to be produced
  -fdebug-info-for-profiling
                          Emit extra debug info to make sample profile more accurate
  -fdebug-macro           Emit macro debug information
  -fdebug-prefix-map=<value>
                          remap file source paths in debug info
  -fdebug-ranges-base-address
                          Use DWARF base address selection entries in .debug_ranges
  -fdebug-types-section   Place debug types in their own section (ELF Only)
  -fdeclspec              Allow __declspec as a keyword
  -fdelayed-template-parsing
                          Parse templated function definitions at the end of the translation unit
  -fdelete-null-pointer-checks
                          Treat usage of null pointers as undefined behavior (default)
  -fdepscan-daemon=<value>
                          Specify the path to the daemon to be used. Clang will use the daemon specified, rather than try to spawn its own based on parent processes.
  -fdepscan-include-tree  Set dep-scanner to produce the include tree
  -fdepscan-prefix-map-sdk=<new>
                          With -fdepscan, auto-detect the SDK path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map-toolchain=<new>
                          With -fdepscan, auto-detect the toolchain path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map=<old>=<new>
                          With -fdepscan, seamlessly filter the CAS filesystem to apply the given prefix, updating the command-line to match.
  -fdepscan-share-identifier <value>
                          Share depscan daemon for Clang invocations using the same string identifier.
  -fdepscan-share-parent=<value>
                          Share state based on the PID of the parent command if the name matches. See also -fdepscan-share-stop.
  -fdepscan-share-parent  Share state based on the PID of the parent command. See also -fdepscan-share-stop.
  -fdepscan-share-stop=<value>
                          Stop looking for the command named by -fdepscan-share if a process with the name of the provided argument is found first. Also blocks -fdepscan-share=parent if the parent has this name. E.g., -fdepscan -fdepscan-share=ninja -fdepscan-share-stop=cmake looks for 'ninja' and 'cmake' in the process tree; if 'ninja' is found first, state is shared based on ninja's PID; if 'cmake' is found first, state is not shared.
  -fdepscan-share=<value> If the argument is the name of a command in the process tree, share state based on its PID. E.g., -fdepscan -fdepscan-share=ninja will search for 'ninja' in the process tree and share state based on its PID if found. See also -fdepscan-share-stop.
  -fdepscan=<value>       Scan for dependencies ahead of compiling, generating a pruned CAS tree to send to -fcas-fs. Values are 'auto', 'daemon' (see -fdepscan-share and -fdepscan-share-parent), 'inline', or 'off' (default).
  -fdepscan               Turn on -fdepscan=auto.
  -fdiagnostics-absolute-paths
                          Print absolute paths in diagnostics
  -fdiagnostics-hotness-threshold=<value>
                          Prevent optimization remarks from being output if they do not have at least this profile count. Use 'auto' to apply the threshold from profile summary
  -fdiagnostics-misexpect-tolerance=<value>
                          Prevent misexpect diagnostics from being output if the profile counts are within N% of the expected. 
  -fdiagnostics-parseable-fixits
                          Print fix-its in machine parseable form
  -fdiagnostics-print-source-range-info
                          Print source range spans in numeric form
  -fdiagnostics-show-hotness
                          Enable profile hotness information in diagnostic line
  -fdiagnostics-show-note-include-stack
                          Display include stacks for diagnostic notes
  -fdiagnostics-show-option
                          Print option name with mappable diagnostics
  -fdiagnostics-show-template-tree
                          Print a template comparison tree for differing templates
  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)
  -fdirect-access-external-data
                          Don't use GOT indirection to reference external data symbols
  -fdiscard-value-names   Discard value names in LLVM IR
  -fdollars-in-identifiers
                          Allow '$' in identifiers
  -fdouble-square-bracket-attributes
                          Enable '[[]]' attributes in all C and C++ language modes
  -fdriver-only           Only run the driver.
  -fdwarf-exceptions      Use DWARF style exceptions
  -feliminate-unused-debug-types
                          Do not emit  debug info for defined but unused types
  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker
  -fembed-bitcode=<option>
                          Embed LLVM bitcode
  -fembed-bitcode         Embed LLVM IR bitcode as data
  -fembed-offload-object=<value>
                          Embed Offloading device-side binary into host object file as a section.
  -femit-all-decls        Emit all declarations, even if unused
  -femit-dwarf-unwind=<value>
                          When to emit DWARF unwind (EH frame) info
  -femulated-tls          Use emutls functions to access thread_local variables
  -fenable-matrix         Enable matrix data type and related builtin functions
  -fexceptions            Enable support for exception handling
  -fexperimental-library  Control whether unstable and experimental library features are enabled. This option enables various library features that are either experimental (also known as TSes), or have been but are not stable yet in the selected Standard Library implementation. It is not recommended to use this option in production code, since neither ABI nor API stability are guaranteed. This is intended to provide a preview of features that will ship in the future for experimentation purposes
  -fexperimental-new-constant-interpreter
                          Enable the experimental new constant interpreter
  -fexperimental-relative-c++-abi-vtables
                          Use the experimental C++ class ABI for classes with virtual tables
  -fexperimental-sanitize-metadata=<value>
                          Specify the type of metadata to emit for binary analysis sanitizers
  -fexperimental-strict-floating-point
                          Enables experimental strict floating point in LLVM.
  -fextend-arguments=<value>
                          Controls how scalar integer arguments are extended in calls to unprototyped and varargs functions
  -ffast-math             Allow aggressive, lossy floating-point optimizations
  -ffile-compilation-dir=<value>
                          The compilation directory to embed in the debug info and coverage mapping.
  -ffile-prefix-map=<value>
                          remap file source paths in debug info, predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -ffile-reproducible     Use the target's platform-specific path separator character when expanding the __FILE__ macro
  -ffine-grained-bitfield-accesses
                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.
  -ffinite-loops          Assume all loops are finite.
  -ffixed-a0              Reserve the a0 register (M68k only)
  -ffixed-a1              Reserve the a1 register (M68k only)
  -ffixed-a2              Reserve the a2 register (M68k only)
  -ffixed-a3              Reserve the a3 register (M68k only)
  -ffixed-a4              Reserve the a4 register (M68k only)
  -ffixed-a5              Reserve the a5 register (M68k only)
  -ffixed-a6              Reserve the a6 register (M68k only)
  -ffixed-d0              Reserve the d0 register (M68k only)
  -ffixed-d1              Reserve the d1 register (M68k only)
  -ffixed-d2              Reserve the d2 register (M68k only)
  -ffixed-d3              Reserve the d3 register (M68k only)
  -ffixed-d4              Reserve the d4 register (M68k only)
  -ffixed-d5              Reserve the d5 register (M68k only)
  -ffixed-d6              Reserve the d6 register (M68k only)
  -ffixed-d7              Reserve the d7 register (M68k only)
  -ffixed-point           Enable fixed point types
  -ffixed-r19             Reserve register r19 (Hexagon only)
  -ffixed-r9              Reserve the r9 register (ARM only)
  -ffixed-x10             Reserve the x10 register (AArch64/RISC-V only)
  -ffixed-x11             Reserve the x11 register (AArch64/RISC-V only)
  -ffixed-x12             Reserve the x12 register (AArch64/RISC-V only)
  -ffixed-x13             Reserve the x13 register (AArch64/RISC-V only)
  -ffixed-x14             Reserve the x14 register (AArch64/RISC-V only)
  -ffixed-x15             Reserve the x15 register (AArch64/RISC-V only)
  -ffixed-x16             Reserve the x16 register (AArch64/RISC-V only)
  -ffixed-x17             Reserve the x17 register (AArch64/RISC-V only)
  -ffixed-x18             Reserve the x18 register (AArch64/RISC-V only)
  -ffixed-x19             Reserve the x19 register (AArch64/RISC-V only)
  -ffixed-x1              Reserve the x1 register (AArch64/RISC-V only)
  -ffixed-x20             Reserve the x20 register (AArch64/RISC-V only)
  -ffixed-x21             Reserve the x21 register (AArch64/RISC-V only)
  -ffixed-x22             Reserve the x22 register (AArch64/RISC-V only)
  -ffixed-x23             Reserve the x23 register (AArch64/RISC-V only)
  -ffixed-x24             Reserve the x24 register (AArch64/RISC-V only)
  -ffixed-x25             Reserve the x25 register (AArch64/RISC-V only)
  -ffixed-x26             Reserve the x26 register (AArch64/RISC-V only)
  -ffixed-x27             Reserve the x27 register (AArch64/RISC-V only)
  -ffixed-x28             Reserve the x28 register (AArch64/RISC-V only)
  -ffixed-x29             Reserve the x29 register (AArch64/RISC-V only)
  -ffixed-x2              Reserve the x2 register (AArch64/RISC-V only)
  -ffixed-x30             Reserve the x30 register (AArch64/RISC-V only)
  -ffixed-x31             Reserve the x31 register (AArch64/RISC-V only)
  -ffixed-x3              Reserve the x3 register (AArch64/RISC-V only)
  -ffixed-x4              Reserve the x4 register (AArch64/RISC-V only)
  -ffixed-x5              Reserve the x5 register (AArch64/RISC-V only)
  -ffixed-x6              Reserve the x6 register (AArch64/RISC-V only)
  -ffixed-x7              Reserve the x7 register (AArch64/RISC-V only)
  -ffixed-x8              Reserve the x8 register (AArch64/RISC-V only)
  -ffixed-x9              Reserve the x9 register (AArch64/RISC-V only)
  -fforce-dwarf-frame     Always emit a debug frame section
  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization
  -fforce-enable-int128   Enable support for int128_t type
  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (fuses across statements disregarding pragmas) | on (only fuses in the same statement unless dictated by pragmas) | off (never fuses) | fast-honor-pragmas (fuses across statements unless diectated by pragmas). Default is 'fast' for CUDA, 'fast-honor-pragmas' for HIP, and 'on' otherwise.
  -ffp-eval-method=<value>
                          Specifies the evaluation method to use for floating-point arithmetic.
  -ffp-exception-behavior=<value>
                          Specifies the exception behavior of floating-point operations.
  -ffp-model=<value>      Controls the semantics of floating-point calculations.
  -ffreestanding          Assert that the compilation takes place in a freestanding environment
  -ffuchsia-api-level=<value>
                          Set Fuchsia API level
  -ffunction-sections     Place each function in its own section
  -fgeneric-block-helpers Use generic block helpers for copying/destroying blocks
  -fglobal-isel           Enables the global instruction selector
  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard
  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime
  -fgnu89-inline          Use the gnu89 inline semantics
  -fgnuc-version=<value>  Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)
  -fgpu-allow-device-init Allow device side init function in HIP (experimental)
  -fgpu-default-stream=<value>
                          Specify default stream. The default value is 'legacy'. (HIP only)
  -fgpu-defer-diag        Defer host/device related diagnostic messages for CUDA/HIP
  -fgpu-flush-denormals-to-zero
                          Flush denormal floating point values to zero in CUDA/HIP device mode.
  -fgpu-rdc               Generate relocatable device code, also known as separate compilation mode
  -fgpu-sanitize          Enable sanitizer for AMDGPU target
  -fhip-fp32-correctly-rounded-divide-sqrt
                          Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fhip-kernel-arg-name   Specify that kernel argument names are preserved (HIP only)
  -fhip-new-launch-api    Use new kernel launching API for HIP
  -fignore-exceptions     Enable support for ignoring exception handling constructs
  -fimplicit-module-maps  Implicitly search the file system for module map files.
  -fin-descriptor-block-flags
                          Emit in-descriptor block flags
  -finline-functions      Inline suitable functions
  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline
  -finline-max-stacksize=<value>
                          Suppress inlining of functions whose stack size exceeds the given value
  -finput-charset=<value> Specify the default character set for source files
  -finstrument-function-entry-bare
                          Instrument function entry only, after inlining, without arguments to the instrumentation call
  -finstrument-functions-after-inlining
                          Like -finstrument-functions, but insert the calls after inlining
  -finstrument-functions  Generate calls to instrument function entry and exit
  -fintegrated-as         Enable the integrated assembler
  -fintegrated-cc1        Run cc1 in-process
  -fintegrated-objemitter Use internal machine object code emitter.
  -fjmc                   Enable just-my-code debugging
  -fjump-tables           Use jump tables for lowering switches
  -fkeep-static-consts    Keep static const variables if unused
  -flax-vector-conversions=<value>
                          Enable implicit vector bit-casts
  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)
  -flto=auto              Enable LTO in 'full' mode
  -flto=jobserver         Enable LTO in 'full' mode
  -flto=<value>           Set LTO mode
  -flto                   Enable LTO in 'full' mode
  -fmacro-prefix-map=<value>
                          remap file source paths in predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -fmath-errno            Require math functions to indicate errors by setting errno
  -fmax-tokens=<value>    Max total number of preprocessed tokens for -Wmax-tokens.
  -fmax-type-align=<value>
                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment
  -fmemory-profile=<directory>
                          Enable heap memory profiling and dump results into <directory>
  -fmemory-profile        Enable heap memory profiling
  -fmerge-all-constants   Allow merging of constants
  -fmessage-length=<value>
                          Format message diagnostics so that they fit within N columns
  -fminimize-whitespace   Minimize whitespace when emitting preprocessor output
  -fmodule-file=[<name>=]<file>
                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.
  -fmodule-header=<kind>  Build a C++20 Header Unit from a header that should be found in the user (fmodule-header=user) or system (fmodule-header=system) search path.
  -fmodule-header         Build a C++20 Header Unit from a header.
  -fmodule-map-file=<file>
                          Load this module map file
  -fmodule-name=<name>    Specify the name of the module to build
  -fmodule-related-to-pch Mark module as related to a PCH
  -fmodules-cache-path=<directory>
                          Specify the module cache path
  -fmodules-decluse       Require declaration of modules used within a module
  -fmodules-disable-diagnostic-validation
                          Disable validation of the diagnostic options when loading the module
  -fmodules-ignore-macro=<value>
                          Ignore the definition of the given macro when building and loading modules
  -fmodules-prune-after=<seconds>
                          Specify the interval (in seconds) after which a module file will be considered unused
  -fmodules-prune-interval=<seconds>
                          Specify the interval (in seconds) between attempts to prune the module cache
  -fmodules-search-all    Search even non-imported modules to resolve references
  -fmodules-strict-decluse
                          Like -fmodules-decluse but requires all headers to be in modules
  -fmodules-ts            Enable support for the C++ Modules TS
  -fmodules-user-build-path <directory>
                          Specify the module user build path
  -fmodules-validate-input-files-content
                          Validate PCM input files based on content if mtime differs
  -fmodules-validate-once-per-build-session
                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session
  -fmodules-validate-system-headers
                          Validate the system headers that a module depends on when loading the module
  -fmodules               Enable the 'modules' language feature
  -fms-compatibility-version=<value>
                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fms-compatibility      Enable full Microsoft Visual C++ compatibility
  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler
  -fms-hotpatch           Ensure that all functions can be hotpatched at runtime
  -fms-runtime-lib=<value>
                          Select Windows run-time library
  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'
  -fnew-infallible        Enable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-aapcs-bitfield-width
                          Do not follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -fno-access-control     Disable C++ access control
  -fno-addrsig            Don't emit an address-significance table
  -fno-apinotes-modules   Disable module-based external API notes support
  -fno-apinotes           Disable external API notes support
  -fno-assume-sane-operator-new
                          Don't assume that C++'s global operator new can't alias any pointer
  -fno-autolink           Disable generation of linker directives for automatic library linking
  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function
  -fno-builtin            Disable implicit builtin knowledge of functions
  -fno-c++-static-destructors
                          Disable C++ static destructor registration
  -fno-char8_t            Disable C++ builtin type char8_t
  -fno-color-diagnostics  Disable colors in diagnostics
  -fno-common             Compile common globals like normal definitions
  -fno-complete-member-pointers
                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings
  -fno-constant-nsarray-literals
                          Disable creation of CodeFoundation-type constant initializer `NSArray`s from array literals
  -fno-constant-nsdictionary-literals
                          Disable creation of CodeFoundation-type constant initializer `NSDictionary`s from dictionary literals
  -fno-constant-nsnumber-literals
                          Disable creation of CodeFoundation-type constant initializer `NSNumber`s from number literals
  -fno-coverage-mapping   Disable code coverage analysis
  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash
  -fno-cuda-approx-transcendentals
                          Don't use approximate transcendental functions
  -fno-cxx-modules        Disable modules for C++
  -fno-debug-macro        Do not emit macro debug information
  -fno-declspec           Disallow __declspec as a keyword
  -fno-delayed-template-parsing
                          Disable delayed template parsing
  -fno-delete-null-pointer-checks
                          Do not treat usage of null pointers as undefined behavior
  -fno-depscan-share      Turn off -fdepscan-share and -fdepscan-share-parent.
  -fno-diagnostics-fixit-info
                          Do not include fixit information in diagnostics
  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'
  -fno-direct-access-external-data
                          Use GOT indirection to reference external data symbols
  -fno-discard-value-names
                          Do not discard value names in LLVM IR
  -fno-dollars-in-identifiers
                          Disallow '$' in identifiers
  -fno-double-square-bracket-attributes
                          Disable '[[]]' attributes in all C and C++ language modes
  -fno-elide-constructors Disable C++ copy constructor elision
  -fno-elide-type         Do not elide types when printing diagnostics
  -fno-eliminate-unused-debug-types
                          Emit  debug info for defined but unused types
  -fno-exceptions         Disable support for exception handling
  -fno-experimental-relative-c++-abi-vtables
                          Do not use the experimental C++ class ABI for classes with virtual tables
  -fno-experimental-sanitize-metadata=<value>
                          Disable emitting metadata for binary analysis sanitizers
  -fno-file-reproducible  Use the host's platform-specific path separator character when expanding the __FILE__ macro
  -fno-fine-grained-bitfield-accesses
                          Use large-integer access for consecutive bitfield runs.
  -fno-finite-loops       Do not assume that any loop is finite.
  -fno-fixed-point        Disable fixed point types
  -fno-force-enable-int128
                          Disable support for int128_t type
  -fno-generic-block-helpers
                          Don't use generic block helpers for copying/destroying blocks
  -fno-global-isel        Disables the global instruction selector
  -fno-gnu-inline-asm     Disable GNU style inline asm
  -fno-gpu-allow-device-init
                          Don't allow device side init function in HIP (experimental)
  -fno-gpu-defer-diag     Don't defer host/device related diagnostic messages for CUDA/HIP
  -fno-hip-fp32-correctly-rounded-divide-sqrt
                          Don't specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fno-hip-kernel-arg-name
                          Don't specify that kernel argument names are preserved (HIP only)
  -fno-hip-new-launch-api Don't use new kernel launching API for HIP
  -fno-in-descriptor-block-flags
                          Don't emit in-descriptor block flags
  -fno-integrated-as      Disable the integrated assembler
  -fno-integrated-cc1     Spawn a separate process for each cc1
  -fno-integrated-objemitter
                          Use external machine object code emitter.
  -fno-jump-tables        Do not use jump tables for lowering switches
  -fno-keep-static-consts Don't keep static const variables if unused
  -fno-knr-functions      Disable support for K&R C function declarations
  -fno-lto                Disable LTO mode (default)
  -fno-memory-profile     Disable heap memory profiling
  -fno-merge-all-constants
                          Disallow merging of constants
  -fno-modules-check-relocated<value>
                          Skip checks for relocated modules when loading PCM files
  -fno-new-infallible     Disable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-objc-infer-related-result-type
                          do not infer Objective-C related result type based on method family
  -fno-offload-lto        Disable LTO mode (default) for offload compilation
  -fno-openmp-extensions  Disable all Clang extensions for OpenMP directives and clauses
  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators
  -fno-optimize-sibling-calls
                          Disable tail call optimization, keeping the call stack accurate
  -fno-pch-codegen        Do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fno-pch-debuginfo      Do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fno-plt                Use GOT indirection instead of PLT to make external function calls (x86 only)
  -fno-preserve-as-comments
                          Do not preserve comments in inline assembly
  -fno-profile-generate   Disable generation of profile instrumentation.
  -fno-profile-instr-generate
                          Disable generation of profile instrumentation.
  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization
  -fno-pseudo-probe-for-profiling
                          Do not emit pseudo probes for sample profiling
  -fno-ptrauth-abi-version
                          Disable Pointer Authentication ABI versioning
  -fno-ptrauth-kernel-abi-version
                          Disable Pointer Authentication kernel ABI versioning
  -fno-register-global-dtors-with-atexit
                          Don't use atexit or __cxa_atexit to register global destructors
  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags
  -fno-rtti-data          Disable generation of RTTI data
  -fno-rtti               Disable generation of rtti information
  -fno-sanitize-address-globals-dead-stripping
                          Disable linker dead stripping of globals in AddressSanitizer
  -fno-sanitize-address-outline-instrumentation
                          Use default code inlining logic for the address sanitizer
  -fno-sanitize-address-poison-custom-array-cookie
                          Disable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fno-sanitize-address-use-after-scope
                          Disable use-after-scope detection in AddressSanitizer
  -fno-sanitize-address-use-odr-indicator
                          Disable ODR indicator globals
  -fno-sanitize-cfi-canonical-jump-tables
                          Do not make the jump table addresses canonical in the symbol table
  -fno-sanitize-cfi-cross-dso
                          Disable control flow integrity (CFI) checks for cross-DSO calls.
  -fno-sanitize-coverage=<value>
                          Disable features of coverage instrumentation for Sanitizers
  -fno-sanitize-hwaddress-experimental-aliasing
                          Disable aliasing mode in HWAddressSanitizer
  -fno-sanitize-ignorelist
                          Don't use ignorelist file for sanitizers
  -fno-sanitize-memory-param-retval
                          Disable detection of uninitialized parameters and return values
  -fno-sanitize-memory-track-origins
                          Disable origins tracking in MemorySanitizer
  -fno-sanitize-memory-use-after-dtor
                          Disable use-after-destroy detection in MemorySanitizer
  -fno-sanitize-recover=<value>
                          Disable recovery for specified sanitizers
  -fno-sanitize-stable-abi
                          Conventional ABI instrumentation for sanitizer runtime. Default: Conventional
  -fno-sanitize-stats     Disable sanitizer statistics gathering.
  -fno-sanitize-thread-atomics
                          Disable atomic operations instrumentation in ThreadSanitizer
  -fno-sanitize-thread-func-entry-exit
                          Disable function entry/exit instrumentation in ThreadSanitizer
  -fno-sanitize-thread-memory-access
                          Disable memory access instrumentation in ThreadSanitizer
  -fno-sanitize-trap=<value>
                          Disable trapping for specified sanitizers
  -fno-sanitize-trap      Disable trapping for all sanitizers
  -fno-short-wchar        Force wchar_t to be an unsigned int
  -fno-show-column        Do not include column number on diagnostics
  -fno-show-source-location
                          Do not include source location information with diagnostics
  -fno-signed-char        char is unsigned
  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros
  -fno-spell-checking     Disable spell-checking
  -fno-split-machine-functions
                          Disable late function splitting using profile information (x86 ELF)
  -fno-split-stack        Wouldn't use segmented stack
  -fno-stack-check        Disable stack checking
  -fno-stack-clash-protection
                          Disable stack clash protection
  -fno-stack-protector    Disable the use of stack protectors
  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary
  -fno-strict-float-cast-overflow
                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions
  -fno-strict-return      Don't treat control flow paths that fall off the end of a non-void function as unreachable
  -fno-sycl               Disables SYCL kernels compilation for device
  -fno-temp-file          Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes
  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe
  -fno-trap-function-returns
                          The trap function specified by -ftrap-function never returns
  -fno-trigraphs          Do not process trigraph sequences
  -fno-typed-cxx-new-delete
                          Disable use of typed variants of C++ new() and delete()
  -fno-typed-memory-operations-experimental
                          Disable Typed Memory Operations call site rewriting
  -fno-unique-section-names
                          Don't use unique names for text and data sections
  -fno-unroll-loops       Turn off loop unroller
  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors
  -fno-use-init-array     Use .ctors/.dtors instead of .init_array/.fini_array
  -fno-visibility-inlines-hidden-static-local-var
                          Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)
  -fno-xray-function-index
                          Omit function index section at the expense of single-function patching performance
  -fno-zero-initialized-in-bss
                          Don't place zero initialized data in BSS
  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc
  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers
  -fobjc-disable-direct-methods-for-testing
                          Ignore attribute objc_direct so that direct methods can be tested
  -fobjc-encode-cxx-class-template-spec
                          Fully encode c++ class template specialization
  -fobjc-exceptions       Enable Objective-C exceptions
  -fobjc-relative-method-lists
                          Enable relative method lists
  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version
  -fobjc-weak             Enable ARC-style weak references in Objective-C
  -foffload-lto=<value>   Set LTO mode for offload compilation
  -foffload-lto           Enable LTO in 'full' mode for offload compilation
  -fopenmp-extensions     Enable all Clang extensions for OpenMP directives and clauses
  -fopenmp-implicit-rpath Set rpath on OpenMP executables
  -fopenmp-offload-mandatory
                          Do not create a host fallback if offloading to the device fails.
  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.
  -fopenmp-target-debug   Enable debugging in the OpenMP offloading device RTL
  -fopenmp-targets=<value>
                          Specify comma-separated list of triples OpenMP offloading targets to be supported
  -fopenmp-version=<value>
                          Set OpenMP version (e.g. 45 for OpenMP 4.5, 50 for OpenMP 5.0). Default value is 50.
  -fopenmp                Parse OpenMP pragmas and generate parallel code.
  -foptimization-record-file=<file>
                          Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.
  -foptimization-record-passes=<regex>
                          Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)
  -forder-file-instrumentation
                          Generate instrumented code to collect order file into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fpack-struct=<value>   Specify the default maximum struct packing alignment
  -fpascal-strings        Recognize and construct Pascal-style string literals
  -fpass-plugin=<dsopath> Load pass plugin from a dynamic shared object file (only with new pass manager).
  -fpatchable-function-entry=<N,M>
                          Generate M NOPs before function entry and N-M NOPs after function entry
  -fpcc-struct-return     Override the default ABI to return all structs on the stack
  -fpch-codegen           Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fpch-debuginfo         Generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fpch-instantiate-templates
                          Instantiate templates already while building a PCH
  -fpch-validate-input-files-content
                          Validate PCH input files based on content if mtime differs
  -fplugin-arg-<name>-<arg>
                          Pass <arg> to plugin <name>
  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)
  -fprebuilt-implicit-modules
                          Look up implicit modules in the prebuilt module path
  -fprebuilt-module-path=<directory>
                          Specify the prebuilt module path
  -fproc-stat-report=<value>
                          Save subprocess statistics to the given file
  -fproc-stat-report<value>
                          Print subprocess statistics
  -fprofile-exclude-files=<value>
                          Instrument only functions from files where names don't match all the regexes separated by a semi-colon
  -fprofile-filter-files=<value>
                          Instrument only functions from files where names match any regex separated by a semi-colon
  -fprofile-function-groups=<N>
                          Partition functions into N groups and select only functions in group i to be instrumented using -fprofile-selected-function-group
  -fprofile-generate=<directory>
                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate=<file>
                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate
                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fprofile-instr-use=<value>
                          Use instrumentation data for profile-guided optimization
  -fprofile-list=<value>  Filename defining the list of functions/files to instrument
  -fprofile-remapping-file=<file>
                          Use the remappings described in <file> to match the profile data against names in the program
  -fprofile-sample-accurate
                          Specifies that the sample profile is accurate
  -fprofile-sample-use=<value>
                          Enable sample-based profile guided optimizations
  -fprofile-selected-function-group=<i>
                          Partition functions into N groups using -fprofile-function-groups and select only functions in group i to be instrumented. The valid range is 0 to N-1 inclusive
  -fprofile-update=<method>
                          Set update method of profile counters
  -fprofile-use=<pathname>
                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.
  -fprotect-parens        Determines whether the optimizer honors parentheses when floating-point expressions are evaluated
  -fpseudo-probe-for-profiling
                          Emit pseudo probes for sample profiling
  -fptrauth-abi-version=<value>
                          Pointer Authentication ABI version
  -fptrauth-auth-traps    Enable traps on authentication failures
  -fptrauth-block-descriptor-pointers
                          enable signing block descriptors
  -fptrauth-calls         Enable signing and authentication of all indirect calls
  -fptrauth-function-pointer-type-discrimination
                          Enabling type discrimination on C function pointers
  -fptrauth-indirect-gotos
                          Enable signing and authentication of indirect goto targets
  -fptrauth-intrinsics    Enable pointer-authentication intrinsics
  -fptrauth-kernel-abi-version
                          Enable Pointer Authentication kernel ABI version
  -fptrauth-objc-class-ro Enable signing and authentication for ObjC class_ro pointers
  -fptrauth-objc-interface-sel
                          Enable signing and authentication of Objective-C object's 'SEL' fields
  -fptrauth-objc-isa-masking
                          pre- and post-authentication masking mode of objective-c isa pointers
  -fptrauth-objc-isa-mode=<value>
                          Authentication mode for ObjC isa field. Full auth if unspecified
  -fptrauth-objc-isa      Enable signing and authentication of Objective-C object's 'isa' field
  -fptrauth-returns       Enable signing and authentication of return addresses
  -fptrauth-soft          Enable software lowering of pointer authentication
  -fptrauth-vtable-pointer-address-discrimination
                          Enable address discrimination of vtable pointers
  -fptrauth-vtable-pointer-type-discrimination
                          Enable type discrimination of vtable pointers
  -frandomize-layout-seed-file=<file>
                          File holding the seed used by the randomize structure layout feature
  -frandomize-layout-seed=<seed>
                          The seed used by the randomize structure layout feature
  -freciprocal-math       Allow division operations to be reassociated
  -freg-struct-return     Override the default ABI to return small structs in registers
  -fregister-global-dtors-with-atexit
                          Use atexit or __cxa_atexit to register global destructors
  -frelaxed-template-template-args
                          Enable C++17 relaxed template template argument matching
  -freroll-loops          Turn on loop reroller
  -fropi                  Generate read-only position independent code (ARM only)
  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags
  -frwpi                  Generate read-write position independent code (ARM only)
  -fsafe-buffer-usage-suggestions
                          Display suggestions to update code associated with -Wunsafe-buffer-usage warnings
  -fsanitize-address-destructor=<value>
                          Set destructor type used in ASan instrumentation
  -fsanitize-address-field-padding=<value>
                          Level of field padding for AddressSanitizer
  -fsanitize-address-globals-dead-stripping
                          Enable linker dead stripping of globals in AddressSanitizer
  -fsanitize-address-outline-instrumentation
                          Always generate function calls for address sanitizer instrumentation
  -fsanitize-address-poison-custom-array-cookie
                          Enable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fsanitize-address-use-after-return=<mode>
                          Select the mode of detecting stack use-after-return in AddressSanitizer
  -fsanitize-address-use-after-scope
                          Enable use-after-scope detection in AddressSanitizer
  -fsanitize-address-use-odr-indicator
                          Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size
  -fsanitize-blacklist=<value>
                          Alias for -fsanitize-ignorelist=
  -fsanitize-cfi-canonical-jump-tables
                          Make the jump table addresses canonical in the symbol table
  -fsanitize-cfi-cross-dso
                          Enable control flow integrity (CFI) checks for cross-DSO calls.
  -fsanitize-cfi-icall-generalize-pointers
                          Generalize pointers in CFI indirect call type signature checks
  -fsanitize-coverage-allowlist=<value>
                          Restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones
  -fsanitize-coverage-ignorelist=<value>
                          Disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones
  -fsanitize-coverage=<value>
                          Specify the type of coverage instrumentation for Sanitizers
  -fsanitize-hwaddress-abi=<value>
                          Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.
  -fsanitize-hwaddress-experimental-aliasing
                          Enable aliasing mode in HWAddressSanitizer
  -fsanitize-ignorelist=<value>
                          Path to ignorelist file for sanitizers
  -fsanitize-memory-param-retval
                          Enable detection of uninitialized parameters and return values
  -fsanitize-memory-track-origins=<value>
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-track-origins
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-use-after-dtor
                          Enable use-after-destroy detection in MemorySanitizer
  -fsanitize-memtag-mode=<value>
                          Set default MTE mode to 'sync' (default) or 'async'
  -fsanitize-recover=<value>
                          Enable recovery for specified sanitizers
  -fsanitize-stable-abi   Stable  ABI instrumentation for sanitizer runtime. Default: Conventional
  -fsanitize-stats        Enable sanitizer statistics gathering.
  -fsanitize-system-blacklist=<value>
                          Alias for -fsanitize-system-ignorelist=
  -fsanitize-system-ignorelist=<value>
                          Path to system ignorelist file for sanitizers
  -fsanitize-thread-atomics
                          Enable atomic operations instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-func-entry-exit
                          Enable function entry/exit instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-memory-access
                          Enable memory access instrumentation in ThreadSanitizer (default)
  -fsanitize-trap=<value> Enable trapping for specified sanitizers
  -fsanitize-trap         Enable trapping for all sanitizers
  -fsanitize-undefined-strip-path-components=<number>
                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.
  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks
  -fsave-optimization-record=<format>
                          Generate an optimization record file in a specific format
  -fsave-optimization-record
                          Generate a YAML optimization record file
  -fseh-exceptions        Use SEH style exceptions
  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values
  -fshort-wchar           Force wchar_t to be a short unsigned int
  -fshow-overloads=<value>
                          Which overload candidates to show when overload resolution fails. Defaults to 'all'
  -fshow-skipped-includes Show skipped includes in -H output.
  -fsigned-char           char is signed
  -fsized-deallocation    Enable C++14 sized global deallocation functions
  -fsjlj-exceptions       Use SjLj style exceptions
  -fslp-vectorize         Enable the superword-level parallelism vectorization passes
  -fsmall-block-descriptors
                          Enable small block descriptors
  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF
  -fsplit-lto-unit        Enables splitting of the LTO unit
  -fsplit-machine-functions
                          Enable late function splitting using profile information (x86 ELF)
  -fsplit-stack           Use segmented stack
  -fstack-check           Enable stack checking
  -fstack-clash-protection
                          Enable stack clash protection
  -fstack-protector-all   Enable stack protectors for all functions
  -fstack-protector-strong
                          Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable
  -fstack-protector       Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca , which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable. A function with a stack protector has a guard value added to the stack frame that is checked on function exit. The guard value must be positioned in the stack frame such that a buffer overflow from a vulnerable variable will overwrite the guard value before overwriting the function's return address. The reference stack guard value is stored in a global variable.
  -fstack-size-section    Emit section containing metadata on function stack sizes
  -fstack-usage           Emit .su file containing information on function stack sizes
  -fstandalone-debug      Emit full debug info for all types used by the program
  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range
  -fstrict-flex-arrays=<n>
                          Enable optimizations based on the strict definition of flexible arrays
  -fstrict-float-cast-overflow
                          Assume that overflowing float-to-int casts are undefined (default)
  -fstrict-vtable-pointers
                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects
  -fsuppress-conflicting-types
                          Ignore errors from conflicting types in function declarations
  -fswift-async-fp=<option>
                          Control emission of Swift async extended frame info
  -fsycl                  Enables SYCL kernels compilation for device
  -fsyntax-only           Run the preprocessor, parser and semantic analysis stages
  -fsystem-module         Build this module as a system module. Only used with -emit-module
  -ftarget-variant-availability-checks
                          Enable availability checks for the target variant platform
  -fthin-link-bitcode=<value>
                          Write minimized bitcode to <file> for the ThinLTO thin link only
  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index
  -ftime-report=<value>   (For new pass manager) 'per-pass': one report for each pass; 'per-pass-run': one report for each pass invocation
  -ftime-trace-granularity=<value>
                          Minimum time granularity (in microseconds) traced by time profiler
  -ftime-trace=<value>    Similar to -ftime-trace. Specify the JSON file or a directory which will contain the JSON file
  -ftime-trace            Turn on time profiler. Generates JSON file based on output filename.
  -ftrap-function-returns The trap function specified by -ftrap-function may return normally
  -ftrap-function=<value> Issue call to specified function rather than a trap instruction
  -ftrapv-handler=<function name>
                          Specify the function to be called on overflow
  -ftrapv                 Trap on integer overflow
  -ftrigraphs             Process trigraph sequences
  -ftrivial-auto-var-init-skip-cpp-obj
                          do not auto-initialize objects initialized by a C++ constructor
  -ftrivial-auto-var-init-skip-non-pod
                          do not auto-initialize non-POD objects
  -ftrivial-auto-var-init-skip-non-ptr-array
                          do not auto-initialize arrays other than arrays of pointers
  -ftrivial-auto-var-init-skip-stl
                          do not auto-initialize variables in STL namespace
  -ftrivial-auto-var-init-stop-after=<value>
                          Stop initializing trivial automatic stack variables after the specified number of instances
  -ftrivial-auto-var-init=<value>
                          Initialize trivial automatic stack variables. Defaults to 'uninitialized'
  -ftrivial-auto-var-zero-init-max-size=<value>
                          Zero initialize only first N bytes of each stack variable; 0 value turns off the limit.
  -ftyped-cxx-new-delete  Enable use of typed variants of C++ new() and delete()
  -ftyped-memory-operations-experimental
                          Enable Typed Memory Operations call site rewriting
  -funique-basic-block-section-names
                          Use unique names for basic block sections (ELF Only)
  -funique-internal-linkage-names
                          Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path
  -funroll-loops          Turn on loop unroller
  -fuse-cuid=<value>      Method to generate ID's for compilation units for single source offloading languages CUDA and HIP: 'hash' (ID's generated by hashing file path and command line options) | 'random' (ID's generated as random numbers) | 'none' (disabled). Default is 'hash'. This option will be overridden by option '-cuid=[ID]' if it is specified.
  -fuse-line-directives   Use #line in preprocessed output
  -fvalidate-ast-input-files-content
                          Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical
  -fveclib=<value>        Use the given vector functions library
  -fvectorize             Enable the loop vectorization passes
  -fverbose-asm           Generate verbose assembly output
  -fvirtual-function-elimination
                          Enables dead virtual function elimination optimization. Requires -flto=full
  -fvisibility-dllexport=<value>
                          The visibility for dllexport definitions [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-dllimport=<value>
                          The visibility for dllimport external declarations [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-nodllstorageclass=<value>
                          The visibility for external declarations without an explicit DLL dllstorageclass [-fvisibility-from-dllstorageclass]
  -fvisibility-from-dllstorageclass
                          Set the visibility of symbols in the generated code from their DLL storage class
  -fvisibility-global-new-delete-hidden
                          Give global C++ operator new and delete declarations hidden visibility
  -fvisibility-inlines-hidden-static-local-var
                          When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default
  -fvisibility-inlines-hidden
                          Give inline C++ member functions hidden visibility by default
  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default
  -fvisibility-nodllstorageclass=<value>
                          The visibility for definitions without an explicit DLL export class [-fvisibility-from-dllstorageclass]
  -fvisibility=<value>    Set the default symbol visibility for all global definitions
  -fwasm-exceptions       Use WebAssembly style exceptions
  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto
  -fwrapv                 Treat signed integer overflow as two's complement
  -fwritable-strings      Store string literals as writable data
  -fxl-pragma-pack        Enable IBM XL #pragma pack handling
  -fxray-always-emit-customevents
                          Always emit __xray_customevent(...) calls even if the containing function is not always instrumented
  -fxray-always-emit-typedevents
                          Always emit __xray_typedevent(...) calls even if the containing function is not always instrumented
  -fxray-always-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.
  -fxray-attr-list=<value>
                          Filename defining the list of functions/types for imbuing XRay attributes.
  -fxray-function-groups=<value>
                          Only instrument 1 of N groups
  -fxray-ignore-loops     Don't instrument functions with loops unless they also meet the minimum function size
  -fxray-instruction-threshold=<value>
                          Sets the minimum function size to instrument with XRay
  -fxray-instrumentation-bundle=<value>
                          Select which XRay instrumentation points to emit. Options: all, none, function-entry, function-exit, function, custom. Default is 'all'.  'function' includes both 'function-entry' and 'function-exit'.
  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit
  -fxray-link-deps        Tells clang to add the link dependencies for XRay.
  -fxray-modes=<value>    List of modes to link in by default into XRay instrumented binaries.
  -fxray-never-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.
  -fxray-selected-function-group=<value>
                          When using -fxray-function-groups, select which group of functions to instrument. Valid range is 0 to fxray-function-groups - 1
  -fzero-call-used-regs=<value>
                          Clear call-used registers upon function return (AArch64/x86 only)
  -fzvector               Enable System z vector language extension
  -F <value>              Add directory to framework include search path
  --gcc-install-dir=<value>
                          Use GCC installation in the specified directory. The directory ends with path components like 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Note: executables (e.g. ld) used by the compiler are not overridden by the selected GCC installation
  --gcc-toolchain=<value> Specify a directory where Clang can find 'include' and 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Clang will use the GCC installation with the largest version
  -gcodeview-ghash        Emit type record hashes in a .debug$H section
  -gcodeview              Generate CodeView debug information
  -gdwarf-2               Generate source-level debug information with dwarf version 2
  -gdwarf-3               Generate source-level debug information with dwarf version 3
  -gdwarf-4               Generate source-level debug information with dwarf version 4
  -gdwarf-5               Generate source-level debug information with dwarf version 5
  -gdwarf32               Enables DWARF32 format for ELF binaries, if debug information emission is enabled.
  -gdwarf64               Enables DWARF64 format for ELF binaries, if debug information emission is enabled.
  -gdwarf                 Generate source-level debug information with the default dwarf version
  -gembed-source          Embed source text in DWARF debug sections
  -gen-reproducer=<value> Emit reproducer on (option: off, crash (default), error, always)
  -gline-directives-only  Emit debug line info directives only
  -gline-tables-only      Emit debug line number tables only
  -gmodules               Generate debug info with external references to clang modules or precompiled headers
  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections
  -gno-inline-line-tables Don't emit inline line tables.
  --gpu-bundle-output     Bundle output files of HIP device compilation
  --gpu-instrument-lib=<value>
                          Instrument device library for HIP, which is a LLVM bitcode containing __cyg_profile_func_enter and __cyg_profile_func_exit
  --gpu-max-threads-per-block=<value>
                          Default max threads per block for kernel launch bounds for HIP
  -greproducible          Tune debug info to be reproducible.
  -gsplit-dwarf=<value>   Set DWARF fission mode
  -gz=<value>             DWARF debug sections compression type
  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)
  -g                      Generate source-level debug information
  --help-hidden           Display help for hidden options
  -help                   Display available options
  --hip-device-lib=<value>
                          HIP device library
  --hip-link              Link clang-offload-bundler bundles for HIP
  --hip-path=<value>      HIP runtime installation path, used for finding HIP version and adding HIP include path.
  --hip-version=<value>   HIP version in the format of major.minor.patch
  --hipspv-pass-plugin=<dsopath>
                          path to a pass plugin for HIP to SPIR-V passes.
  -H                      Show header includes and nesting depth
  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path
  -iapinotes-modules <directory>
                          Add directory to the API notes search path referenced by module name
  -iapinotes-path <file>  Include API notes file
  -ibuiltininc            Enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it
  -idirafter <value>      Add directory to AFTER include search path
  -iframeworkwithsysroot <directory>
                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot
  -iframework <value>     Add directory to SYSTEM framework search path
  -imacros <file>         Include macros from file before parsing
  -include-pch <file>     Include precompiled header file
  -include <file>         Include file before parsing
  -index-header-map       Make the next included directory (-I or -F) an indexer header map
  -index-ignore-macros    Ignore macros during indexing
  -index-ignore-pcms      Ignore symbols from imported pcm modules
  -index-ignore-system-symbols
                          Ignore symbols from system headers
  -index-record-codegen-name
                          Record the codegen name for symbols
  -index-store-path <value>
                          Enable indexing with the specified data store path
  -index-unit-output-path <path>
                          Use <path> as the output path for this compilation unit in the index unit file
  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix
  -iquote <directory>     Add directory to QUOTE include search path
  -isysroot <dir>         Set the system root directory (usually /)
  -isystem-after <directory>
                          Add directory to end of the SYSTEM include search path
  -isystem <directory>    Add directory to SYSTEM include search path
  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system
  -ivfsstatcache <value>  Use the stat data cached in file instead of doing filesystem syscalls. See clang-stat-cache utility.
  -iwithprefixbefore <dir>
                          Set directory to include search path with prefix
  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix
  -iwithsysroot <directory>
                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot
  -I <dir>                Add directory to the end of the list of include search paths
  --libomptarget-amdgcn-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-amdgpu-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-nvptx-bc-path=<value>
                          Path to libomptarget-nvptx bitcode library
  -L <dir>                Add directory to library search path
  -mabi=quadword-atomics  Enable quadword atomics ABI on AIX (AIX PPC64 only). Uses lqarx/stqcx. instructions.
  -mabi=vec-default       Enable the default Altivec ABI on AIX (AIX only). Uses only volatile vector registers.
  -mabi=vec-extabi        Enable the extended Altivec ABI on AIX (AIX only). Uses volatile and nonvolatile vector registers
  -mabicalls              Enable SVR4-style position-independent code (Mips only)
  -maix-struct-return     Return all structs in memory (PPC32 only)
  -malign-branch-boundary=<value>
                          Specify the boundary's size to align branches
  -malign-branch=<value>  Specify types of branches to align
  -malign-double          Align doubles to two words in structs (x86 only)
  -mamdgpu-ieee           Sets the IEEE bit in the expected default floating point  mode register. Floating point opcodes that support exception flag gathering quiet and propagate signaling NaN inputs per IEEE 754-2008. This option changes the ABI. (AMDGPU only)
  -mbackchain             Link stack frames through backchain on System Z
  -mbranch-protection=<value>
                          Enforce targets of indirect branches and function returns
  -mbranches-within-32B-boundaries
                          Align selected branches (fused, jcc, jmp) within 32-byte boundary
  -mcmodel=medany         Equivalent to -mcmodel=medium, compatible with RISC-V gcc.
  -mcmodel=medlow         Equivalent to -mcmodel=small, compatible with RISC-V gcc.
  -mcmse                  Allow use of CMSE (Armv8-M Security Extensions)
  -mcode-object-v3        Legacy option to specify code object ABI V3 (AMDGPU only)
  -mcode-object-version=<value>
                          Specify code object ABI version. Defaults to 4. (AMDGPU only)
  -mcrc                   Allow use of CRC instructions (ARM/Mips only)
  -mcumode                Specify CU wavefront execution mode (AMDGPU only)
  -mdefault-visibility-export-mapping=<value>
                          Mapping between default visibility and export
  -mdouble=<n             Force double to be <n> bits
  -MD                     Write a depfile containing user and system headers
  -meabi <value>          Set EABI type. Default depends on triple)
  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)
  -menable-experimental-extensions
                          Enable use of experimental RISC-V extensions.
  -menable-unsafe-fp-math Allow unsafe floating-point math optimizations which may decrease precision
  -mexec-model=<value>    Execution model (WebAssembly only)
  -mexecute-only          Disallow generation of data access to code sections (ARM only)
  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mfentry                Insert calls to fentry at function entry (x86/SystemZ only)
  -mfix-cmse-cve-2021-35465
                          Work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mfix-cortex-a57-aes-1742098
                          Work around Cortex-A57 Erratum 1742098 (ARM only)
  -mfix-cortex-a72-aes-1655431
                          Work around Cortex-A72 Erratum 1655431 (ARM only)
  -mfp32                  Use 32-bit floating point registers (MIPS only)
  -mfp64                  Use 64-bit floating point registers (MIPS only)
  -mframe-chain=<value>   Select the frame chain model used to emit frame records (Arm only).
  -mfunction-return=<value>
                          Replace returns with jumps to ``__x86_return_thunk`` (x86 only, error otherwise)
  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>
  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64/x86 only)
  -mglobal-merge          Enable merging of globals
  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mguard=<value>         Enable or disable Control Flow Guard checks and guard tables emission
  -MG                     Add missing headers to depfile
  -mharden-sls=<value>    Select straight-line speculation hardening scope (ARM/AArch64/X86 only). <arg> must be: all, none, retbr(ARM/AArch64), blr(ARM/AArch64), comdat(ARM/AArch64), nocomdat(ARM/AArch64), return(X86), indirect-jmp(X86)
  -mhvx-ieee-fp           Enable Hexagon HVX IEEE floating-point
  -mhvx-length=<value>    Set Hexagon Vector Length
  -mhvx-qfloat            Enable Hexagon HVX QFloat instructions
  -mhvx=<value>           Enable Hexagon Vector eXtensions
  -mhvx                   Enable Hexagon Vector eXtensions
  -miamcu                 Use Intel MCU ABI
  -mibt-seal              Optimize fcf-protection=branch/full (requires LTO).
  -mignore-xcoff-visibility
                          Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspecified' visibility in XCOFF object file
  --migrate               Run the migrator
  -mincremental-linker-compatible
                          (integrated-as) Emit an object file which can be used with an incremental linker
  -mindirect-branch-cs-prefix
                          Add cs prefix to call and jmp to indirect thunk
  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation
  -mios-version-min=<value>
                          Set iOS deployment target
  -MJ <value>             Write a compilation database entry per input
  -mllvm <value>          Additional arguments to forward to LLVM's option processing
  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)
  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.
  -mlong-double-128       Force long double to be 128 bits
  -mlong-double-64        Force long double to be 64 bits
  -mlong-double-80        Force long double to be 80 bits, padded to 128 bits for storage
  -mlvi-cfi               Enable only control-flow mitigations for Load Value Injection (LVI)
  -mlvi-hardening         Enable all mitigations for Load Value Injection (LVI)
  -mmacos-version-min=<value>
                          Set macOS deployment target
  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.
  -mmark-bti-property     Add .note.gnu.property with BTI to assembly files (AArch64 only)
  -MMD                    Write a depfile containing user headers
  -mmemops                Enable generation of memop instructions
  -mmlir <value>          Additional arguments to forward to MLIR's option processing
  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard
  -mmsa                   Enable MSA ASE (MIPS only)
  -mmt                    Enable MT ASE (MIPS only)
  -MM                     Like -MMD, but also implies -E and writes to stdout by default
  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)
  -mno-bti-at-return-twice
                          Do not add a BTI instruction after a setjmp or other return-twice construct (Arm/AArch64 only)
  -mno-code-object-v3     Legacy option to specify code object ABI V2 (AMDGPU only)
  -mno-crc                Disallow use of CRC instructions (Mips only)
  -mno-cumode             Specify WGP wavefront execution mode (AMDGPU only)
  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)
  -mno-execute-only       Allow generation of data access to code sections (ARM only)
  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mno-fix-cmse-cve-2021-35465
                          Don't work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mno-fix-cortex-a53-835769
                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mno-fix-cortex-a57-aes-1742098
                          Don't work around Cortex-A57 Erratum 1742098 (ARM only)
  -mno-fix-cortex-a72-aes-1655431
                          Don't work around Cortex-A72 Erratum 1655431 (ARM only)
  -mno-global-merge       Disable merging of globals
  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mno-hvx-ieee-fp        Disable Hexagon HVX IEEE floating-point
  -mno-hvx-qfloat         Disable Hexagon HVX QFloat instructions
  -mno-hvx                Disable Hexagon Vector eXtensions
  -mno-implicit-float     Don't generate implicit floating point instructions
  -mno-implicit-sme       Don't generate implicit SME instructions or mode switches
  -mno-incremental-linker-compatible
                          (integrated-as) Emit an object file which cannot be used with an incremental linker
  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)
  -mno-long-calls         Restore the default behaviour of not generating long calls
  -mno-lvi-cfi            Disable control-flow mitigations for Load Value Injection (LVI)
  -mno-lvi-hardening      Disable mitigations for Load Value Injection (LVI)
  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.
  -mno-memops             Disable generation of memop instructions
  -mno-movt               Disallow use of movt/movw pairs (ARM only)
  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard
  -mno-msa                Disable MSA ASE (MIPS only)
  -mno-mt                 Disable MT ASE (MIPS only)
  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.
  -mno-nvj                Disable generation of new-value jumps
  -mno-nvs                Disable generation of new-value stores
  -mno-outline-atomics    Don't generate local calls to out-of-line atomic operations
  -mno-outline            Disable function outlining (AArch64 only)
  -mno-packets            Disable generation of instruction packets
  -mno-relax              Disable linker relaxation
  -mno-restrict-it        Allow generation of complex IT blocks.
  -mno-save-restore       Disable using library calls for save and restore
  -mno-seses              Disable speculative execution side effect suppression (SESES)
  -mno-stack-arg-probe    Disable stack probes which are enabled by default
  -mno-tgsplit            Disable threadgroup split execution mode (AMDGPU only)
  -mno-tls-direct-seg-refs
                          Disable direct TLS access through segment registers
  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)
  -mno-wavefrontsize64    Specify wavefront size 32 mode (AMDGPU only)
  -mnocrc                 Disallow use of CRC instructions (ARM only)
  -mnop-mcount            Generate mcount/__fentry__ calls as nops. To activate they need to be patched in.
  -mnvj                   Enable generation of new-value jumps
  -mnvs                   Enable generation of new-value stores
  -module-dependency-dir <value>
                          Directory to dump module dependencies to
  -module-file-info       Provide information about a particular module file
  -momit-leaf-frame-pointer
                          Omit frame pointer setup for leaf functions
  -moutline-atomics       Generate local calls to out-of-line atomic operations
  -moutline               Enable function outlining (AArch64 only)
  -mpacked-stack          Use packed stack layout (SystemZ only).
  -mpackets               Enable generation of instruction packets
  -mpad-max-prefix-size=<value>
                          Specify maximum number of prefixes to use for padding
  -mprefer-vector-width=<value>
                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.
  -MP                     Create phony target for each dependency (other than main file)
  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility
  -MQ <value>             Specify name of main file output to quote in depfile
  -mrecord-mcount         Generate a __mcount_loc section entry for each __fentry__ call.
  -mrelax-all             (integrated-as) Relax all machine instructions
  -mrelax                 Enable linker relaxation
  -mrestrict-it           Disallow generation of complex IT blocks.
  -mrtd                   Make StdCall calling convention the default
  -msave-restore          Enable using library calls for save and restore
  -mseses                 Enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations
  -msign-return-address=<value>
                          Select return address signing scope
  -mskip-rax-setup        Skip setting up RAX register when passing variable arguments (x86 only)
  -msmall-data-limit=<value>
                          Put global and static data smaller than the limit into a special section
  -msoft-float            Use software floating point
  -mstack-alignment=<value>
                          Set the stack alignment
  -mstack-arg-probe       Enable stack probes
  -mstack-probe-size=<value>
                          Set the stack probe size
  -mstack-protector-guard-offset=<value>
                          Use the given offset for addressing the stack-protector guard
  -mstack-protector-guard-reg=<value>
                          Use the given reg for addressing the stack-protector guard
  -mstack-protector-guard-symbol=<value>
                          Use the given symbol for addressing the stack-protector guard
  -mstack-protector-guard=<value>
                          Use the given guard (global, tls) for addressing the stack-protector guard
  -mstackrealign          Force realign the stack at entry to every function
  -msve-vector-bits=<value>
                          Specify the size in bits of an SVE vector register. Defaults to the vector length agnostic value of "scalable". (AArch64 only)
  -msvr4-struct-return    Return small structs in registers (PPC32 only)
  -mtargetos=<value>      Set the deployment target to be the specified OS and OS version
  -mtgsplit               Enable threadgroup split execution mode (AMDGPU only)
  -mthread-model <value>  The thread model to use. Defaults to 'posix')
  -mtls-direct-seg-refs   Enable direct TLS access through segment registers (default)
  -mtls-size=<value>      Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)
  -mtp=<value>            Thread pointer access method (AArch32/AArch64 only)
  -mtune=<value>          Only supported on AArch64, PowerPC, RISC-V, SystemZ, and X86
  -MT <value>             Specify name of main file output in depfile
  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)
  -munsafe-fp-atomics     Enable unsafe floating point atomic instructions (AMDGPU only)
  -mvscale-max=<value>    Specify the vscale maximum. Defaults to the vector length agnostic value of "0". (AArch64 only)
  -mvscale-min=<value>    Specify the vscale minimum. Defaults to "1". (AArch64 only)
  -MV                     Use NMake/Jom format for the depfile
  -mwavefrontsize64       Specify wavefront size 64 mode (AMDGPU only)
  -M                      Like -MD, but also implies -E and writes to stdout by default
  --no-cuda-include-ptx=<value>
                          Do not include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.
  --no-default-config     Disable loading default configuration files
  --no-gpu-bundle-output  Do not bundle output files of HIP device compilation
  -no-hip-rt              Do not link against HIP runtime libraries
  --no-offload-arch=<value>
                          Remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. 'all' resets the list to its default value.
  --no-offload-new-driver Don't Use the new driver for offloading compilation.
  --no-system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as not including a system header.
  -nobuiltininc           Disable builtin #include directories
  -nogpuinc               Do not add include paths for CUDA/HIP and do not include the default CUDA/HIP wrapper headers
  -nogpulib               Do not link device library for CUDA/HIP device compilation
  -nohipwrapperinc        Do not include the default HIP wrapper headers and include paths
  -nostdinc++             Disable standard #include directories for the C++ standard library
  -ObjC++                 Treat source input files as Objective-C++ inputs
  -objcmt-allowlist-dir-path=<value>
                          Only modify files with a filename contained in the provided directory path
  -objcmt-atomic-property Make migration to 'atomic' properties
  -objcmt-migrate-all     Enable migration to modern ObjC
  -objcmt-migrate-annotation
                          Enable migration to property and method annotations
  -objcmt-migrate-designated-init
                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods
  -objcmt-migrate-instancetype
                          Enable migration to infer instancetype for method result type
  -objcmt-migrate-literals
                          Enable migration to modern ObjC literals
  -objcmt-migrate-ns-macros
                          Enable migration to NS_ENUM/NS_OPTIONS macros
  -objcmt-migrate-property-dot-syntax
                          Enable migration of setter/getter messages to property-dot syntax
  -objcmt-migrate-property
                          Enable migration to modern ObjC property
  -objcmt-migrate-protocol-conformance
                          Enable migration to add protocol conformance on classes
  -objcmt-migrate-readonly-property
                          Enable migration to modern ObjC readonly property
  -objcmt-migrate-readwrite-property
                          Enable migration to modern ObjC readwrite property
  -objcmt-migrate-subscripting
                          Enable migration to modern ObjC subscripting
  -objcmt-ns-nonatomic-iosonly
                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute
  -objcmt-returns-innerpointer-property
                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER
  -objcmt-whitelist-dir-path=<value>
                          Alias for -objcmt-allowlist-dir-path
  -ObjC                   Treat source input files as Objective-C inputs
  -object-file-name=<file>
                          Set the output <file> for debug infos
  --offload-arch=<value>  CUDA offloading device architecture (e.g. sm_35), or HIP offloading target ID in the form of a device architecture followed by target ID features delimited by a colon. Each target ID feature is a pre-defined string followed by a plus or minus sign (e.g. gfx908:xnack+:sramecc-).  May be specified more than once.
  --offload-device-only   Only compile for the offloading device.
  --offload-host-device   Only compile for the offloading host.
  --offload-host-only     Only compile for the offloading host.
  --offload-link          Use the new offloading linker to perform the link job.
  --offload-new-driver    Use the new driver for offloading compilation.
  --offload=<value>       Specify comma-separated list of offloading target triples (CUDA and HIP only)
  -o <file>               Write output to <file>
  -pedantic               Warn on language extensions
  -pg                     Enable mcount instrumentation
  -pipe                   Use pipes between commands, when possible
  --precompile            Only precompile the input
  -print-diagnostic-options
                          Print all of Clang's warning options
  -print-effective-triple Print the effective target triple
  -print-file-name=<file> Print the full library path of <file>
  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace
  -print-libgcc-file-name Print the library path for the currently used compiler runtime library ("libgcc.a" or "libclang_rt.builtins.*.a")
  -print-prog-name=<name> Print the full program path of <name>
  -print-resource-dir     Print the resource directory pathname
  -print-rocm-search-dirs Print the paths used for finding ROCm installation
  -print-runtime-dir      Print the directory pathname containing clangs runtime libraries
  -print-search-dirs      Print the paths used for finding libraries and programs
  -print-supported-cpus   Print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)
  -print-target-triple    Print the normalized target triple
  -print-targets          Print the registered targets
  -pthread                Support POSIX threads in generated code
  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)
  -P                      Disable linemarker output in -E mode
  -Qn                     Do not emit metadata containing compiler name and version
  -Qunused-arguments      Don't emit warning for unused driver arguments
  -Qy                     Emit metadata containing compiler name and version
  -relocatable-pch        Whether to build a relocatable precompiled header
  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++
  -rewrite-objc           Rewrite Objective-C source to C++
  --rocm-device-lib-path=<value>
                          ROCm device library path. Alternative to rocm-path.
  --rocm-path=<value>     ROCm installation path, used for finding and automatically linking required bitcode libraries.
  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression
  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression
  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression
  -rtlib=<value>          Compiler runtime library to use
  -R<remark>              Enable the specified remark
  -save-stats=<value>     Save llvm statistics.
  -save-stats             Save llvm statistics.
  -save-temps=<value>     Save intermediate compilation results.
  -save-temps             Save intermediate compilation results
  -serialize-diagnostics <value>
                          Serialize compiler diagnostics to a file
  -shared-libsan          Dynamically link the sanitizer runtime
  --start-no-unused-arguments
                          Don't emit warnings about unused arguments for the following arguments
  -static-libsan          Statically link the sanitizer runtime
  -static-openmp          Use the static host OpenMP runtime while linking.
  -std=<value>            Language standard to compile for
  -stdlib++-isystem <directory>
                          Use directory as the C++ standard library include path
  -stdlib=<value>         C++ standard library to use
  -sycl-std=<value>       SYCL language standard to compile for.
  --system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as including a system header.
  -S                      Only run preprocess and compilation steps
  --target=<value>        Generate code for the given target
  -time                   Time individual commands
  -traditional-cpp        Enable some traditional CPP emulation
  -trigraphs              Process trigraph sequences
  -T <script>             Specify <script> as linker script
  -undef                  undef all system defines
  -unwindlib=<value>      Unwind library to use
  -U <macro>              Undefine macro <macro>
  --verify-debug-info     Verify the binary representation of debug output
  -verify-pch             Load and verify that a pre-compiled header file is not stale
  --version               Print version information
  -v                      Show commands to run and use verbose output
  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler
  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED
  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker
  -working-directory <value>
                          Resolve file paths relative to the specified directory
  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor
  -W<warning>             Enable the specified warning
  -w                      Suppress all warnings
  -Xanalyzer <arg>        Pass <arg> to the static analyzer
  -Xarch_device <arg>     Pass <arg> to the CUDA/HIP device compilation
  -Xarch_host <arg>       Pass <arg> to the CUDA/HIP host compilation
  -Xassembler <arg>       Pass <arg> to the assembler
  -Xclang=<arg>           Alias for -Xclang
  -Xclang <arg>           Pass <arg> to clang -cc1
  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation
  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler
  -Xlinker <arg>          Pass <arg> to the linker
  -Xoffload-linker<triple> <arg>
                          Pass <arg> to the offload linkers or the ones idenfied by -<triple>
  -Xopenmp-target=<triple> <arg>
                          Pass <arg> to the target offloading toolchain identified by <triple>.
  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.
  -Xpreprocessor <arg>    Pass <arg> to the preprocessor
  -x <language>           Treat subsequent input files as having type <language>
  -z <arg>                Pass -z <arg> to the linker
Executing: gcc --help | head -n 500
Detected CLANG compiler
Executing: gcc --version
stdout:
Apple clang version 15.0.0 (clang-1500.3.9.4)
Target: arm64-apple-darwin23.4.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
Did not detect Gcc110plus compiler
Executing: gcc --help | head -n 20 
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
stdout: error: write on a pipe with no reader
Executing: gcc --help
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
  -cl-ext=<value>         OpenCL only. Enable or disable OpenCL extensions/optional features. The argument is a comma-separated sequence of one or more extension names, each prefixed by '+' or '-'.
  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.
  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.
  -cl-fp32-correctly-rounded-divide-sqrt
                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.
  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.
  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.
  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.
  -cl-no-stdinc           OpenCL only. Disables all standard includes containing non-native compiler types and functions.
  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.
  -cl-single-precision-constant
                          OpenCL only. Treat double precision floating-point constant as single precision constant.
  -cl-std=<value>         OpenCL language standard to compile for.
  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.
  -cl-uniform-work-group-size
                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel
  -cl-unsafe-math-optimizations
                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.
  --config=<file>         Specify configuration file
  --cuda-compile-host-device
                          Compile CUDA code for both host and device (default). Has no effect on non-CUDA compilations.
  --cuda-device-only      Compile CUDA code for device only
  --cuda-feature=<value>  Manually specify the CUDA feature to use
  --cuda-host-only        Compile CUDA code for host only. Has no effect on non-CUDA compilations.
  --cuda-include-ptx=<value>
                          Include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --cuda-noopt-device-debug
                          Enable device-side debug info generation. Disables ptxas optimizations.
  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation
  --cuda-path=<value>     CUDA installation path
  -cuid=<value>           An ID for compilation unit, which should be the same for the same compilation unit but different for different compilation units. It is used to externalize device-side static variables for single source offloading languages CUDA and HIP so that they can be accessed by the host code of the same compilation unit.
  -cxx-isystem <directory>
                          Add directory to the C++ SYSTEM include search path
  -C                      Include comments in preprocessed output
  -c                      Only run preprocess, compile, and assemble steps
  -darwin-target-variant-triple <value>
                          Specify the darwin target variant triple
  -darwin-target-variant <value>
                          Generate code for an additional runtime variant of the deployment target
  -dD                     Print macro definitions in -E mode in addition to normal output
  -dependency-dot <value> Filename to write DOT-formatted header dependencies to
  -dependency-file <value>
                          Filename (or -) to write dependency output to
  -dI                     Print include directives in -E mode in addition to normal output
  -dM                     Print macro definitions in -E mode instead of normal output
  -dsym-dir <dir>         Directory to output dSYM's (if any) to
  -dump-depscan-tree=<value>
                          emit the CAS identifier for the tree instead of the full -cc1
  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)
  -emit-ast               Emit Clang AST files for source inputs
  -emit-interface-stubs   Generate Interface Stub Files.
  -emit-llvm              Use the LLVM representation for assembler and object files
  -emit-merged-ifs        Generate Interface Stub Files, emit merged text not binary.
  --emit-static-lib       Enable linker job to emit a static library.
  --end-no-unused-arguments
                          Start emitting warnings for unused driver arguments
  --extract-api-ignores=<value>
                          Comma separated list of files containing a new line separated list of API symbols to ignore when extracting API information.
  -extract-api            Extract API information
  -E                      Only run the preprocessor
  -faapcs-bitfield-load   Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).
  -faapcs-bitfield-width  Follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -faddrsig               Emit an address-significance table
  -falign-loops=<N>       N must be a power of two. Align loops to the boundary
  -faligned-allocation    Enable C++17 aligned allocation functions
  -fallow-editor-placeholders
                          Treat editor placeholders as valid source code
  -faltivec-src-compat=<value>
                          Source-level compatibility for Altivec vectors (for PowerPC targets). This includes results of vector comparison (scalar for 'xl', vector for 'gcc') as well as behavior when initializing with a scalar (splatting for 'xl', element zero only for 'gcc'). For 'mixed', the compatibility is as 'gcc' for 'vector bool/vector pixel' and as 'xl' for other types. Current default is 'mixed'.
  -fansi-escape-codes     Use ANSI escape codes for diagnostics
  -fapinotes-cache-path=<directory>
                          Does nothing; API notes are no longer cached separately from modules
  -fapinotes-modules      Enable module-based external API notes support
  -fapinotes-swift-version=<version>
                          Specify the Swift version to use when filtering API notes
  -fapinotes              Enable external API notes support
  -fapple-kext            Use Apple's kernel extensions ABI
  -fapple-link-rtlib      Force linking the clang builtins runtime library
  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling
  -fapplication-extension Restrict code to those available for App Extensions
  -fapprox-func           Allow certain math function calls to be replaced with an approximately equivalent calculation
  -fasync-exceptions      Enable EH Asynchronous exceptions
  -fbasic-block-sections=<value>
                          Place each function's basic blocks in unique sections (ELF Only)
  -fbinutils-version=<major.minor>
                          Produced object files can use all ELF features supported by this binutils version and newer. If -fno-integrated-as is specified, the generated assembly will consider GNU as support. 'none' means that all ELF features can be used, regardless of binutils support. Defaults to 2.26.
  -fblocks                Enable the 'blocks' language feature
  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler
  -fbranch-target-identification
                          Emit branch target identification instructions for indirect branch destinations
  -fbuild-session-file=<file>
                          Use the last modification time of <file> as the build session timestamp
  -fbuild-session-timestamp=<time since Epoch in seconds>
                          Time when the current build session started
  -fbuiltin-module-map    Load the clang builtins module map file.
  -fc++-abi=<value>       C++ ABI to use. This will override the target C++ ABI.
  -fcall-saved-x10        Make the x10 register call-saved (AArch64 only)
  -fcall-saved-x11        Make the x11 register call-saved (AArch64 only)
  -fcall-saved-x12        Make the x12 register call-saved (AArch64 only)
  -fcall-saved-x13        Make the x13 register call-saved (AArch64 only)
  -fcall-saved-x14        Make the x14 register call-saved (AArch64 only)
  -fcall-saved-x15        Make the x15 register call-saved (AArch64 only)
  -fcall-saved-x18        Make the x18 register call-saved (AArch64 only)
  -fcall-saved-x8         Make the x8 register call-saved (AArch64 only)
  -fcall-saved-x9         Make the x9 register call-saved (AArch64 only)
  -fcf-protection=<value> Instrument control-flow architecture protection
  -fcf-protection         Enable cf-protection in 'full' mode
  -fchar8_t               Enable C++ builtin type char8_t
  -fclang-abi-compat=<version>
                          Attempt to match the ABI of Clang <version>
  -fcolor-diagnostics     Enable colors in diagnostics
  -fcomment-block-commands=<arg>
                          Treat each comma separated argument in <arg> as a documentation comment block command
  -fcommon                Place uninitialized global variables in a common block
  -fcomplete-member-pointers
                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fconvergent-functions  Assume functions may be convergent
  -fcoro-aligned-allocation
                          Prefer aligned allocation for C++ Coroutines
  -fcoroutines-ts         Enable support for the C++ Coroutines TS
  -fcoverage-compilation-dir=<value>
                          The compilation directory to embed in the coverage mapping.
  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis
  -fcoverage-prefix-map=<value>
                          remap file source paths in coverage mapping
  -fcrash-diagnostics-dir=<dir>
                          Put crash-report files in <dir>
  -fcrash-diagnostics=<value>
                          Set level of crash diagnostic reporting, (option: off, compiler, all)
  -fcrash-diagnostics     Enable crash diagnostic reporting (default)
  -fcs-profile-generate=<directory>
                          Generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcs-profile-generate   Generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcuda-approx-transcendentals
                          Use approximate transcendental functions
  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces
  -fcxx-exceptions        Enable C++ exceptions
  -fcxx-modules           Enable modules for C++
  -fdata-sections         Place each data in its own section
  -fdebug-compilation-dir=<value>
                          The compilation directory to embed in the debug info
  -fdebug-default-version=<value>
                          Default DWARF version to use, if a -g option caused DWARF debug info to be produced
  -fdebug-info-for-profiling
                          Emit extra debug info to make sample profile more accurate
  -fdebug-macro           Emit macro debug information
  -fdebug-prefix-map=<value>
                          remap file source paths in debug info
  -fdebug-ranges-base-address
                          Use DWARF base address selection entries in .debug_ranges
  -fdebug-types-section   Place debug types in their own section (ELF Only)
  -fdeclspec              Allow __declspec as a keyword
  -fdelayed-template-parsing
                          Parse templated function definitions at the end of the translation unit
  -fdelete-null-pointer-checks
                          Treat usage of null pointers as undefined behavior (default)
  -fdepscan-daemon=<value>
                          Specify the path to the daemon to be used. Clang will use the daemon specified, rather than try to spawn its own based on parent processes.
  -fdepscan-include-tree  Set dep-scanner to produce the include tree
  -fdepscan-prefix-map-sdk=<new>
                          With -fdepscan, auto-detect the SDK path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map-toolchain=<new>
                          With -fdepscan, auto-detect the toolchain path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map=<old>=<new>
                          With -fdepscan, seamlessly filter the CAS filesystem to apply the given prefix, updating the command-line to match.
  -fdepscan-share-identifier <value>
                          Share depscan daemon for Clang invocations using the same string identifier.
  -fdepscan-share-parent=<value>
                          Share state based on the PID of the parent command if the name matches. See also -fdepscan-share-stop.
  -fdepscan-share-parent  Share state based on the PID of the parent command. See also -fdepscan-share-stop.
  -fdepscan-share-stop=<value>
                          Stop looking for the command named by -fdepscan-share if a process with the name of the provided argument is found first. Also blocks -fdepscan-share=parent if the parent has this name. E.g., -fdepscan -fdepscan-share=ninja -fdepscan-share-stop=cmake looks for 'ninja' and 'cmake' in the process tree; if 'ninja' is found first, state is shared based on ninja's PID; if 'cmake' is found first, state is not shared.
  -fdepscan-share=<value> If the argument is the name of a command in the process tree, share state based on its PID. E.g., -fdepscan -fdepscan-share=ninja will search for 'ninja' in the process tree and share state based on its PID if found. See also -fdepscan-share-stop.
  -fdepscan=<value>       Scan for dependencies ahead of compiling, generating a pruned CAS tree to send to -fcas-fs. Values are 'auto', 'daemon' (see -fdepscan-share and -fdepscan-share-parent), 'inline', or 'off' (default).
  -fdepscan               Turn on -fdepscan=auto.
  -fdiagnostics-absolute-paths
                          Print absolute paths in diagnostics
  -fdiagnostics-hotness-threshold=<value>
                          Prevent optimization remarks from being output if they do not have at least this profile count. Use 'auto' to apply the threshold from profile summary
  -fdiagnostics-misexpect-tolerance=<value>
                          Prevent misexpect diagnostics from being output if the profile counts are within N% of the expected. 
  -fdiagnostics-parseable-fixits
                          Print fix-its in machine parseable form
  -fdiagnostics-print-source-range-info
                          Print source range spans in numeric form
  -fdiagnostics-show-hotness
                          Enable profile hotness information in diagnostic line
  -fdiagnostics-show-note-include-stack
                          Display include stacks for diagnostic notes
  -fdiagnostics-show-option
                          Print option name with mappable diagnostics
  -fdiagnostics-show-template-tree
                          Print a template comparison tree for differing templates
  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)
  -fdirect-access-external-data
                          Don't use GOT indirection to reference external data symbols
  -fdiscard-value-names   Discard value names in LLVM IR
  -fdollars-in-identifiers
                          Allow '$' in identifiers
  -fdouble-square-bracket-attributes
                          Enable '[[]]' attributes in all C and C++ language modes
  -fdriver-only           Only run the driver.
  -fdwarf-exceptions      Use DWARF style exceptions
  -feliminate-unused-debug-types
                          Do not emit  debug info for defined but unused types
  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker
  -fembed-bitcode=<option>
                          Embed LLVM bitcode
  -fembed-bitcode         Embed LLVM IR bitcode as data
  -fembed-offload-object=<value>
                          Embed Offloading device-side binary into host object file as a section.
  -femit-all-decls        Emit all declarations, even if unused
  -femit-dwarf-unwind=<value>
                          When to emit DWARF unwind (EH frame) info
  -femulated-tls          Use emutls functions to access thread_local variables
  -fenable-matrix         Enable matrix data type and related builtin functions
  -fexceptions            Enable support for exception handling
  -fexperimental-library  Control whether unstable and experimental library features are enabled. This option enables various library features that are either experimental (also known as TSes), or have been but are not stable yet in the selected Standard Library implementation. It is not recommended to use this option in production code, since neither ABI nor API stability are guaranteed. This is intended to provide a preview of features that will ship in the future for experimentation purposes
  -fexperimental-new-constant-interpreter
                          Enable the experimental new constant interpreter
  -fexperimental-relative-c++-abi-vtables
                          Use the experimental C++ class ABI for classes with virtual tables
  -fexperimental-sanitize-metadata=<value>
                          Specify the type of metadata to emit for binary analysis sanitizers
  -fexperimental-strict-floating-point
                          Enables experimental strict floating point in LLVM.
  -fextend-arguments=<value>
                          Controls how scalar integer arguments are extended in calls to unprototyped and varargs functions
  -ffast-math             Allow aggressive, lossy floating-point optimizations
  -ffile-compilation-dir=<value>
                          The compilation directory to embed in the debug info and coverage mapping.
  -ffile-prefix-map=<value>
                          remap file source paths in debug info, predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -ffile-reproducible     Use the target's platform-specific path separator character when expanding the __FILE__ macro
  -ffine-grained-bitfield-accesses
                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.
  -ffinite-loops          Assume all loops are finite.
  -ffixed-a0              Reserve the a0 register (M68k only)
  -ffixed-a1              Reserve the a1 register (M68k only)
  -ffixed-a2              Reserve the a2 register (M68k only)
  -ffixed-a3              Reserve the a3 register (M68k only)
  -ffixed-a4              Reserve the a4 register (M68k only)
  -ffixed-a5              Reserve the a5 register (M68k only)
  -ffixed-a6              Reserve the a6 register (M68k only)
  -ffixed-d0              Reserve the d0 register (M68k only)
  -ffixed-d1              Reserve the d1 register (M68k only)
  -ffixed-d2              Reserve the d2 register (M68k only)
  -ffixed-d3              Reserve the d3 register (M68k only)
  -ffixed-d4              Reserve the d4 register (M68k only)
  -ffixed-d5              Reserve the d5 register (M68k only)
  -ffixed-d6              Reserve the d6 register (M68k only)
  -ffixed-d7              Reserve the d7 register (M68k only)
  -ffixed-point           Enable fixed point types
  -ffixed-r19             Reserve register r19 (Hexagon only)
  -ffixed-r9              Reserve the r9 register (ARM only)
  -ffixed-x10             Reserve the x10 register (AArch64/RISC-V only)
  -ffixed-x11             Reserve the x11 register (AArch64/RISC-V only)
  -ffixed-x12             Reserve the x12 register (AArch64/RISC-V only)
  -ffixed-x13             Reserve the x13 register (AArch64/RISC-V only)
  -ffixed-x14             Reserve the x14 register (AArch64/RISC-V only)
  -ffixed-x15             Reserve the x15 register (AArch64/RISC-V only)
  -ffixed-x16             Reserve the x16 register (AArch64/RISC-V only)
  -ffixed-x17             Reserve the x17 register (AArch64/RISC-V only)
  -ffixed-x18             Reserve the x18 register (AArch64/RISC-V only)
  -ffixed-x19             Reserve the x19 register (AArch64/RISC-V only)
  -ffixed-x1              Reserve the x1 register (AArch64/RISC-V only)
  -ffixed-x20             Reserve the x20 register (AArch64/RISC-V only)
  -ffixed-x21             Reserve the x21 register (AArch64/RISC-V only)
  -ffixed-x22             Reserve the x22 register (AArch64/RISC-V only)
  -ffixed-x23             Reserve the x23 register (AArch64/RISC-V only)
  -ffixed-x24             Reserve the x24 register (AArch64/RISC-V only)
  -ffixed-x25             Reserve the x25 register (AArch64/RISC-V only)
  -ffixed-x26             Reserve the x26 register (AArch64/RISC-V only)
  -ffixed-x27             Reserve the x27 register (AArch64/RISC-V only)
  -ffixed-x28             Reserve the x28 register (AArch64/RISC-V only)
  -ffixed-x29             Reserve the x29 register (AArch64/RISC-V only)
  -ffixed-x2              Reserve the x2 register (AArch64/RISC-V only)
  -ffixed-x30             Reserve the x30 register (AArch64/RISC-V only)
  -ffixed-x31             Reserve the x31 register (AArch64/RISC-V only)
  -ffixed-x3              Reserve the x3 register (AArch64/RISC-V only)
  -ffixed-x4              Reserve the x4 register (AArch64/RISC-V only)
  -ffixed-x5              Reserve the x5 register (AArch64/RISC-V only)
  -ffixed-x6              Reserve the x6 register (AArch64/RISC-V only)
  -ffixed-x7              Reserve the x7 register (AArch64/RISC-V only)
  -ffixed-x8              Reserve the x8 register (AArch64/RISC-V only)
  -ffixed-x9              Reserve the x9 register (AArch64/RISC-V only)
  -fforce-dwarf-frame     Always emit a debug frame section
  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization
  -fforce-enable-int128   Enable support for int128_t type
  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (fuses across statements disregarding pragmas) | on (only fuses in the same statement unless dictated by pragmas) | off (never fuses) | fast-honor-pragmas (fuses across statements unless diectated by pragmas). Default is 'fast' for CUDA, 'fast-honor-pragmas' for HIP, and 'on' otherwise.
  -ffp-eval-method=<value>
                          Specifies the evaluation method to use for floating-point arithmetic.
  -ffp-exception-behavior=<value>
                          Specifies the exception behavior of floating-point operations.
  -ffp-model=<value>      Controls the semantics of floating-point calculations.
  -ffreestanding          Assert that the compilation takes place in a freestanding environment
  -ffuchsia-api-level=<value>
                          Set Fuchsia API level
  -ffunction-sections     Place each function in its own section
  -fgeneric-block-helpers Use generic block helpers for copying/destroying blocks
  -fglobal-isel           Enables the global instruction selector
  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard
  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime
  -fgnu89-inline          Use the gnu89 inline semantics
  -fgnuc-version=<value>  Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)
  -fgpu-allow-device-init Allow device side init function in HIP (experimental)
  -fgpu-default-stream=<value>
                          Specify default stream. The default value is 'legacy'. (HIP only)
  -fgpu-defer-diag        Defer host/device related diagnostic messages for CUDA/HIP
  -fgpu-flush-denormals-to-zero
                          Flush denormal floating point values to zero in CUDA/HIP device mode.
  -fgpu-rdc               Generate relocatable device code, also known as separate compilation mode
  -fgpu-sanitize          Enable sanitizer for AMDGPU target
  -fhip-fp32-correctly-rounded-divide-sqrt
                          Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fhip-kernel-arg-name   Specify that kernel argument names are preserved (HIP only)
  -fhip-new-launch-api    Use new kernel launching API for HIP
  -fignore-exceptions     Enable support for ignoring exception handling constructs
  -fimplicit-module-maps  Implicitly search the file system for module map files.
  -fin-descriptor-block-flags
                          Emit in-descriptor block flags
  -finline-functions      Inline suitable functions
  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline
  -finline-max-stacksize=<value>
                          Suppress inlining of functions whose stack size exceeds the given value
  -finput-charset=<value> Specify the default character set for source files
  -finstrument-function-entry-bare
                          Instrument function entry only, after inlining, without arguments to the instrumentation call
  -finstrument-functions-after-inlining
                          Like -finstrument-functions, but insert the calls after inlining
  -finstrument-functions  Generate calls to instrument function entry and exit
  -fintegrated-as         Enable the integrated assembler
  -fintegrated-cc1        Run cc1 in-process
  -fintegrated-objemitter Use internal machine object code emitter.
  -fjmc                   Enable just-my-code debugging
  -fjump-tables           Use jump tables for lowering switches
  -fkeep-static-consts    Keep static const variables if unused
  -flax-vector-conversions=<value>
                          Enable implicit vector bit-casts
  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)
  -flto=auto              Enable LTO in 'full' mode
  -flto=jobserver         Enable LTO in 'full' mode
  -flto=<value>           Set LTO mode
  -flto                   Enable LTO in 'full' mode
  -fmacro-prefix-map=<value>
                          remap file source paths in predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -fmath-errno            Require math functions to indicate errors by setting errno
  -fmax-tokens=<value>    Max total number of preprocessed tokens for -Wmax-tokens.
  -fmax-type-align=<value>
                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment
  -fmemory-profile=<directory>
                          Enable heap memory profiling and dump results into <directory>
  -fmemory-profile        Enable heap memory profiling
  -fmerge-all-constants   Allow merging of constants
  -fmessage-length=<value>
                          Format message diagnostics so that they fit within N columns
  -fminimize-whitespace   Minimize whitespace when emitting preprocessor output
  -fmodule-file=[<name>=]<file>
                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.
  -fmodule-header=<kind>  Build a C++20 Header Unit from a header that should be found in the user (fmodule-header=user) or system (fmodule-header=system) search path.
  -fmodule-header         Build a C++20 Header Unit from a header.
  -fmodule-map-file=<file>
                          Load this module map file
  -fmodule-name=<name>    Specify the name of the module to build
  -fmodule-related-to-pch Mark module as related to a PCH
  -fmodules-cache-path=<directory>
                          Specify the module cache path
  -fmodules-decluse       Require declaration of modules used within a module
  -fmodules-disable-diagnostic-validation
                          Disable validation of the diagnostic options when loading the module
  -fmodules-ignore-macro=<value>
                          Ignore the definition of the given macro when building and loading modules
  -fmodules-prune-after=<seconds>
                          Specify the interval (in seconds) after which a module file will be considered unused
  -fmodules-prune-interval=<seconds>
                          Specify the interval (in seconds) between attempts to prune the module cache
  -fmodules-search-all    Search even non-imported modules to resolve references
  -fmodules-strict-decluse
                          Like -fmodules-decluse but requires all headers to be in modules
  -fmodules-ts            Enable support for the C++ Modules TS
  -fmodules-user-build-path <directory>
                          Specify the module user build path
  -fmodules-validate-input-files-content
                          Validate PCM input files based on content if mtime differs
  -fmodules-validate-once-per-build-session
                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session
  -fmodules-validate-system-headers
                          Validate the system headers that a module depends on when loading the module
  -fmodules               Enable the 'modules' language feature
  -fms-compatibility-version=<value>
                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fms-compatibility      Enable full Microsoft Visual C++ compatibility
  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler
  -fms-hotpatch           Ensure that all functions can be hotpatched at runtime
  -fms-runtime-lib=<value>
                          Select Windows run-time library
  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'
  -fnew-infallible        Enable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-aapcs-bitfield-width
                          Do not follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -fno-access-control     Disable C++ access control
  -fno-addrsig            Don't emit an address-significance table
  -fno-apinotes-modules   Disable module-based external API notes support
  -fno-apinotes           Disable external API notes support
  -fno-assume-sane-operator-new
                          Don't assume that C++'s global operator new can't alias any pointer
  -fno-autolink           Disable generation of linker directives for automatic library linking
  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function
  -fno-builtin            Disable implicit builtin knowledge of functions
  -fno-c++-static-destructors
                          Disable C++ static destructor registration
  -fno-char8_t            Disable C++ builtin type char8_t
  -fno-color-diagnostics  Disable colors in diagnostics
  -fno-common             Compile common globals like normal definitions
  -fno-complete-member-pointers
                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings
  -fno-constant-nsarray-literals
                          Disable creation of CodeFoundation-type constant initializer `NSArray`s from array literals
  -fno-constant-nsdictionary-literals
                          Disable creation of CodeFoundation-type constant initializer `NSDictionary`s from dictionary literals
  -fno-constant-nsnumber-literals
                          Disable creation of CodeFoundation-type constant initializer `NSNumber`s from number literals
  -fno-coverage-mapping   Disable code coverage analysis
  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash
  -fno-cuda-approx-transcendentals
                          Don't use approximate transcendental functions
  -fno-cxx-modules        Disable modules for C++
  -fno-debug-macro        Do not emit macro debug information
  -fno-declspec           Disallow __declspec as a keyword
  -fno-delayed-template-parsing
                          Disable delayed template parsing
  -fno-delete-null-pointer-checks
                          Do not treat usage of null pointers as undefined behavior
  -fno-depscan-share      Turn off -fdepscan-share and -fdepscan-share-parent.
  -fno-diagnostics-fixit-info
                          Do not include fixit information in diagnostics
  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'
  -fno-direct-access-external-data
                          Use GOT indirection to reference external data symbols
  -fno-discard-value-names
                          Do not discard value names in LLVM IR
  -fno-dollars-in-identifiers
                          Disallow '$' in identifiers
  -fno-double-square-bracket-attributes
                          Disable '[[]]' attributes in all C and C++ language modes
  -fno-elide-constructors Disable C++ copy constructor elision
  -fno-elide-type         Do not elide types when printing diagnostics
  -fno-eliminate-unused-debug-types
                          Emit  debug info for defined but unused types
  -fno-exceptions         Disable support for exception handling
  -fno-experimental-relative-c++-abi-vtables
                          Do not use the experimental C++ class ABI for classes with virtual tables
  -fno-experimental-sanitize-metadata=<value>
                          Disable emitting metadata for binary analysis sanitizers
  -fno-file-reproducible  Use the host's platform-specific path separator character when expanding the __FILE__ macro
  -fno-fine-grained-bitfield-accesses
                          Use large-integer access for consecutive bitfield runs.
  -fno-finite-loops       Do not assume that any loop is finite.
  -fno-fixed-point        Disable fixed point types
  -fno-force-enable-int128
                          Disable support for int128_t type
  -fno-generic-block-helpers
                          Don't use generic block helpers for copying/destroying blocks
  -fno-global-isel        Disables the global instruction selector
  -fno-gnu-inline-asm     Disable GNU style inline asm
  -fno-gpu-allow-device-init
                          Don't allow device side init function in HIP (experimental)
  -fno-gpu-defer-diag     Don't defer host/device related diagnostic messages for CUDA/HIP
  -fno-hip-fp32-correctly-rounded-divide-sqrt
                          Don't specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fno-hip-kernel-arg-name
                          Don't specify that kernel argument names are preserved (HIP only)
  -fno-hip-new-launch-api Don't use new kernel launching API for HIP
  -fno-in-descriptor-block-flags
                          Don't emit in-descriptor block flags
  -fno-integrated-as      Disable the integrated assembler
  -fno-integrated-cc1     Spawn a separate process for each cc1
  -fno-integrated-objemitter
                          Use external machine object code emitter.
  -fno-jump-tables        Do not use jump tables for lowering switches
  -fno-keep-static-consts Don't keep static const variables if unused
  -fno-knr-functions      Disable support for K&R C function declarations
  -fno-lto                Disable LTO mode (default)
  -fno-memory-profile     Disable heap memory profiling
  -fno-merge-all-constants
                          Disallow merging of constants
  -fno-modules-check-relocated<value>
                          Skip checks for relocated modules when loading PCM files
  -fno-new-infallible     Disable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-objc-infer-related-result-type
                          do not infer Objective-C related result type based on method family
  -fno-offload-lto        Disable LTO mode (default) for offload compilation
  -fno-openmp-extensions  Disable all Clang extensions for OpenMP directives and clauses
  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators
  -fno-optimize-sibling-calls
                          Disable tail call optimization, keeping the call stack accurate
  -fno-pch-codegen        Do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fno-pch-debuginfo      Do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fno-plt                Use GOT indirection instead of PLT to make external function calls (x86 only)
  -fno-preserve-as-comments
                          Do not preserve comments in inline assembly
  -fno-profile-generate   Disable generation of profile instrumentation.
  -fno-profile-instr-generate
                          Disable generation of profile instrumentation.
  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization
  -fno-pseudo-probe-for-profiling
                          Do not emit pseudo probes for sample profiling
  -fno-ptrauth-abi-version
                          Disable Pointer Authentication ABI versioning
  -fno-ptrauth-kernel-abi-version
                          Disable Pointer Authentication kernel ABI versioning
  -fno-register-global-dtors-with-atexit
                          Don't use atexit or __cxa_atexit to register global destructors
  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags
  -fno-rtti-data          Disable generation of RTTI data
  -fno-rtti               Disable generation of rtti information
  -fno-sanitize-address-globals-dead-stripping
                          Disable linker dead stripping of globals in AddressSanitizer
  -fno-sanitize-address-outline-instrumentation
                          Use default code inlining logic for the address sanitizer
  -fno-sanitize-address-poison-custom-array-cookie
                          Disable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fno-sanitize-address-use-after-scope
                          Disable use-after-scope detection in AddressSanitizer
  -fno-sanitize-address-use-odr-indicator
                          Disable ODR indicator globals
  -fno-sanitize-cfi-canonical-jump-tables
                          Do not make the jump table addresses canonical in the symbol table
  -fno-sanitize-cfi-cross-dso
                          Disable control flow integrity (CFI) checks for cross-DSO calls.
  -fno-sanitize-coverage=<value>
                          Disable features of coverage instrumentation for Sanitizers
  -fno-sanitize-hwaddress-experimental-aliasing
                          Disable aliasing mode in HWAddressSanitizer
  -fno-sanitize-ignorelist
                          Don't use ignorelist file for sanitizers
  -fno-sanitize-memory-param-retval
                          Disable detection of uninitialized parameters and return values
  -fno-sanitize-memory-track-origins
                          Disable origins tracking in MemorySanitizer
  -fno-sanitize-memory-use-after-dtor
                          Disable use-after-destroy detection in MemorySanitizer
  -fno-sanitize-recover=<value>
                          Disable recovery for specified sanitizers
  -fno-sanitize-stable-abi
                          Conventional ABI instrumentation for sanitizer runtime. Default: Conventional
  -fno-sanitize-stats     Disable sanitizer statistics gathering.
  -fno-sanitize-thread-atomics
                          Disable atomic operations instrumentation in ThreadSanitizer
  -fno-sanitize-thread-func-entry-exit
                          Disable function entry/exit instrumentation in ThreadSanitizer
  -fno-sanitize-thread-memory-access
                          Disable memory access instrumentation in ThreadSanitizer
  -fno-sanitize-trap=<value>
                          Disable trapping for specified sanitizers
  -fno-sanitize-trap      Disable trapping for all sanitizers
  -fno-short-wchar        Force wchar_t to be an unsigned int
  -fno-show-column        Do not include column number on diagnostics
  -fno-show-source-location
                          Do not include source location information with diagnostics
  -fno-signed-char        char is unsigned
  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros
  -fno-spell-checking     Disable spell-checking
  -fno-split-machine-functions
                          Disable late function splitting using profile information (x86 ELF)
  -fno-split-stack        Wouldn't use segmented stack
  -fno-stack-check        Disable stack checking
  -fno-stack-clash-protection
                          Disable stack clash protection
  -fno-stack-protector    Disable the use of stack protectors
  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary
  -fno-strict-float-cast-overflow
                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions
  -fno-strict-return      Don't treat control flow paths that fall off the end of a non-void function as unreachable
  -fno-sycl               Disables SYCL kernels compilation for device
  -fno-temp-file          Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes
  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe
  -fno-trap-function-returns
                          The trap function specified by -ftrap-function never returns
  -fno-trigraphs          Do not process trigraph sequences
  -fno-typed-cxx-new-delete
                          Disable use of typed variants of C++ new() and delete()
  -fno-typed-memory-operations-experimental
                          Disable Typed Memory Operations call site rewriting
  -fno-unique-section-names
                          Don't use unique names for text and data sections
  -fno-unroll-loops       Turn off loop unroller
  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors
  -fno-use-init-array     Use .ctors/.dtors instead of .init_array/.fini_array
  -fno-visibility-inlines-hidden-static-local-var
                          Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)
  -fno-xray-function-index
                          Omit function index section at the expense of single-function patching performance
  -fno-zero-initialized-in-bss
                          Don't place zero initialized data in BSS
  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc
  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers
  -fobjc-disable-direct-methods-for-testing
                          Ignore attribute objc_direct so that direct methods can be tested
  -fobjc-encode-cxx-class-template-spec
                          Fully encode c++ class template specialization
  -fobjc-exceptions       Enable Objective-C exceptions
  -fobjc-relative-method-lists
                          Enable relative method lists
  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version
  -fobjc-weak             Enable ARC-style weak references in Objective-C
  -foffload-lto=<value>   Set LTO mode for offload compilation
  -foffload-lto           Enable LTO in 'full' mode for offload compilation
  -fopenmp-extensions     Enable all Clang extensions for OpenMP directives and clauses
  -fopenmp-implicit-rpath Set rpath on OpenMP executables
  -fopenmp-offload-mandatory
                          Do not create a host fallback if offloading to the device fails.
  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.
  -fopenmp-target-debug   Enable debugging in the OpenMP offloading device RTL
  -fopenmp-targets=<value>
                          Specify comma-separated list of triples OpenMP offloading targets to be supported
  -fopenmp-version=<value>
                          Set OpenMP version (e.g. 45 for OpenMP 4.5, 50 for OpenMP 5.0). Default value is 50.
  -fopenmp                Parse OpenMP pragmas and generate parallel code.
  -foptimization-record-file=<file>
                          Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.
  -foptimization-record-passes=<regex>
                          Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)
  -forder-file-instrumentation
                          Generate instrumented code to collect order file into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fpack-struct=<value>   Specify the default maximum struct packing alignment
  -fpascal-strings        Recognize and construct Pascal-style string literals
  -fpass-plugin=<dsopath> Load pass plugin from a dynamic shared object file (only with new pass manager).
  -fpatchable-function-entry=<N,M>
                          Generate M NOPs before function entry and N-M NOPs after function entry
  -fpcc-struct-return     Override the default ABI to return all structs on the stack
  -fpch-codegen           Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fpch-debuginfo         Generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fpch-instantiate-templates
                          Instantiate templates already while building a PCH
  -fpch-validate-input-files-content
                          Validate PCH input files based on content if mtime differs
  -fplugin-arg-<name>-<arg>
                          Pass <arg> to plugin <name>
  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)
  -fprebuilt-implicit-modules
                          Look up implicit modules in the prebuilt module path
  -fprebuilt-module-path=<directory>
                          Specify the prebuilt module path
  -fproc-stat-report=<value>
                          Save subprocess statistics to the given file
  -fproc-stat-report<value>
                          Print subprocess statistics
  -fprofile-exclude-files=<value>
                          Instrument only functions from files where names don't match all the regexes separated by a semi-colon
  -fprofile-filter-files=<value>
                          Instrument only functions from files where names match any regex separated by a semi-colon
  -fprofile-function-groups=<N>
                          Partition functions into N groups and select only functions in group i to be instrumented using -fprofile-selected-function-group
  -fprofile-generate=<directory>
                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate=<file>
                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate
                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fprofile-instr-use=<value>
                          Use instrumentation data for profile-guided optimization
  -fprofile-list=<value>  Filename defining the list of functions/files to instrument
  -fprofile-remapping-file=<file>
                          Use the remappings described in <file> to match the profile data against names in the program
  -fprofile-sample-accurate
                          Specifies that the sample profile is accurate
  -fprofile-sample-use=<value>
                          Enable sample-based profile guided optimizations
  -fprofile-selected-function-group=<i>
                          Partition functions into N groups using -fprofile-function-groups and select only functions in group i to be instrumented. The valid range is 0 to N-1 inclusive
  -fprofile-update=<method>
                          Set update method of profile counters
  -fprofile-use=<pathname>
                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.
  -fprotect-parens        Determines whether the optimizer honors parentheses when floating-point expressions are evaluated
  -fpseudo-probe-for-profiling
                          Emit pseudo probes for sample profiling
  -fptrauth-abi-version=<value>
                          Pointer Authentication ABI version
  -fptrauth-auth-traps    Enable traps on authentication failures
  -fptrauth-block-descriptor-pointers
                          enable signing block descriptors
  -fptrauth-calls         Enable signing and authentication of all indirect calls
  -fptrauth-function-pointer-type-discrimination
                          Enabling type discrimination on C function pointers
  -fptrauth-indirect-gotos
                          Enable signing and authentication of indirect goto targets
  -fptrauth-intrinsics    Enable pointer-authentication intrinsics
  -fptrauth-kernel-abi-version
                          Enable Pointer Authentication kernel ABI version
  -fptrauth-objc-class-ro Enable signing and authentication for ObjC class_ro pointers
  -fptrauth-objc-interface-sel
                          Enable signing and authentication of Objective-C object's 'SEL' fields
  -fptrauth-objc-isa-masking
                          pre- and post-authentication masking mode of objective-c isa pointers
  -fptrauth-objc-isa-mode=<value>
                          Authentication mode for ObjC isa field. Full auth if unspecified
  -fptrauth-objc-isa      Enable signing and authentication of Objective-C object's 'isa' field
  -fptrauth-returns       Enable signing and authentication of return addresses
  -fptrauth-soft          Enable software lowering of pointer authentication
  -fptrauth-vtable-pointer-address-discrimination
                          Enable address discrimination of vtable pointers
  -fptrauth-vtable-pointer-type-discrimination
                          Enable type discrimination of vtable pointers
  -frandomize-layout-seed-file=<file>
                          File holding the seed used by the randomize structure layout feature
  -frandomize-layout-seed=<seed>
                          The seed used by the randomize structure layout feature
  -freciprocal-math       Allow division operations to be reassociated
  -freg-struct-return     Override the default ABI to return small structs in registers
  -fregister-global-dtors-with-atexit
                          Use atexit or __cxa_atexit to register global destructors
  -frelaxed-template-template-args
                          Enable C++17 relaxed template template argument matching
  -freroll-loops          Turn on loop reroller
  -fropi                  Generate read-only position independent code (ARM only)
  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags
  -frwpi                  Generate read-write position independent code (ARM only)
  -fsafe-buffer-usage-suggestions
                          Display suggestions to update code associated with -Wunsafe-buffer-usage warnings
  -fsanitize-address-destructor=<value>
                          Set destructor type used in ASan instrumentation
  -fsanitize-address-field-padding=<value>
                          Level of field padding for AddressSanitizer
  -fsanitize-address-globals-dead-stripping
                          Enable linker dead stripping of globals in AddressSanitizer
  -fsanitize-address-outline-instrumentation
                          Always generate function calls for address sanitizer instrumentation
  -fsanitize-address-poison-custom-array-cookie
                          Enable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fsanitize-address-use-after-return=<mode>
                          Select the mode of detecting stack use-after-return in AddressSanitizer
  -fsanitize-address-use-after-scope
                          Enable use-after-scope detection in AddressSanitizer
  -fsanitize-address-use-odr-indicator
                          Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size
  -fsanitize-blacklist=<value>
                          Alias for -fsanitize-ignorelist=
  -fsanitize-cfi-canonical-jump-tables
                          Make the jump table addresses canonical in the symbol table
  -fsanitize-cfi-cross-dso
                          Enable control flow integrity (CFI) checks for cross-DSO calls.
  -fsanitize-cfi-icall-generalize-pointers
                          Generalize pointers in CFI indirect call type signature checks
  -fsanitize-coverage-allowlist=<value>
                          Restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones
  -fsanitize-coverage-ignorelist=<value>
                          Disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones
  -fsanitize-coverage=<value>
                          Specify the type of coverage instrumentation for Sanitizers
  -fsanitize-hwaddress-abi=<value>
                          Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.
  -fsanitize-hwaddress-experimental-aliasing
                          Enable aliasing mode in HWAddressSanitizer
  -fsanitize-ignorelist=<value>
                          Path to ignorelist file for sanitizers
  -fsanitize-memory-param-retval
                          Enable detection of uninitialized parameters and return values
  -fsanitize-memory-track-origins=<value>
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-track-origins
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-use-after-dtor
                          Enable use-after-destroy detection in MemorySanitizer
  -fsanitize-memtag-mode=<value>
                          Set default MTE mode to 'sync' (default) or 'async'
  -fsanitize-recover=<value>
                          Enable recovery for specified sanitizers
  -fsanitize-stable-abi   Stable  ABI instrumentation for sanitizer runtime. Default: Conventional
  -fsanitize-stats        Enable sanitizer statistics gathering.
  -fsanitize-system-blacklist=<value>
                          Alias for -fsanitize-system-ignorelist=
  -fsanitize-system-ignorelist=<value>
                          Path to system ignorelist file for sanitizers
  -fsanitize-thread-atomics
                          Enable atomic operations instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-func-entry-exit
                          Enable function entry/exit instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-memory-access
                          Enable memory access instrumentation in ThreadSanitizer (default)
  -fsanitize-trap=<value> Enable trapping for specified sanitizers
  -fsanitize-trap         Enable trapping for all sanitizers
  -fsanitize-undefined-strip-path-components=<number>
                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.
  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks
  -fsave-optimization-record=<format>
                          Generate an optimization record file in a specific format
  -fsave-optimization-record
                          Generate a YAML optimization record file
  -fseh-exceptions        Use SEH style exceptions
  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values
  -fshort-wchar           Force wchar_t to be a short unsigned int
  -fshow-overloads=<value>
                          Which overload candidates to show when overload resolution fails. Defaults to 'all'
  -fshow-skipped-includes Show skipped includes in -H output.
  -fsigned-char           char is signed
  -fsized-deallocation    Enable C++14 sized global deallocation functions
  -fsjlj-exceptions       Use SjLj style exceptions
  -fslp-vectorize         Enable the superword-level parallelism vectorization passes
  -fsmall-block-descriptors
                          Enable small block descriptors
  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF
  -fsplit-lto-unit        Enables splitting of the LTO unit
  -fsplit-machine-functions
                          Enable late function splitting using profile information (x86 ELF)
  -fsplit-stack           Use segmented stack
  -fstack-check           Enable stack checking
  -fstack-clash-protection
                          Enable stack clash protection
  -fstack-protector-all   Enable stack protectors for all functions
  -fstack-protector-strong
                          Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable
  -fstack-protector       Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca , which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable. A function with a stack protector has a guard value added to the stack frame that is checked on function exit. The guard value must be positioned in the stack frame such that a buffer overflow from a vulnerable variable will overwrite the guard value before overwriting the function's return address. The reference stack guard value is stored in a global variable.
  -fstack-size-section    Emit section containing metadata on function stack sizes
  -fstack-usage           Emit .su file containing information on function stack sizes
  -fstandalone-debug      Emit full debug info for all types used by the program
  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range
  -fstrict-flex-arrays=<n>
                          Enable optimizations based on the strict definition of flexible arrays
  -fstrict-float-cast-overflow
                          Assume that overflowing float-to-int casts are undefined (default)
  -fstrict-vtable-pointers
                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects
  -fsuppress-conflicting-types
                          Ignore errors from conflicting types in function declarations
  -fswift-async-fp=<option>
                          Control emission of Swift async extended frame info
  -fsycl                  Enables SYCL kernels compilation for device
  -fsyntax-only           Run the preprocessor, parser and semantic analysis stages
  -fsystem-module         Build this module as a system module. Only used with -emit-module
  -ftarget-variant-availability-checks
                          Enable availability checks for the target variant platform
  -fthin-link-bitcode=<value>
                          Write minimized bitcode to <file> for the ThinLTO thin link only
  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index
  -ftime-report=<value>   (For new pass manager) 'per-pass': one report for each pass; 'per-pass-run': one report for each pass invocation
  -ftime-trace-granularity=<value>
                          Minimum time granularity (in microseconds) traced by time profiler
  -ftime-trace=<value>    Similar to -ftime-trace. Specify the JSON file or a directory which will contain the JSON file
  -ftime-trace            Turn on time profiler. Generates JSON file based on output filename.
  -ftrap-function-returns The trap function specified by -ftrap-function may return normally
  -ftrap-function=<value> Issue call to specified function rather than a trap instruction
  -ftrapv-handler=<function name>
                          Specify the function to be called on overflow
  -ftrapv                 Trap on integer overflow
  -ftrigraphs             Process trigraph sequences
  -ftrivial-auto-var-init-skip-cpp-obj
                          do not auto-initialize objects initialized by a C++ constructor
  -ftrivial-auto-var-init-skip-non-pod
                          do not auto-initialize non-POD objects
  -ftrivial-auto-var-init-skip-non-ptr-array
                          do not auto-initialize arrays other than arrays of pointers
  -ftrivial-auto-var-init-skip-stl
                          do not auto-initialize variables in STL namespace
  -ftrivial-auto-var-init-stop-after=<value>
                          Stop initializing trivial automatic stack variables after the specified number of instances
  -ftrivial-auto-var-init=<value>
                          Initialize trivial automatic stack variables. Defaults to 'uninitialized'
  -ftrivial-auto-var-zero-init-max-size=<value>
                          Zero initialize only first N bytes of each stack variable; 0 value turns off the limit.
  -ftyped-cxx-new-delete  Enable use of typed variants of C++ new() and delete()
  -ftyped-memory-operations-experimental
                          Enable Typed Memory Operations call site rewriting
  -funique-basic-block-section-names
                          Use unique names for basic block sections (ELF Only)
  -funique-internal-linkage-names
                          Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path
  -funroll-loops          Turn on loop unroller
  -fuse-cuid=<value>      Method to generate ID's for compilation units for single source offloading languages CUDA and HIP: 'hash' (ID's generated by hashing file path and command line options) | 'random' (ID's generated as random numbers) | 'none' (disabled). Default is 'hash'. This option will be overridden by option '-cuid=[ID]' if it is specified.
  -fuse-line-directives   Use #line in preprocessed output
  -fvalidate-ast-input-files-content
                          Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical
  -fveclib=<value>        Use the given vector functions library
  -fvectorize             Enable the loop vectorization passes
  -fverbose-asm           Generate verbose assembly output
  -fvirtual-function-elimination
                          Enables dead virtual function elimination optimization. Requires -flto=full
  -fvisibility-dllexport=<value>
                          The visibility for dllexport definitions [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-dllimport=<value>
                          The visibility for dllimport external declarations [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-nodllstorageclass=<value>
                          The visibility for external declarations without an explicit DLL dllstorageclass [-fvisibility-from-dllstorageclass]
  -fvisibility-from-dllstorageclass
                          Set the visibility of symbols in the generated code from their DLL storage class
  -fvisibility-global-new-delete-hidden
                          Give global C++ operator new and delete declarations hidden visibility
  -fvisibility-inlines-hidden-static-local-var
                          When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default
  -fvisibility-inlines-hidden
                          Give inline C++ member functions hidden visibility by default
  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default
  -fvisibility-nodllstorageclass=<value>
                          The visibility for definitions without an explicit DLL export class [-fvisibility-from-dllstorageclass]
  -fvisibility=<value>    Set the default symbol visibility for all global definitions
  -fwasm-exceptions       Use WebAssembly style exceptions
  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto
  -fwrapv                 Treat signed integer overflow as two's complement
  -fwritable-strings      Store string literals as writable data
  -fxl-pragma-pack        Enable IBM XL #pragma pack handling
  -fxray-always-emit-customevents
                          Always emit __xray_customevent(...) calls even if the containing function is not always instrumented
  -fxray-always-emit-typedevents
                          Always emit __xray_typedevent(...) calls even if the containing function is not always instrumented
  -fxray-always-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.
  -fxray-attr-list=<value>
                          Filename defining the list of functions/types for imbuing XRay attributes.
  -fxray-function-groups=<value>
                          Only instrument 1 of N groups
  -fxray-ignore-loops     Don't instrument functions with loops unless they also meet the minimum function size
  -fxray-instruction-threshold=<value>
                          Sets the minimum function size to instrument with XRay
  -fxray-instrumentation-bundle=<value>
                          Select which XRay instrumentation points to emit. Options: all, none, function-entry, function-exit, function, custom. Default is 'all'.  'function' includes both 'function-entry' and 'function-exit'.
  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit
  -fxray-link-deps        Tells clang to add the link dependencies for XRay.
  -fxray-modes=<value>    List of modes to link in by default into XRay instrumented binaries.
  -fxray-never-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.
  -fxray-selected-function-group=<value>
                          When using -fxray-function-groups, select which group of functions to instrument. Valid range is 0 to fxray-function-groups - 1
  -fzero-call-used-regs=<value>
                          Clear call-used registers upon function return (AArch64/x86 only)
  -fzvector               Enable System z vector language extension
  -F <value>              Add directory to framework include search path
  --gcc-install-dir=<value>
                          Use GCC installation in the specified directory. The directory ends with path components like 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Note: executables (e.g. ld) used by the compiler are not overridden by the selected GCC installation
  --gcc-toolchain=<value> Specify a directory where Clang can find 'include' and 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Clang will use the GCC installation with the largest version
  -gcodeview-ghash        Emit type record hashes in a .debug$H section
  -gcodeview              Generate CodeView debug information
  -gdwarf-2               Generate source-level debug information with dwarf version 2
  -gdwarf-3               Generate source-level debug information with dwarf version 3
  -gdwarf-4               Generate source-level debug information with dwarf version 4
  -gdwarf-5               Generate source-level debug information with dwarf version 5
  -gdwarf32               Enables DWARF32 format for ELF binaries, if debug information emission is enabled.
  -gdwarf64               Enables DWARF64 format for ELF binaries, if debug information emission is enabled.
  -gdwarf                 Generate source-level debug information with the default dwarf version
  -gembed-source          Embed source text in DWARF debug sections
  -gen-reproducer=<value> Emit reproducer on (option: off, crash (default), error, always)
  -gline-directives-only  Emit debug line info directives only
  -gline-tables-only      Emit debug line number tables only
  -gmodules               Generate debug info with external references to clang modules or precompiled headers
  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections
  -gno-inline-line-tables Don't emit inline line tables.
  --gpu-bundle-output     Bundle output files of HIP device compilation
  --gpu-instrument-lib=<value>
                          Instrument device library for HIP, which is a LLVM bitcode containing __cyg_profile_func_enter and __cyg_profile_func_exit
  --gpu-max-threads-per-block=<value>
                          Default max threads per block for kernel launch bounds for HIP
  -greproducible          Tune debug info to be reproducible.
  -gsplit-dwarf=<value>   Set DWARF fission mode
  -gz=<value>             DWARF debug sections compression type
  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)
  -g                      Generate source-level debug information
  --help-hidden           Display help for hidden options
  -help                   Display available options
  --hip-device-lib=<value>
                          HIP device library
  --hip-link              Link clang-offload-bundler bundles for HIP
  --hip-path=<value>      HIP runtime installation path, used for finding HIP version and adding HIP include path.
  --hip-version=<value>   HIP version in the format of major.minor.patch
  --hipspv-pass-plugin=<dsopath>
                          path to a pass plugin for HIP to SPIR-V passes.
  -H                      Show header includes and nesting depth
  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path
  -iapinotes-modules <directory>
                          Add directory to the API notes search path referenced by module name
  -iapinotes-path <file>  Include API notes file
  -ibuiltininc            Enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it
  -idirafter <value>      Add directory to AFTER include search path
  -iframeworkwithsysroot <directory>
                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot
  -iframework <value>     Add directory to SYSTEM framework search path
  -imacros <file>         Include macros from file before parsing
  -include-pch <file>     Include precompiled header file
  -include <file>         Include file before parsing
  -index-header-map       Make the next included directory (-I or -F) an indexer header map
  -index-ignore-macros    Ignore macros during indexing
  -index-ignore-pcms      Ignore symbols from imported pcm modules
  -index-ignore-system-symbols
                          Ignore symbols from system headers
  -index-record-codegen-name
                          Record the codegen name for symbols
  -index-store-path <value>
                          Enable indexing with the specified data store path
  -index-unit-output-path <path>
                          Use <path> as the output path for this compilation unit in the index unit file
  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix
  -iquote <directory>     Add directory to QUOTE include search path
  -isysroot <dir>         Set the system root directory (usually /)
  -isystem-after <directory>
                          Add directory to end of the SYSTEM include search path
  -isystem <directory>    Add directory to SYSTEM include search path
  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system
  -ivfsstatcache <value>  Use the stat data cached in file instead of doing filesystem syscalls. See clang-stat-cache utility.
  -iwithprefixbefore <dir>
                          Set directory to include search path with prefix
  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix
  -iwithsysroot <directory>
                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot
  -I <dir>                Add directory to the end of the list of include search paths
  --libomptarget-amdgcn-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-amdgpu-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-nvptx-bc-path=<value>
                          Path to libomptarget-nvptx bitcode library
  -L <dir>                Add directory to library search path
  -mabi=quadword-atomics  Enable quadword atomics ABI on AIX (AIX PPC64 only). Uses lqarx/stqcx. instructions.
  -mabi=vec-default       Enable the default Altivec ABI on AIX (AIX only). Uses only volatile vector registers.
  -mabi=vec-extabi        Enable the extended Altivec ABI on AIX (AIX only). Uses volatile and nonvolatile vector registers
  -mabicalls              Enable SVR4-style position-independent code (Mips only)
  -maix-struct-return     Return all structs in memory (PPC32 only)
  -malign-branch-boundary=<value>
                          Specify the boundary's size to align branches
  -malign-branch=<value>  Specify types of branches to align
  -malign-double          Align doubles to two words in structs (x86 only)
  -mamdgpu-ieee           Sets the IEEE bit in the expected default floating point  mode register. Floating point opcodes that support exception flag gathering quiet and propagate signaling NaN inputs per IEEE 754-2008. This option changes the ABI. (AMDGPU only)
  -mbackchain             Link stack frames through backchain on System Z
  -mbranch-protection=<value>
                          Enforce targets of indirect branches and function returns
  -mbranches-within-32B-boundaries
                          Align selected branches (fused, jcc, jmp) within 32-byte boundary
  -mcmodel=medany         Equivalent to -mcmodel=medium, compatible with RISC-V gcc.
  -mcmodel=medlow         Equivalent to -mcmodel=small, compatible with RISC-V gcc.
  -mcmse                  Allow use of CMSE (Armv8-M Security Extensions)
  -mcode-object-v3        Legacy option to specify code object ABI V3 (AMDGPU only)
  -mcode-object-version=<value>
                          Specify code object ABI version. Defaults to 4. (AMDGPU only)
  -mcrc                   Allow use of CRC instructions (ARM/Mips only)
  -mcumode                Specify CU wavefront execution mode (AMDGPU only)
  -mdefault-visibility-export-mapping=<value>
                          Mapping between default visibility and export
  -mdouble=<n             Force double to be <n> bits
  -MD                     Write a depfile containing user and system headers
  -meabi <value>          Set EABI type. Default depends on triple)
  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)
  -menable-experimental-extensions
                          Enable use of experimental RISC-V extensions.
  -menable-unsafe-fp-math Allow unsafe floating-point math optimizations which may decrease precision
  -mexec-model=<value>    Execution model (WebAssembly only)
  -mexecute-only          Disallow generation of data access to code sections (ARM only)
  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mfentry                Insert calls to fentry at function entry (x86/SystemZ only)
  -mfix-cmse-cve-2021-35465
                          Work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mfix-cortex-a57-aes-1742098
                          Work around Cortex-A57 Erratum 1742098 (ARM only)
  -mfix-cortex-a72-aes-1655431
                          Work around Cortex-A72 Erratum 1655431 (ARM only)
  -mfp32                  Use 32-bit floating point registers (MIPS only)
  -mfp64                  Use 64-bit floating point registers (MIPS only)
  -mframe-chain=<value>   Select the frame chain model used to emit frame records (Arm only).
  -mfunction-return=<value>
                          Replace returns with jumps to ``__x86_return_thunk`` (x86 only, error otherwise)
  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>
  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64/x86 only)
  -mglobal-merge          Enable merging of globals
  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mguard=<value>         Enable or disable Control Flow Guard checks and guard tables emission
  -MG                     Add missing headers to depfile
  -mharden-sls=<value>    Select straight-line speculation hardening scope (ARM/AArch64/X86 only). <arg> must be: all, none, retbr(ARM/AArch64), blr(ARM/AArch64), comdat(ARM/AArch64), nocomdat(ARM/AArch64), return(X86), indirect-jmp(X86)
  -mhvx-ieee-fp           Enable Hexagon HVX IEEE floating-point
  -mhvx-length=<value>    Set Hexagon Vector Length
  -mhvx-qfloat            Enable Hexagon HVX QFloat instructions
  -mhvx=<value>           Enable Hexagon Vector eXtensions
  -mhvx                   Enable Hexagon Vector eXtensions
  -miamcu                 Use Intel MCU ABI
  -mibt-seal              Optimize fcf-protection=branch/full (requires LTO).
  -mignore-xcoff-visibility
                          Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspecified' visibility in XCOFF object file
  --migrate               Run the migrator
  -mincremental-linker-compatible
                          (integrated-as) Emit an object file which can be used with an incremental linker
  -mindirect-branch-cs-prefix
                          Add cs prefix to call and jmp to indirect thunk
  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation
  -mios-version-min=<value>
                          Set iOS deployment target
  -MJ <value>             Write a compilation database entry per input
  -mllvm <value>          Additional arguments to forward to LLVM's option processing
  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)
  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.
  -mlong-double-128       Force long double to be 128 bits
  -mlong-double-64        Force long double to be 64 bits
  -mlong-double-80        Force long double to be 80 bits, padded to 128 bits for storage
  -mlvi-cfi               Enable only control-flow mitigations for Load Value Injection (LVI)
  -mlvi-hardening         Enable all mitigations for Load Value Injection (LVI)
  -mmacos-version-min=<value>
                          Set macOS deployment target
  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.
  -mmark-bti-property     Add .note.gnu.property with BTI to assembly files (AArch64 only)
  -MMD                    Write a depfile containing user headers
  -mmemops                Enable generation of memop instructions
  -mmlir <value>          Additional arguments to forward to MLIR's option processing
  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard
  -mmsa                   Enable MSA ASE (MIPS only)
  -mmt                    Enable MT ASE (MIPS only)
  -MM                     Like -MMD, but also implies -E and writes to stdout by default
  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)
  -mno-bti-at-return-twice
                          Do not add a BTI instruction after a setjmp or other return-twice construct (Arm/AArch64 only)
  -mno-code-object-v3     Legacy option to specify code object ABI V2 (AMDGPU only)
  -mno-crc                Disallow use of CRC instructions (Mips only)
  -mno-cumode             Specify WGP wavefront execution mode (AMDGPU only)
  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)
  -mno-execute-only       Allow generation of data access to code sections (ARM only)
  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mno-fix-cmse-cve-2021-35465
                          Don't work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mno-fix-cortex-a53-835769
                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mno-fix-cortex-a57-aes-1742098
                          Don't work around Cortex-A57 Erratum 1742098 (ARM only)
  -mno-fix-cortex-a72-aes-1655431
                          Don't work around Cortex-A72 Erratum 1655431 (ARM only)
  -mno-global-merge       Disable merging of globals
  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mno-hvx-ieee-fp        Disable Hexagon HVX IEEE floating-point
  -mno-hvx-qfloat         Disable Hexagon HVX QFloat instructions
  -mno-hvx                Disable Hexagon Vector eXtensions
  -mno-implicit-float     Don't generate implicit floating point instructions
  -mno-implicit-sme       Don't generate implicit SME instructions or mode switches
  -mno-incremental-linker-compatible
                          (integrated-as) Emit an object file which cannot be used with an incremental linker
  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)
  -mno-long-calls         Restore the default behaviour of not generating long calls
  -mno-lvi-cfi            Disable control-flow mitigations for Load Value Injection (LVI)
  -mno-lvi-hardening      Disable mitigations for Load Value Injection (LVI)
  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.
  -mno-memops             Disable generation of memop instructions
  -mno-movt               Disallow use of movt/movw pairs (ARM only)
  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard
  -mno-msa                Disable MSA ASE (MIPS only)
  -mno-mt                 Disable MT ASE (MIPS only)
  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.
  -mno-nvj                Disable generation of new-value jumps
  -mno-nvs                Disable generation of new-value stores
  -mno-outline-atomics    Don't generate local calls to out-of-line atomic operations
  -mno-outline            Disable function outlining (AArch64 only)
  -mno-packets            Disable generation of instruction packets
  -mno-relax              Disable linker relaxation
  -mno-restrict-it        Allow generation of complex IT blocks.
  -mno-save-restore       Disable using library calls for save and restore
  -mno-seses              Disable speculative execution side effect suppression (SESES)
  -mno-stack-arg-probe    Disable stack probes which are enabled by default
  -mno-tgsplit            Disable threadgroup split execution mode (AMDGPU only)
  -mno-tls-direct-seg-refs
                          Disable direct TLS access through segment registers
  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)
  -mno-wavefrontsize64    Specify wavefront size 32 mode (AMDGPU only)
  -mnocrc                 Disallow use of CRC instructions (ARM only)
  -mnop-mcount            Generate mcount/__fentry__ calls as nops. To activate they need to be patched in.
  -mnvj                   Enable generation of new-value jumps
  -mnvs                   Enable generation of new-value stores
  -module-dependency-dir <value>
                          Directory to dump module dependencies to
  -module-file-info       Provide information about a particular module file
  -momit-leaf-frame-pointer
                          Omit frame pointer setup for leaf functions
  -moutline-atomics       Generate local calls to out-of-line atomic operations
  -moutline               Enable function outlining (AArch64 only)
  -mpacked-stack          Use packed stack layout (SystemZ only).
  -mpackets               Enable generation of instruction packets
  -mpad-max-prefix-size=<value>
                          Specify maximum number of prefixes to use for padding
  -mprefer-vector-width=<value>
                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.
  -MP                     Create phony target for each dependency (other than main file)
  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility
  -MQ <value>             Specify name of main file output to quote in depfile
  -mrecord-mcount         Generate a __mcount_loc section entry for each __fentry__ call.
  -mrelax-all             (integrated-as) Relax all machine instructions
  -mrelax                 Enable linker relaxation
  -mrestrict-it           Disallow generation of complex IT blocks.
  -mrtd                   Make StdCall calling convention the default
  -msave-restore          Enable using library calls for save and restore
  -mseses                 Enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations
  -msign-return-address=<value>
                          Select return address signing scope
  -mskip-rax-setup        Skip setting up RAX register when passing variable arguments (x86 only)
  -msmall-data-limit=<value>
                          Put global and static data smaller than the limit into a special section
  -msoft-float            Use software floating point
  -mstack-alignment=<value>
                          Set the stack alignment
  -mstack-arg-probe       Enable stack probes
  -mstack-probe-size=<value>
                          Set the stack probe size
  -mstack-protector-guard-offset=<value>
                          Use the given offset for addressing the stack-protector guard
  -mstack-protector-guard-reg=<value>
                          Use the given reg for addressing the stack-protector guard
  -mstack-protector-guard-symbol=<value>
                          Use the given symbol for addressing the stack-protector guard
  -mstack-protector-guard=<value>
                          Use the given guard (global, tls) for addressing the stack-protector guard
  -mstackrealign          Force realign the stack at entry to every function
  -msve-vector-bits=<value>
                          Specify the size in bits of an SVE vector register. Defaults to the vector length agnostic value of "scalable". (AArch64 only)
  -msvr4-struct-return    Return small structs in registers (PPC32 only)
  -mtargetos=<value>      Set the deployment target to be the specified OS and OS version
  -mtgsplit               Enable threadgroup split execution mode (AMDGPU only)
  -mthread-model <value>  The thread model to use. Defaults to 'posix')
  -mtls-direct-seg-refs   Enable direct TLS access through segment registers (default)
  -mtls-size=<value>      Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)
  -mtp=<value>            Thread pointer access method (AArch32/AArch64 only)
  -mtune=<value>          Only supported on AArch64, PowerPC, RISC-V, SystemZ, and X86
  -MT <value>             Specify name of main file output in depfile
  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)
  -munsafe-fp-atomics     Enable unsafe floating point atomic instructions (AMDGPU only)
  -mvscale-max=<value>    Specify the vscale maximum. Defaults to the vector length agnostic value of "0". (AArch64 only)
  -mvscale-min=<value>    Specify the vscale minimum. Defaults to "1". (AArch64 only)
  -MV                     Use NMake/Jom format for the depfile
  -mwavefrontsize64       Specify wavefront size 64 mode (AMDGPU only)
  -M                      Like -MD, but also implies -E and writes to stdout by default
  --no-cuda-include-ptx=<value>
                          Do not include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.
  --no-default-config     Disable loading default configuration files
  --no-gpu-bundle-output  Do not bundle output files of HIP device compilation
  -no-hip-rt              Do not link against HIP runtime libraries
  --no-offload-arch=<value>
                          Remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. 'all' resets the list to its default value.
  --no-offload-new-driver Don't Use the new driver for offloading compilation.
  --no-system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as not including a system header.
  -nobuiltininc           Disable builtin #include directories
  -nogpuinc               Do not add include paths for CUDA/HIP and do not include the default CUDA/HIP wrapper headers
  -nogpulib               Do not link device library for CUDA/HIP device compilation
  -nohipwrapperinc        Do not include the default HIP wrapper headers and include paths
  -nostdinc++             Disable standard #include directories for the C++ standard library
  -ObjC++                 Treat source input files as Objective-C++ inputs
  -objcmt-allowlist-dir-path=<value>
                          Only modify files with a filename contained in the provided directory path
  -objcmt-atomic-property Make migration to 'atomic' properties
  -objcmt-migrate-all     Enable migration to modern ObjC
  -objcmt-migrate-annotation
                          Enable migration to property and method annotations
  -objcmt-migrate-designated-init
                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods
  -objcmt-migrate-instancetype
                          Enable migration to infer instancetype for method result type
  -objcmt-migrate-literals
                          Enable migration to modern ObjC literals
  -objcmt-migrate-ns-macros
                          Enable migration to NS_ENUM/NS_OPTIONS macros
  -objcmt-migrate-property-dot-syntax
                          Enable migration of setter/getter messages to property-dot syntax
  -objcmt-migrate-property
                          Enable migration to modern ObjC property
  -objcmt-migrate-protocol-conformance
                          Enable migration to add protocol conformance on classes
  -objcmt-migrate-readonly-property
                          Enable migration to modern ObjC readonly property
  -objcmt-migrate-readwrite-property
                          Enable migration to modern ObjC readwrite property
  -objcmt-migrate-subscripting
                          Enable migration to modern ObjC subscripting
  -objcmt-ns-nonatomic-iosonly
                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute
  -objcmt-returns-innerpointer-property
                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER
  -objcmt-whitelist-dir-path=<value>
                          Alias for -objcmt-allowlist-dir-path
  -ObjC                   Treat source input files as Objective-C inputs
  -object-file-name=<file>
                          Set the output <file> for debug infos
  --offload-arch=<value>  CUDA offloading device architecture (e.g. sm_35), or HIP offloading target ID in the form of a device architecture followed by target ID features delimited by a colon. Each target ID feature is a pre-defined string followed by a plus or minus sign (e.g. gfx908:xnack+:sramecc-).  May be specified more than once.
  --offload-device-only   Only compile for the offloading device.
  --offload-host-device   Only compile for the offloading host.
  --offload-host-only     Only compile for the offloading host.
  --offload-link          Use the new offloading linker to perform the link job.
  --offload-new-driver    Use the new driver for offloading compilation.
  --offload=<value>       Specify comma-separated list of offloading target triples (CUDA and HIP only)
  -o <file>               Write output to <file>
  -pedantic               Warn on language extensions
  -pg                     Enable mcount instrumentation
  -pipe                   Use pipes between commands, when possible
  --precompile            Only precompile the input
  -print-diagnostic-options
                          Print all of Clang's warning options
  -print-effective-triple Print the effective target triple
  -print-file-name=<file> Print the full library path of <file>
  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace
  -print-libgcc-file-name Print the library path for the currently used compiler runtime library ("libgcc.a" or "libclang_rt.builtins.*.a")
  -print-prog-name=<name> Print the full program path of <name>
  -print-resource-dir     Print the resource directory pathname
  -print-rocm-search-dirs Print the paths used for finding ROCm installation
  -print-runtime-dir      Print the directory pathname containing clangs runtime libraries
  -print-search-dirs      Print the paths used for finding libraries and programs
  -print-supported-cpus   Print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)
  -print-target-triple    Print the normalized target triple
  -print-targets          Print the registered targets
  -pthread                Support POSIX threads in generated code
  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)
  -P                      Disable linemarker output in -E mode
  -Qn                     Do not emit metadata containing compiler name and version
  -Qunused-arguments      Don't emit warning for unused driver arguments
  -Qy                     Emit metadata containing compiler name and version
  -relocatable-pch        Whether to build a relocatable precompiled header
  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++
  -rewrite-objc           Rewrite Objective-C source to C++
  --rocm-device-lib-path=<value>
                          ROCm device library path. Alternative to rocm-path.
  --rocm-path=<value>     ROCm installation path, used for finding and automatically linking required bitcode libraries.
  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression
  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression
  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression
  -rtlib=<value>          Compiler runtime library to use
  -R<remark>              Enable the specified remark
  -save-stats=<value>     Save llvm statistics.
  -save-stats             Save llvm statistics.
  -save-temps=<value>     Save intermediate compilation results.
  -save-temps             Save intermediate compilation results
  -serialize-diagnostics <value>
                          Serialize compiler diagnostics to a file
  -shared-libsan          Dynamically link the sanitizer runtime
  --start-no-unused-arguments
                          Don't emit warnings about unused arguments for the following arguments
  -static-libsan          Statically link the sanitizer runtime
  -static-openmp          Use the static host OpenMP runtime while linking.
  -std=<value>            Language standard to compile for
  -stdlib++-isystem <directory>
                          Use directory as the C++ standard library include path
  -stdlib=<value>         C++ standard library to use
  -sycl-std=<value>       SYCL language standard to compile for.
  --system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as including a system header.
  -S                      Only run preprocess and compilation steps
  --target=<value>        Generate code for the given target
  -time                   Time individual commands
  -traditional-cpp        Enable some traditional CPP emulation
  -trigraphs              Process trigraph sequences
  -T <script>             Specify <script> as linker script
  -undef                  undef all system defines
  -unwindlib=<value>      Unwind library to use
  -U <macro>              Undefine macro <macro>
  --verify-debug-info     Verify the binary representation of debug output
  -verify-pch             Load and verify that a pre-compiled header file is not stale
  --version               Print version information
  -v                      Show commands to run and use verbose output
  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler
  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED
  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker
  -working-directory <value>
                          Resolve file paths relative to the specified directory
  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor
  -W<warning>             Enable the specified warning
  -w                      Suppress all warnings
  -Xanalyzer <arg>        Pass <arg> to the static analyzer
  -Xarch_device <arg>     Pass <arg> to the CUDA/HIP device compilation
  -Xarch_host <arg>       Pass <arg> to the CUDA/HIP host compilation
  -Xassembler <arg>       Pass <arg> to the assembler
  -Xclang=<arg>           Alias for -Xclang
  -Xclang <arg>           Pass <arg> to clang -cc1
  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation
  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler
  -Xlinker <arg>          Pass <arg> to the linker
  -Xoffload-linker<triple> <arg>
                          Pass <arg> to the offload linkers or the ones idenfied by -<triple>
  -Xopenmp-target=<triple> <arg>
                          Pass <arg> to the target offloading toolchain identified by <triple>.
  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.
  -Xpreprocessor <arg>    Pass <arg> to the preprocessor
  -x <language>           Treat subsequent input files as having type <language>
  -z <arg>                Pass -z <arg> to the linker
Executing: gcc --help | head -n 500
Detected CLANG compiler
Executing: gcc --help | head -n 500
Detected CLANG compiler
          Trying C compiler flag -Wall
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC -Wall   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -fPIC -Wall 

Added C compiler flag -Wall
          Trying C compiler flag -Wwrite-strings
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC -Wall -Wwrite-strings   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -fPIC -Wall -Wwrite-strings 

Added C compiler flag -Wwrite-strings
          Trying C compiler flag -Wno-unknown-pragmas
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas 

Added C compiler flag -Wno-unknown-pragmas
          Trying C compiler flag -Wno-lto-type-mismatch
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -Wno-lto-type-mismatch   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
stdout:
warning: unknown warning option '-Wno-lto-type-mismatch'; did you mean '-Wno-selector-type-mismatch'? [-Wunknown-warning-option]
1 warning generated.
Possible ERROR while running compiler:exit code 0
stderr:
warning: unknown warning option '-Wno-lto-type-mismatch'; did you mean '-Wno-selector-type-mismatch'? [-Wunknown-warning-option]
1 warning generated.
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -Wno-lto-type-mismatch 
warning: unknown warning option '-Wno-lto-type-mismatch'; did you mean '-Wno-selector-type-mismatch'? [-Wunknown-warning-option]
1 warning generated.
              Rejecting compiler flag -Wno-lto-type-mismatch  due to 
warning: unknown warning option '-Wno-lto-type-mismatch'; did you mean '-Wno-selector-type-mismatch'? [-Wunknown-warning-option]
1 warning generated.
          Rejected C compiler flag -Wno-lto-type-mismatch
          Trying C compiler flag -fstack-protector
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector 

Added C compiler flag -fstack-protector
          Trying C compiler flag -fno-stack-check
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check 

Added C compiler flag -fno-stack-check
          Trying C compiler flag -mfp16-format=ieee
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -mfp16-format=ieee   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
stdout: clang: error: unknown argument: '-mfp16-format=ieee'
Possible ERROR while running compiler: exit code 1
stderr:
clang: error: unknown argument: '-mfp16-format=ieee'
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -mfp16-format=ieee 
clang: error: unknown argument: '-mfp16-format=ieee'

PETSc Error: No output file produced
              Rejecting compiler flag -mfp16-format=ieee  due to nonzero status from link
          Rejected C compiler flag -mfp16-format=ieee
          Trying C compiler flag -Qunused-arguments
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments 

Added C compiler flag -Qunused-arguments
          Trying C compiler flag -fvisibility=hidden
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden 

Added C compiler flag -fvisibility=hidden
          Trying C compiler flag -O3 -march=native -mtune=native
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native 

Added C compiler flag -O3 -march=native -mtune=native
Executing: g++ --version
stdout:
Apple clang version 15.0.0 (clang-1500.3.9.4)
Target: arm64-apple-darwin23.4.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
getCompilerVersion: g++ Apple clang version 15.0.0 (clang-1500.3.9.4)
              Defined make macro "Cxx_VERSION" to "Apple clang version 15.0.0 (clang-1500.3.9.4)"
                Defined make macro "MPICXX_SHOW" to "Unavailable"
Executing: g++ --help | head -n 20 
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
stdout: error: write on a pipe with no reader
Executing: g++ --help
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
  -cl-ext=<value>         OpenCL only. Enable or disable OpenCL extensions/optional features. The argument is a comma-separated sequence of one or more extension names, each prefixed by '+' or '-'.
  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.
  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.
  -cl-fp32-correctly-rounded-divide-sqrt
                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.
  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.
  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.
  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.
  -cl-no-stdinc           OpenCL only. Disables all standard includes containing non-native compiler types and functions.
  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.
  -cl-single-precision-constant
                          OpenCL only. Treat double precision floating-point constant as single precision constant.
  -cl-std=<value>         OpenCL language standard to compile for.
  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.
  -cl-uniform-work-group-size
                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel
  -cl-unsafe-math-optimizations
                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.
  --config=<file>         Specify configuration file
  --cuda-compile-host-device
                          Compile CUDA code for both host and device (default). Has no effect on non-CUDA compilations.
  --cuda-device-only      Compile CUDA code for device only
  --cuda-feature=<value>  Manually specify the CUDA feature to use
  --cuda-host-only        Compile CUDA code for host only. Has no effect on non-CUDA compilations.
  --cuda-include-ptx=<value>
                          Include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --cuda-noopt-device-debug
                          Enable device-side debug info generation. Disables ptxas optimizations.
  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation
  --cuda-path=<value>     CUDA installation path
  -cuid=<value>           An ID for compilation unit, which should be the same for the same compilation unit but different for different compilation units. It is used to externalize device-side static variables for single source offloading languages CUDA and HIP so that they can be accessed by the host code of the same compilation unit.
  -cxx-isystem <directory>
                          Add directory to the C++ SYSTEM include search path
  -C                      Include comments in preprocessed output
  -c                      Only run preprocess, compile, and assemble steps
  -darwin-target-variant-triple <value>
                          Specify the darwin target variant triple
  -darwin-target-variant <value>
                          Generate code for an additional runtime variant of the deployment target
  -dD                     Print macro definitions in -E mode in addition to normal output
  -dependency-dot <value> Filename to write DOT-formatted header dependencies to
  -dependency-file <value>
                          Filename (or -) to write dependency output to
  -dI                     Print include directives in -E mode in addition to normal output
  -dM                     Print macro definitions in -E mode instead of normal output
  -dsym-dir <dir>         Directory to output dSYM's (if any) to
  -dump-depscan-tree=<value>
                          emit the CAS identifier for the tree instead of the full -cc1
  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)
  -emit-ast               Emit Clang AST files for source inputs
  -emit-interface-stubs   Generate Interface Stub Files.
  -emit-llvm              Use the LLVM representation for assembler and object files
  -emit-merged-ifs        Generate Interface Stub Files, emit merged text not binary.
  --emit-static-lib       Enable linker job to emit a static library.
  --end-no-unused-arguments
                          Start emitting warnings for unused driver arguments
  --extract-api-ignores=<value>
                          Comma separated list of files containing a new line separated list of API symbols to ignore when extracting API information.
  -extract-api            Extract API information
  -E                      Only run the preprocessor
  -faapcs-bitfield-load   Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).
  -faapcs-bitfield-width  Follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -faddrsig               Emit an address-significance table
  -falign-loops=<N>       N must be a power of two. Align loops to the boundary
  -faligned-allocation    Enable C++17 aligned allocation functions
  -fallow-editor-placeholders
                          Treat editor placeholders as valid source code
  -faltivec-src-compat=<value>
                          Source-level compatibility for Altivec vectors (for PowerPC targets). This includes results of vector comparison (scalar for 'xl', vector for 'gcc') as well as behavior when initializing with a scalar (splatting for 'xl', element zero only for 'gcc'). For 'mixed', the compatibility is as 'gcc' for 'vector bool/vector pixel' and as 'xl' for other types. Current default is 'mixed'.
  -fansi-escape-codes     Use ANSI escape codes for diagnostics
  -fapinotes-cache-path=<directory>
                          Does nothing; API notes are no longer cached separately from modules
  -fapinotes-modules      Enable module-based external API notes support
  -fapinotes-swift-version=<version>
                          Specify the Swift version to use when filtering API notes
  -fapinotes              Enable external API notes support
  -fapple-kext            Use Apple's kernel extensions ABI
  -fapple-link-rtlib      Force linking the clang builtins runtime library
  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling
  -fapplication-extension Restrict code to those available for App Extensions
  -fapprox-func           Allow certain math function calls to be replaced with an approximately equivalent calculation
  -fasync-exceptions      Enable EH Asynchronous exceptions
  -fbasic-block-sections=<value>
                          Place each function's basic blocks in unique sections (ELF Only)
  -fbinutils-version=<major.minor>
                          Produced object files can use all ELF features supported by this binutils version and newer. If -fno-integrated-as is specified, the generated assembly will consider GNU as support. 'none' means that all ELF features can be used, regardless of binutils support. Defaults to 2.26.
  -fblocks                Enable the 'blocks' language feature
  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler
  -fbranch-target-identification
                          Emit branch target identification instructions for indirect branch destinations
  -fbuild-session-file=<file>
                          Use the last modification time of <file> as the build session timestamp
  -fbuild-session-timestamp=<time since Epoch in seconds>
                          Time when the current build session started
  -fbuiltin-module-map    Load the clang builtins module map file.
  -fc++-abi=<value>       C++ ABI to use. This will override the target C++ ABI.
  -fcall-saved-x10        Make the x10 register call-saved (AArch64 only)
  -fcall-saved-x11        Make the x11 register call-saved (AArch64 only)
  -fcall-saved-x12        Make the x12 register call-saved (AArch64 only)
  -fcall-saved-x13        Make the x13 register call-saved (AArch64 only)
  -fcall-saved-x14        Make the x14 register call-saved (AArch64 only)
  -fcall-saved-x15        Make the x15 register call-saved (AArch64 only)
  -fcall-saved-x18        Make the x18 register call-saved (AArch64 only)
  -fcall-saved-x8         Make the x8 register call-saved (AArch64 only)
  -fcall-saved-x9         Make the x9 register call-saved (AArch64 only)
  -fcf-protection=<value> Instrument control-flow architecture protection
  -fcf-protection         Enable cf-protection in 'full' mode
  -fchar8_t               Enable C++ builtin type char8_t
  -fclang-abi-compat=<version>
                          Attempt to match the ABI of Clang <version>
  -fcolor-diagnostics     Enable colors in diagnostics
  -fcomment-block-commands=<arg>
                          Treat each comma separated argument in <arg> as a documentation comment block command
  -fcommon                Place uninitialized global variables in a common block
  -fcomplete-member-pointers
                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fconvergent-functions  Assume functions may be convergent
  -fcoro-aligned-allocation
                          Prefer aligned allocation for C++ Coroutines
  -fcoroutines-ts         Enable support for the C++ Coroutines TS
  -fcoverage-compilation-dir=<value>
                          The compilation directory to embed in the coverage mapping.
  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis
  -fcoverage-prefix-map=<value>
                          remap file source paths in coverage mapping
  -fcrash-diagnostics-dir=<dir>
                          Put crash-report files in <dir>
  -fcrash-diagnostics=<value>
                          Set level of crash diagnostic reporting, (option: off, compiler, all)
  -fcrash-diagnostics     Enable crash diagnostic reporting (default)
  -fcs-profile-generate=<directory>
                          Generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcs-profile-generate   Generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcuda-approx-transcendentals
                          Use approximate transcendental functions
  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces
  -fcxx-exceptions        Enable C++ exceptions
  -fcxx-modules           Enable modules for C++
  -fdata-sections         Place each data in its own section
  -fdebug-compilation-dir=<value>
                          The compilation directory to embed in the debug info
  -fdebug-default-version=<value>
                          Default DWARF version to use, if a -g option caused DWARF debug info to be produced
  -fdebug-info-for-profiling
                          Emit extra debug info to make sample profile more accurate
  -fdebug-macro           Emit macro debug information
  -fdebug-prefix-map=<value>
                          remap file source paths in debug info
  -fdebug-ranges-base-address
                          Use DWARF base address selection entries in .debug_ranges
  -fdebug-types-section   Place debug types in their own section (ELF Only)
  -fdeclspec              Allow __declspec as a keyword
  -fdelayed-template-parsing
                          Parse templated function definitions at the end of the translation unit
  -fdelete-null-pointer-checks
                          Treat usage of null pointers as undefined behavior (default)
  -fdepscan-daemon=<value>
                          Specify the path to the daemon to be used. Clang will use the daemon specified, rather than try to spawn its own based on parent processes.
  -fdepscan-include-tree  Set dep-scanner to produce the include tree
  -fdepscan-prefix-map-sdk=<new>
                          With -fdepscan, auto-detect the SDK path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map-toolchain=<new>
                          With -fdepscan, auto-detect the toolchain path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map=<old>=<new>
                          With -fdepscan, seamlessly filter the CAS filesystem to apply the given prefix, updating the command-line to match.
  -fdepscan-share-identifier <value>
                          Share depscan daemon for Clang invocations using the same string identifier.
  -fdepscan-share-parent=<value>
                          Share state based on the PID of the parent command if the name matches. See also -fdepscan-share-stop.
  -fdepscan-share-parent  Share state based on the PID of the parent command. See also -fdepscan-share-stop.
  -fdepscan-share-stop=<value>
                          Stop looking for the command named by -fdepscan-share if a process with the name of the provided argument is found first. Also blocks -fdepscan-share=parent if the parent has this name. E.g., -fdepscan -fdepscan-share=ninja -fdepscan-share-stop=cmake looks for 'ninja' and 'cmake' in the process tree; if 'ninja' is found first, state is shared based on ninja's PID; if 'cmake' is found first, state is not shared.
  -fdepscan-share=<value> If the argument is the name of a command in the process tree, share state based on its PID. E.g., -fdepscan -fdepscan-share=ninja will search for 'ninja' in the process tree and share state based on its PID if found. See also -fdepscan-share-stop.
  -fdepscan=<value>       Scan for dependencies ahead of compiling, generating a pruned CAS tree to send to -fcas-fs. Values are 'auto', 'daemon' (see -fdepscan-share and -fdepscan-share-parent), 'inline', or 'off' (default).
  -fdepscan               Turn on -fdepscan=auto.
  -fdiagnostics-absolute-paths
                          Print absolute paths in diagnostics
  -fdiagnostics-hotness-threshold=<value>
                          Prevent optimization remarks from being output if they do not have at least this profile count. Use 'auto' to apply the threshold from profile summary
  -fdiagnostics-misexpect-tolerance=<value>
                          Prevent misexpect diagnostics from being output if the profile counts are within N% of the expected. 
  -fdiagnostics-parseable-fixits
                          Print fix-its in machine parseable form
  -fdiagnostics-print-source-range-info
                          Print source range spans in numeric form
  -fdiagnostics-show-hotness
                          Enable profile hotness information in diagnostic line
  -fdiagnostics-show-note-include-stack
                          Display include stacks for diagnostic notes
  -fdiagnostics-show-option
                          Print option name with mappable diagnostics
  -fdiagnostics-show-template-tree
                          Print a template comparison tree for differing templates
  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)
  -fdirect-access-external-data
                          Don't use GOT indirection to reference external data symbols
  -fdiscard-value-names   Discard value names in LLVM IR
  -fdollars-in-identifiers
                          Allow '$' in identifiers
  -fdouble-square-bracket-attributes
                          Enable '[[]]' attributes in all C and C++ language modes
  -fdriver-only           Only run the driver.
  -fdwarf-exceptions      Use DWARF style exceptions
  -feliminate-unused-debug-types
                          Do not emit  debug info for defined but unused types
  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker
  -fembed-bitcode=<option>
                          Embed LLVM bitcode
  -fembed-bitcode         Embed LLVM IR bitcode as data
  -fembed-offload-object=<value>
                          Embed Offloading device-side binary into host object file as a section.
  -femit-all-decls        Emit all declarations, even if unused
  -femit-dwarf-unwind=<value>
                          When to emit DWARF unwind (EH frame) info
  -femulated-tls          Use emutls functions to access thread_local variables
  -fenable-matrix         Enable matrix data type and related builtin functions
  -fexceptions            Enable support for exception handling
  -fexperimental-library  Control whether unstable and experimental library features are enabled. This option enables various library features that are either experimental (also known as TSes), or have been but are not stable yet in the selected Standard Library implementation. It is not recommended to use this option in production code, since neither ABI nor API stability are guaranteed. This is intended to provide a preview of features that will ship in the future for experimentation purposes
  -fexperimental-new-constant-interpreter
                          Enable the experimental new constant interpreter
  -fexperimental-relative-c++-abi-vtables
                          Use the experimental C++ class ABI for classes with virtual tables
  -fexperimental-sanitize-metadata=<value>
                          Specify the type of metadata to emit for binary analysis sanitizers
  -fexperimental-strict-floating-point
                          Enables experimental strict floating point in LLVM.
  -fextend-arguments=<value>
                          Controls how scalar integer arguments are extended in calls to unprototyped and varargs functions
  -ffast-math             Allow aggressive, lossy floating-point optimizations
  -ffile-compilation-dir=<value>
                          The compilation directory to embed in the debug info and coverage mapping.
  -ffile-prefix-map=<value>
                          remap file source paths in debug info, predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -ffile-reproducible     Use the target's platform-specific path separator character when expanding the __FILE__ macro
  -ffine-grained-bitfield-accesses
                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.
  -ffinite-loops          Assume all loops are finite.
  -ffixed-a0              Reserve the a0 register (M68k only)
  -ffixed-a1              Reserve the a1 register (M68k only)
  -ffixed-a2              Reserve the a2 register (M68k only)
  -ffixed-a3              Reserve the a3 register (M68k only)
  -ffixed-a4              Reserve the a4 register (M68k only)
  -ffixed-a5              Reserve the a5 register (M68k only)
  -ffixed-a6              Reserve the a6 register (M68k only)
  -ffixed-d0              Reserve the d0 register (M68k only)
  -ffixed-d1              Reserve the d1 register (M68k only)
  -ffixed-d2              Reserve the d2 register (M68k only)
  -ffixed-d3              Reserve the d3 register (M68k only)
  -ffixed-d4              Reserve the d4 register (M68k only)
  -ffixed-d5              Reserve the d5 register (M68k only)
  -ffixed-d6              Reserve the d6 register (M68k only)
  -ffixed-d7              Reserve the d7 register (M68k only)
  -ffixed-point           Enable fixed point types
  -ffixed-r19             Reserve register r19 (Hexagon only)
  -ffixed-r9              Reserve the r9 register (ARM only)
  -ffixed-x10             Reserve the x10 register (AArch64/RISC-V only)
  -ffixed-x11             Reserve the x11 register (AArch64/RISC-V only)
  -ffixed-x12             Reserve the x12 register (AArch64/RISC-V only)
  -ffixed-x13             Reserve the x13 register (AArch64/RISC-V only)
  -ffixed-x14             Reserve the x14 register (AArch64/RISC-V only)
  -ffixed-x15             Reserve the x15 register (AArch64/RISC-V only)
  -ffixed-x16             Reserve the x16 register (AArch64/RISC-V only)
  -ffixed-x17             Reserve the x17 register (AArch64/RISC-V only)
  -ffixed-x18             Reserve the x18 register (AArch64/RISC-V only)
  -ffixed-x19             Reserve the x19 register (AArch64/RISC-V only)
  -ffixed-x1              Reserve the x1 register (AArch64/RISC-V only)
  -ffixed-x20             Reserve the x20 register (AArch64/RISC-V only)
  -ffixed-x21             Reserve the x21 register (AArch64/RISC-V only)
  -ffixed-x22             Reserve the x22 register (AArch64/RISC-V only)
  -ffixed-x23             Reserve the x23 register (AArch64/RISC-V only)
  -ffixed-x24             Reserve the x24 register (AArch64/RISC-V only)
  -ffixed-x25             Reserve the x25 register (AArch64/RISC-V only)
  -ffixed-x26             Reserve the x26 register (AArch64/RISC-V only)
  -ffixed-x27             Reserve the x27 register (AArch64/RISC-V only)
  -ffixed-x28             Reserve the x28 register (AArch64/RISC-V only)
  -ffixed-x29             Reserve the x29 register (AArch64/RISC-V only)
  -ffixed-x2              Reserve the x2 register (AArch64/RISC-V only)
  -ffixed-x30             Reserve the x30 register (AArch64/RISC-V only)
  -ffixed-x31             Reserve the x31 register (AArch64/RISC-V only)
  -ffixed-x3              Reserve the x3 register (AArch64/RISC-V only)
  -ffixed-x4              Reserve the x4 register (AArch64/RISC-V only)
  -ffixed-x5              Reserve the x5 register (AArch64/RISC-V only)
  -ffixed-x6              Reserve the x6 register (AArch64/RISC-V only)
  -ffixed-x7              Reserve the x7 register (AArch64/RISC-V only)
  -ffixed-x8              Reserve the x8 register (AArch64/RISC-V only)
  -ffixed-x9              Reserve the x9 register (AArch64/RISC-V only)
  -fforce-dwarf-frame     Always emit a debug frame section
  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization
  -fforce-enable-int128   Enable support for int128_t type
  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (fuses across statements disregarding pragmas) | on (only fuses in the same statement unless dictated by pragmas) | off (never fuses) | fast-honor-pragmas (fuses across statements unless diectated by pragmas). Default is 'fast' for CUDA, 'fast-honor-pragmas' for HIP, and 'on' otherwise.
  -ffp-eval-method=<value>
                          Specifies the evaluation method to use for floating-point arithmetic.
  -ffp-exception-behavior=<value>
                          Specifies the exception behavior of floating-point operations.
  -ffp-model=<value>      Controls the semantics of floating-point calculations.
  -ffreestanding          Assert that the compilation takes place in a freestanding environment
  -ffuchsia-api-level=<value>
                          Set Fuchsia API level
  -ffunction-sections     Place each function in its own section
  -fgeneric-block-helpers Use generic block helpers for copying/destroying blocks
  -fglobal-isel           Enables the global instruction selector
  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard
  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime
  -fgnu89-inline          Use the gnu89 inline semantics
  -fgnuc-version=<value>  Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)
  -fgpu-allow-device-init Allow device side init function in HIP (experimental)
  -fgpu-default-stream=<value>
                          Specify default stream. The default value is 'legacy'. (HIP only)
  -fgpu-defer-diag        Defer host/device related diagnostic messages for CUDA/HIP
  -fgpu-flush-denormals-to-zero
                          Flush denormal floating point values to zero in CUDA/HIP device mode.
  -fgpu-rdc               Generate relocatable device code, also known as separate compilation mode
  -fgpu-sanitize          Enable sanitizer for AMDGPU target
  -fhip-fp32-correctly-rounded-divide-sqrt
                          Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fhip-kernel-arg-name   Specify that kernel argument names are preserved (HIP only)
  -fhip-new-launch-api    Use new kernel launching API for HIP
  -fignore-exceptions     Enable support for ignoring exception handling constructs
  -fimplicit-module-maps  Implicitly search the file system for module map files.
  -fin-descriptor-block-flags
                          Emit in-descriptor block flags
  -finline-functions      Inline suitable functions
  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline
  -finline-max-stacksize=<value>
                          Suppress inlining of functions whose stack size exceeds the given value
  -finput-charset=<value> Specify the default character set for source files
  -finstrument-function-entry-bare
                          Instrument function entry only, after inlining, without arguments to the instrumentation call
  -finstrument-functions-after-inlining
                          Like -finstrument-functions, but insert the calls after inlining
  -finstrument-functions  Generate calls to instrument function entry and exit
  -fintegrated-as         Enable the integrated assembler
  -fintegrated-cc1        Run cc1 in-process
  -fintegrated-objemitter Use internal machine object code emitter.
  -fjmc                   Enable just-my-code debugging
  -fjump-tables           Use jump tables for lowering switches
  -fkeep-static-consts    Keep static const variables if unused
  -flax-vector-conversions=<value>
                          Enable implicit vector bit-casts
  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)
  -flto=auto              Enable LTO in 'full' mode
  -flto=jobserver         Enable LTO in 'full' mode
  -flto=<value>           Set LTO mode
  -flto                   Enable LTO in 'full' mode
  -fmacro-prefix-map=<value>
                          remap file source paths in predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -fmath-errno            Require math functions to indicate errors by setting errno
  -fmax-tokens=<value>    Max total number of preprocessed tokens for -Wmax-tokens.
  -fmax-type-align=<value>
                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment
  -fmemory-profile=<directory>
                          Enable heap memory profiling and dump results into <directory>
  -fmemory-profile        Enable heap memory profiling
  -fmerge-all-constants   Allow merging of constants
  -fmessage-length=<value>
                          Format message diagnostics so that they fit within N columns
  -fminimize-whitespace   Minimize whitespace when emitting preprocessor output
  -fmodule-file=[<name>=]<file>
                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.
  -fmodule-header=<kind>  Build a C++20 Header Unit from a header that should be found in the user (fmodule-header=user) or system (fmodule-header=system) search path.
  -fmodule-header         Build a C++20 Header Unit from a header.
  -fmodule-map-file=<file>
                          Load this module map file
  -fmodule-name=<name>    Specify the name of the module to build
  -fmodule-related-to-pch Mark module as related to a PCH
  -fmodules-cache-path=<directory>
                          Specify the module cache path
  -fmodules-decluse       Require declaration of modules used within a module
  -fmodules-disable-diagnostic-validation
                          Disable validation of the diagnostic options when loading the module
  -fmodules-ignore-macro=<value>
                          Ignore the definition of the given macro when building and loading modules
  -fmodules-prune-after=<seconds>
                          Specify the interval (in seconds) after which a module file will be considered unused
  -fmodules-prune-interval=<seconds>
                          Specify the interval (in seconds) between attempts to prune the module cache
  -fmodules-search-all    Search even non-imported modules to resolve references
  -fmodules-strict-decluse
                          Like -fmodules-decluse but requires all headers to be in modules
  -fmodules-ts            Enable support for the C++ Modules TS
  -fmodules-user-build-path <directory>
                          Specify the module user build path
  -fmodules-validate-input-files-content
                          Validate PCM input files based on content if mtime differs
  -fmodules-validate-once-per-build-session
                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session
  -fmodules-validate-system-headers
                          Validate the system headers that a module depends on when loading the module
  -fmodules               Enable the 'modules' language feature
  -fms-compatibility-version=<value>
                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fms-compatibility      Enable full Microsoft Visual C++ compatibility
  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler
  -fms-hotpatch           Ensure that all functions can be hotpatched at runtime
  -fms-runtime-lib=<value>
                          Select Windows run-time library
  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'
  -fnew-infallible        Enable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-aapcs-bitfield-width
                          Do not follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -fno-access-control     Disable C++ access control
  -fno-addrsig            Don't emit an address-significance table
  -fno-apinotes-modules   Disable module-based external API notes support
  -fno-apinotes           Disable external API notes support
  -fno-assume-sane-operator-new
                          Don't assume that C++'s global operator new can't alias any pointer
  -fno-autolink           Disable generation of linker directives for automatic library linking
  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function
  -fno-builtin            Disable implicit builtin knowledge of functions
  -fno-c++-static-destructors
                          Disable C++ static destructor registration
  -fno-char8_t            Disable C++ builtin type char8_t
  -fno-color-diagnostics  Disable colors in diagnostics
  -fno-common             Compile common globals like normal definitions
  -fno-complete-member-pointers
                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings
  -fno-constant-nsarray-literals
                          Disable creation of CodeFoundation-type constant initializer `NSArray`s from array literals
  -fno-constant-nsdictionary-literals
                          Disable creation of CodeFoundation-type constant initializer `NSDictionary`s from dictionary literals
  -fno-constant-nsnumber-literals
                          Disable creation of CodeFoundation-type constant initializer `NSNumber`s from number literals
  -fno-coverage-mapping   Disable code coverage analysis
  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash
  -fno-cuda-approx-transcendentals
                          Don't use approximate transcendental functions
  -fno-cxx-modules        Disable modules for C++
  -fno-debug-macro        Do not emit macro debug information
  -fno-declspec           Disallow __declspec as a keyword
  -fno-delayed-template-parsing
                          Disable delayed template parsing
  -fno-delete-null-pointer-checks
                          Do not treat usage of null pointers as undefined behavior
  -fno-depscan-share      Turn off -fdepscan-share and -fdepscan-share-parent.
  -fno-diagnostics-fixit-info
                          Do not include fixit information in diagnostics
  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'
  -fno-direct-access-external-data
                          Use GOT indirection to reference external data symbols
  -fno-discard-value-names
                          Do not discard value names in LLVM IR
  -fno-dollars-in-identifiers
                          Disallow '$' in identifiers
  -fno-double-square-bracket-attributes
                          Disable '[[]]' attributes in all C and C++ language modes
  -fno-elide-constructors Disable C++ copy constructor elision
  -fno-elide-type         Do not elide types when printing diagnostics
  -fno-eliminate-unused-debug-types
                          Emit  debug info for defined but unused types
  -fno-exceptions         Disable support for exception handling
  -fno-experimental-relative-c++-abi-vtables
                          Do not use the experimental C++ class ABI for classes with virtual tables
  -fno-experimental-sanitize-metadata=<value>
                          Disable emitting metadata for binary analysis sanitizers
  -fno-file-reproducible  Use the host's platform-specific path separator character when expanding the __FILE__ macro
  -fno-fine-grained-bitfield-accesses
                          Use large-integer access for consecutive bitfield runs.
  -fno-finite-loops       Do not assume that any loop is finite.
  -fno-fixed-point        Disable fixed point types
  -fno-force-enable-int128
                          Disable support for int128_t type
  -fno-generic-block-helpers
                          Don't use generic block helpers for copying/destroying blocks
  -fno-global-isel        Disables the global instruction selector
  -fno-gnu-inline-asm     Disable GNU style inline asm
  -fno-gpu-allow-device-init
                          Don't allow device side init function in HIP (experimental)
  -fno-gpu-defer-diag     Don't defer host/device related diagnostic messages for CUDA/HIP
  -fno-hip-fp32-correctly-rounded-divide-sqrt
                          Don't specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fno-hip-kernel-arg-name
                          Don't specify that kernel argument names are preserved (HIP only)
  -fno-hip-new-launch-api Don't use new kernel launching API for HIP
  -fno-in-descriptor-block-flags
                          Don't emit in-descriptor block flags
  -fno-integrated-as      Disable the integrated assembler
  -fno-integrated-cc1     Spawn a separate process for each cc1
  -fno-integrated-objemitter
                          Use external machine object code emitter.
  -fno-jump-tables        Do not use jump tables for lowering switches
  -fno-keep-static-consts Don't keep static const variables if unused
  -fno-knr-functions      Disable support for K&R C function declarations
  -fno-lto                Disable LTO mode (default)
  -fno-memory-profile     Disable heap memory profiling
  -fno-merge-all-constants
                          Disallow merging of constants
  -fno-modules-check-relocated<value>
                          Skip checks for relocated modules when loading PCM files
  -fno-new-infallible     Disable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-objc-infer-related-result-type
                          do not infer Objective-C related result type based on method family
  -fno-offload-lto        Disable LTO mode (default) for offload compilation
  -fno-openmp-extensions  Disable all Clang extensions for OpenMP directives and clauses
  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators
  -fno-optimize-sibling-calls
                          Disable tail call optimization, keeping the call stack accurate
  -fno-pch-codegen        Do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fno-pch-debuginfo      Do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fno-plt                Use GOT indirection instead of PLT to make external function calls (x86 only)
  -fno-preserve-as-comments
                          Do not preserve comments in inline assembly
  -fno-profile-generate   Disable generation of profile instrumentation.
  -fno-profile-instr-generate
                          Disable generation of profile instrumentation.
  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization
  -fno-pseudo-probe-for-profiling
                          Do not emit pseudo probes for sample profiling
  -fno-ptrauth-abi-version
                          Disable Pointer Authentication ABI versioning
  -fno-ptrauth-kernel-abi-version
                          Disable Pointer Authentication kernel ABI versioning
  -fno-register-global-dtors-with-atexit
                          Don't use atexit or __cxa_atexit to register global destructors
  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags
  -fno-rtti-data          Disable generation of RTTI data
  -fno-rtti               Disable generation of rtti information
  -fno-sanitize-address-globals-dead-stripping
                          Disable linker dead stripping of globals in AddressSanitizer
  -fno-sanitize-address-outline-instrumentation
                          Use default code inlining logic for the address sanitizer
  -fno-sanitize-address-poison-custom-array-cookie
                          Disable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fno-sanitize-address-use-after-scope
                          Disable use-after-scope detection in AddressSanitizer
  -fno-sanitize-address-use-odr-indicator
                          Disable ODR indicator globals
  -fno-sanitize-cfi-canonical-jump-tables
                          Do not make the jump table addresses canonical in the symbol table
  -fno-sanitize-cfi-cross-dso
                          Disable control flow integrity (CFI) checks for cross-DSO calls.
  -fno-sanitize-coverage=<value>
                          Disable features of coverage instrumentation for Sanitizers
  -fno-sanitize-hwaddress-experimental-aliasing
                          Disable aliasing mode in HWAddressSanitizer
  -fno-sanitize-ignorelist
                          Don't use ignorelist file for sanitizers
  -fno-sanitize-memory-param-retval
                          Disable detection of uninitialized parameters and return values
  -fno-sanitize-memory-track-origins
                          Disable origins tracking in MemorySanitizer
  -fno-sanitize-memory-use-after-dtor
                          Disable use-after-destroy detection in MemorySanitizer
  -fno-sanitize-recover=<value>
                          Disable recovery for specified sanitizers
  -fno-sanitize-stable-abi
                          Conventional ABI instrumentation for sanitizer runtime. Default: Conventional
  -fno-sanitize-stats     Disable sanitizer statistics gathering.
  -fno-sanitize-thread-atomics
                          Disable atomic operations instrumentation in ThreadSanitizer
  -fno-sanitize-thread-func-entry-exit
                          Disable function entry/exit instrumentation in ThreadSanitizer
  -fno-sanitize-thread-memory-access
                          Disable memory access instrumentation in ThreadSanitizer
  -fno-sanitize-trap=<value>
                          Disable trapping for specified sanitizers
  -fno-sanitize-trap      Disable trapping for all sanitizers
  -fno-short-wchar        Force wchar_t to be an unsigned int
  -fno-show-column        Do not include column number on diagnostics
  -fno-show-source-location
                          Do not include source location information with diagnostics
  -fno-signed-char        char is unsigned
  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros
  -fno-spell-checking     Disable spell-checking
  -fno-split-machine-functions
                          Disable late function splitting using profile information (x86 ELF)
  -fno-split-stack        Wouldn't use segmented stack
  -fno-stack-check        Disable stack checking
  -fno-stack-clash-protection
                          Disable stack clash protection
  -fno-stack-protector    Disable the use of stack protectors
  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary
  -fno-strict-float-cast-overflow
                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions
  -fno-strict-return      Don't treat control flow paths that fall off the end of a non-void function as unreachable
  -fno-sycl               Disables SYCL kernels compilation for device
  -fno-temp-file          Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes
  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe
  -fno-trap-function-returns
                          The trap function specified by -ftrap-function never returns
  -fno-trigraphs          Do not process trigraph sequences
  -fno-typed-cxx-new-delete
                          Disable use of typed variants of C++ new() and delete()
  -fno-typed-memory-operations-experimental
                          Disable Typed Memory Operations call site rewriting
  -fno-unique-section-names
                          Don't use unique names for text and data sections
  -fno-unroll-loops       Turn off loop unroller
  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors
  -fno-use-init-array     Use .ctors/.dtors instead of .init_array/.fini_array
  -fno-visibility-inlines-hidden-static-local-var
                          Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)
  -fno-xray-function-index
                          Omit function index section at the expense of single-function patching performance
  -fno-zero-initialized-in-bss
                          Don't place zero initialized data in BSS
  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc
  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers
  -fobjc-disable-direct-methods-for-testing
                          Ignore attribute objc_direct so that direct methods can be tested
  -fobjc-encode-cxx-class-template-spec
                          Fully encode c++ class template specialization
  -fobjc-exceptions       Enable Objective-C exceptions
  -fobjc-relative-method-lists
                          Enable relative method lists
  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version
  -fobjc-weak             Enable ARC-style weak references in Objective-C
  -foffload-lto=<value>   Set LTO mode for offload compilation
  -foffload-lto           Enable LTO in 'full' mode for offload compilation
  -fopenmp-extensions     Enable all Clang extensions for OpenMP directives and clauses
  -fopenmp-implicit-rpath Set rpath on OpenMP executables
  -fopenmp-offload-mandatory
                          Do not create a host fallback if offloading to the device fails.
  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.
  -fopenmp-target-debug   Enable debugging in the OpenMP offloading device RTL
  -fopenmp-targets=<value>
                          Specify comma-separated list of triples OpenMP offloading targets to be supported
  -fopenmp-version=<value>
                          Set OpenMP version (e.g. 45 for OpenMP 4.5, 50 for OpenMP 5.0). Default value is 50.
  -fopenmp                Parse OpenMP pragmas and generate parallel code.
  -foptimization-record-file=<file>
                          Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.
  -foptimization-record-passes=<regex>
                          Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)
  -forder-file-instrumentation
                          Generate instrumented code to collect order file into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fpack-struct=<value>   Specify the default maximum struct packing alignment
  -fpascal-strings        Recognize and construct Pascal-style string literals
  -fpass-plugin=<dsopath> Load pass plugin from a dynamic shared object file (only with new pass manager).
  -fpatchable-function-entry=<N,M>
                          Generate M NOPs before function entry and N-M NOPs after function entry
  -fpcc-struct-return     Override the default ABI to return all structs on the stack
  -fpch-codegen           Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fpch-debuginfo         Generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fpch-instantiate-templates
                          Instantiate templates already while building a PCH
  -fpch-validate-input-files-content
                          Validate PCH input files based on content if mtime differs
  -fplugin-arg-<name>-<arg>
                          Pass <arg> to plugin <name>
  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)
  -fprebuilt-implicit-modules
                          Look up implicit modules in the prebuilt module path
  -fprebuilt-module-path=<directory>
                          Specify the prebuilt module path
  -fproc-stat-report=<value>
                          Save subprocess statistics to the given file
  -fproc-stat-report<value>
                          Print subprocess statistics
  -fprofile-exclude-files=<value>
                          Instrument only functions from files where names don't match all the regexes separated by a semi-colon
  -fprofile-filter-files=<value>
                          Instrument only functions from files where names match any regex separated by a semi-colon
  -fprofile-function-groups=<N>
                          Partition functions into N groups and select only functions in group i to be instrumented using -fprofile-selected-function-group
  -fprofile-generate=<directory>
                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate=<file>
                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate
                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fprofile-instr-use=<value>
                          Use instrumentation data for profile-guided optimization
  -fprofile-list=<value>  Filename defining the list of functions/files to instrument
  -fprofile-remapping-file=<file>
                          Use the remappings described in <file> to match the profile data against names in the program
  -fprofile-sample-accurate
                          Specifies that the sample profile is accurate
  -fprofile-sample-use=<value>
                          Enable sample-based profile guided optimizations
  -fprofile-selected-function-group=<i>
                          Partition functions into N groups using -fprofile-function-groups and select only functions in group i to be instrumented. The valid range is 0 to N-1 inclusive
  -fprofile-update=<method>
                          Set update method of profile counters
  -fprofile-use=<pathname>
                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.
  -fprotect-parens        Determines whether the optimizer honors parentheses when floating-point expressions are evaluated
  -fpseudo-probe-for-profiling
                          Emit pseudo probes for sample profiling
  -fptrauth-abi-version=<value>
                          Pointer Authentication ABI version
  -fptrauth-auth-traps    Enable traps on authentication failures
  -fptrauth-block-descriptor-pointers
                          enable signing block descriptors
  -fptrauth-calls         Enable signing and authentication of all indirect calls
  -fptrauth-function-pointer-type-discrimination
                          Enabling type discrimination on C function pointers
  -fptrauth-indirect-gotos
                          Enable signing and authentication of indirect goto targets
  -fptrauth-intrinsics    Enable pointer-authentication intrinsics
  -fptrauth-kernel-abi-version
                          Enable Pointer Authentication kernel ABI version
  -fptrauth-objc-class-ro Enable signing and authentication for ObjC class_ro pointers
  -fptrauth-objc-interface-sel
                          Enable signing and authentication of Objective-C object's 'SEL' fields
  -fptrauth-objc-isa-masking
                          pre- and post-authentication masking mode of objective-c isa pointers
  -fptrauth-objc-isa-mode=<value>
                          Authentication mode for ObjC isa field. Full auth if unspecified
  -fptrauth-objc-isa      Enable signing and authentication of Objective-C object's 'isa' field
  -fptrauth-returns       Enable signing and authentication of return addresses
  -fptrauth-soft          Enable software lowering of pointer authentication
  -fptrauth-vtable-pointer-address-discrimination
                          Enable address discrimination of vtable pointers
  -fptrauth-vtable-pointer-type-discrimination
                          Enable type discrimination of vtable pointers
  -frandomize-layout-seed-file=<file>
                          File holding the seed used by the randomize structure layout feature
  -frandomize-layout-seed=<seed>
                          The seed used by the randomize structure layout feature
  -freciprocal-math       Allow division operations to be reassociated
  -freg-struct-return     Override the default ABI to return small structs in registers
  -fregister-global-dtors-with-atexit
                          Use atexit or __cxa_atexit to register global destructors
  -frelaxed-template-template-args
                          Enable C++17 relaxed template template argument matching
  -freroll-loops          Turn on loop reroller
  -fropi                  Generate read-only position independent code (ARM only)
  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags
  -frwpi                  Generate read-write position independent code (ARM only)
  -fsafe-buffer-usage-suggestions
                          Display suggestions to update code associated with -Wunsafe-buffer-usage warnings
  -fsanitize-address-destructor=<value>
                          Set destructor type used in ASan instrumentation
  -fsanitize-address-field-padding=<value>
                          Level of field padding for AddressSanitizer
  -fsanitize-address-globals-dead-stripping
                          Enable linker dead stripping of globals in AddressSanitizer
  -fsanitize-address-outline-instrumentation
                          Always generate function calls for address sanitizer instrumentation
  -fsanitize-address-poison-custom-array-cookie
                          Enable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fsanitize-address-use-after-return=<mode>
                          Select the mode of detecting stack use-after-return in AddressSanitizer
  -fsanitize-address-use-after-scope
                          Enable use-after-scope detection in AddressSanitizer
  -fsanitize-address-use-odr-indicator
                          Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size
  -fsanitize-blacklist=<value>
                          Alias for -fsanitize-ignorelist=
  -fsanitize-cfi-canonical-jump-tables
                          Make the jump table addresses canonical in the symbol table
  -fsanitize-cfi-cross-dso
                          Enable control flow integrity (CFI) checks for cross-DSO calls.
  -fsanitize-cfi-icall-generalize-pointers
                          Generalize pointers in CFI indirect call type signature checks
  -fsanitize-coverage-allowlist=<value>
                          Restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones
  -fsanitize-coverage-ignorelist=<value>
                          Disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones
  -fsanitize-coverage=<value>
                          Specify the type of coverage instrumentation for Sanitizers
  -fsanitize-hwaddress-abi=<value>
                          Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.
  -fsanitize-hwaddress-experimental-aliasing
                          Enable aliasing mode in HWAddressSanitizer
  -fsanitize-ignorelist=<value>
                          Path to ignorelist file for sanitizers
  -fsanitize-memory-param-retval
                          Enable detection of uninitialized parameters and return values
  -fsanitize-memory-track-origins=<value>
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-track-origins
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-use-after-dtor
                          Enable use-after-destroy detection in MemorySanitizer
  -fsanitize-memtag-mode=<value>
                          Set default MTE mode to 'sync' (default) or 'async'
  -fsanitize-recover=<value>
                          Enable recovery for specified sanitizers
  -fsanitize-stable-abi   Stable  ABI instrumentation for sanitizer runtime. Default: Conventional
  -fsanitize-stats        Enable sanitizer statistics gathering.
  -fsanitize-system-blacklist=<value>
                          Alias for -fsanitize-system-ignorelist=
  -fsanitize-system-ignorelist=<value>
                          Path to system ignorelist file for sanitizers
  -fsanitize-thread-atomics
                          Enable atomic operations instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-func-entry-exit
                          Enable function entry/exit instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-memory-access
                          Enable memory access instrumentation in ThreadSanitizer (default)
  -fsanitize-trap=<value> Enable trapping for specified sanitizers
  -fsanitize-trap         Enable trapping for all sanitizers
  -fsanitize-undefined-strip-path-components=<number>
                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.
  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks
  -fsave-optimization-record=<format>
                          Generate an optimization record file in a specific format
  -fsave-optimization-record
                          Generate a YAML optimization record file
  -fseh-exceptions        Use SEH style exceptions
  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values
  -fshort-wchar           Force wchar_t to be a short unsigned int
  -fshow-overloads=<value>
                          Which overload candidates to show when overload resolution fails. Defaults to 'all'
  -fshow-skipped-includes Show skipped includes in -H output.
  -fsigned-char           char is signed
  -fsized-deallocation    Enable C++14 sized global deallocation functions
  -fsjlj-exceptions       Use SjLj style exceptions
  -fslp-vectorize         Enable the superword-level parallelism vectorization passes
  -fsmall-block-descriptors
                          Enable small block descriptors
  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF
  -fsplit-lto-unit        Enables splitting of the LTO unit
  -fsplit-machine-functions
                          Enable late function splitting using profile information (x86 ELF)
  -fsplit-stack           Use segmented stack
  -fstack-check           Enable stack checking
  -fstack-clash-protection
                          Enable stack clash protection
  -fstack-protector-all   Enable stack protectors for all functions
  -fstack-protector-strong
                          Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable
  -fstack-protector       Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca , which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable. A function with a stack protector has a guard value added to the stack frame that is checked on function exit. The guard value must be positioned in the stack frame such that a buffer overflow from a vulnerable variable will overwrite the guard value before overwriting the function's return address. The reference stack guard value is stored in a global variable.
  -fstack-size-section    Emit section containing metadata on function stack sizes
  -fstack-usage           Emit .su file containing information on function stack sizes
  -fstandalone-debug      Emit full debug info for all types used by the program
  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range
  -fstrict-flex-arrays=<n>
                          Enable optimizations based on the strict definition of flexible arrays
  -fstrict-float-cast-overflow
                          Assume that overflowing float-to-int casts are undefined (default)
  -fstrict-vtable-pointers
                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects
  -fsuppress-conflicting-types
                          Ignore errors from conflicting types in function declarations
  -fswift-async-fp=<option>
                          Control emission of Swift async extended frame info
  -fsycl                  Enables SYCL kernels compilation for device
  -fsyntax-only           Run the preprocessor, parser and semantic analysis stages
  -fsystem-module         Build this module as a system module. Only used with -emit-module
  -ftarget-variant-availability-checks
                          Enable availability checks for the target variant platform
  -fthin-link-bitcode=<value>
                          Write minimized bitcode to <file> for the ThinLTO thin link only
  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index
  -ftime-report=<value>   (For new pass manager) 'per-pass': one report for each pass; 'per-pass-run': one report for each pass invocation
  -ftime-trace-granularity=<value>
                          Minimum time granularity (in microseconds) traced by time profiler
  -ftime-trace=<value>    Similar to -ftime-trace. Specify the JSON file or a directory which will contain the JSON file
  -ftime-trace            Turn on time profiler. Generates JSON file based on output filename.
  -ftrap-function-returns The trap function specified by -ftrap-function may return normally
  -ftrap-function=<value> Issue call to specified function rather than a trap instruction
  -ftrapv-handler=<function name>
                          Specify the function to be called on overflow
  -ftrapv                 Trap on integer overflow
  -ftrigraphs             Process trigraph sequences
  -ftrivial-auto-var-init-skip-cpp-obj
                          do not auto-initialize objects initialized by a C++ constructor
  -ftrivial-auto-var-init-skip-non-pod
                          do not auto-initialize non-POD objects
  -ftrivial-auto-var-init-skip-non-ptr-array
                          do not auto-initialize arrays other than arrays of pointers
  -ftrivial-auto-var-init-skip-stl
                          do not auto-initialize variables in STL namespace
  -ftrivial-auto-var-init-stop-after=<value>
                          Stop initializing trivial automatic stack variables after the specified number of instances
  -ftrivial-auto-var-init=<value>
                          Initialize trivial automatic stack variables. Defaults to 'uninitialized'
  -ftrivial-auto-var-zero-init-max-size=<value>
                          Zero initialize only first N bytes of each stack variable; 0 value turns off the limit.
  -ftyped-cxx-new-delete  Enable use of typed variants of C++ new() and delete()
  -ftyped-memory-operations-experimental
                          Enable Typed Memory Operations call site rewriting
  -funique-basic-block-section-names
                          Use unique names for basic block sections (ELF Only)
  -funique-internal-linkage-names
                          Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path
  -funroll-loops          Turn on loop unroller
  -fuse-cuid=<value>      Method to generate ID's for compilation units for single source offloading languages CUDA and HIP: 'hash' (ID's generated by hashing file path and command line options) | 'random' (ID's generated as random numbers) | 'none' (disabled). Default is 'hash'. This option will be overridden by option '-cuid=[ID]' if it is specified.
  -fuse-line-directives   Use #line in preprocessed output
  -fvalidate-ast-input-files-content
                          Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical
  -fveclib=<value>        Use the given vector functions library
  -fvectorize             Enable the loop vectorization passes
  -fverbose-asm           Generate verbose assembly output
  -fvirtual-function-elimination
                          Enables dead virtual function elimination optimization. Requires -flto=full
  -fvisibility-dllexport=<value>
                          The visibility for dllexport definitions [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-dllimport=<value>
                          The visibility for dllimport external declarations [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-nodllstorageclass=<value>
                          The visibility for external declarations without an explicit DLL dllstorageclass [-fvisibility-from-dllstorageclass]
  -fvisibility-from-dllstorageclass
                          Set the visibility of symbols in the generated code from their DLL storage class
  -fvisibility-global-new-delete-hidden
                          Give global C++ operator new and delete declarations hidden visibility
  -fvisibility-inlines-hidden-static-local-var
                          When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default
  -fvisibility-inlines-hidden
                          Give inline C++ member functions hidden visibility by default
  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default
  -fvisibility-nodllstorageclass=<value>
                          The visibility for definitions without an explicit DLL export class [-fvisibility-from-dllstorageclass]
  -fvisibility=<value>    Set the default symbol visibility for all global definitions
  -fwasm-exceptions       Use WebAssembly style exceptions
  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto
  -fwrapv                 Treat signed integer overflow as two's complement
  -fwritable-strings      Store string literals as writable data
  -fxl-pragma-pack        Enable IBM XL #pragma pack handling
  -fxray-always-emit-customevents
                          Always emit __xray_customevent(...) calls even if the containing function is not always instrumented
  -fxray-always-emit-typedevents
                          Always emit __xray_typedevent(...) calls even if the containing function is not always instrumented
  -fxray-always-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.
  -fxray-attr-list=<value>
                          Filename defining the list of functions/types for imbuing XRay attributes.
  -fxray-function-groups=<value>
                          Only instrument 1 of N groups
  -fxray-ignore-loops     Don't instrument functions with loops unless they also meet the minimum function size
  -fxray-instruction-threshold=<value>
                          Sets the minimum function size to instrument with XRay
  -fxray-instrumentation-bundle=<value>
                          Select which XRay instrumentation points to emit. Options: all, none, function-entry, function-exit, function, custom. Default is 'all'.  'function' includes both 'function-entry' and 'function-exit'.
  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit
  -fxray-link-deps        Tells clang to add the link dependencies for XRay.
  -fxray-modes=<value>    List of modes to link in by default into XRay instrumented binaries.
  -fxray-never-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.
  -fxray-selected-function-group=<value>
                          When using -fxray-function-groups, select which group of functions to instrument. Valid range is 0 to fxray-function-groups - 1
  -fzero-call-used-regs=<value>
                          Clear call-used registers upon function return (AArch64/x86 only)
  -fzvector               Enable System z vector language extension
  -F <value>              Add directory to framework include search path
  --gcc-install-dir=<value>
                          Use GCC installation in the specified directory. The directory ends with path components like 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Note: executables (e.g. ld) used by the compiler are not overridden by the selected GCC installation
  --gcc-toolchain=<value> Specify a directory where Clang can find 'include' and 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Clang will use the GCC installation with the largest version
  -gcodeview-ghash        Emit type record hashes in a .debug$H section
  -gcodeview              Generate CodeView debug information
  -gdwarf-2               Generate source-level debug information with dwarf version 2
  -gdwarf-3               Generate source-level debug information with dwarf version 3
  -gdwarf-4               Generate source-level debug information with dwarf version 4
  -gdwarf-5               Generate source-level debug information with dwarf version 5
  -gdwarf32               Enables DWARF32 format for ELF binaries, if debug information emission is enabled.
  -gdwarf64               Enables DWARF64 format for ELF binaries, if debug information emission is enabled.
  -gdwarf                 Generate source-level debug information with the default dwarf version
  -gembed-source          Embed source text in DWARF debug sections
  -gen-reproducer=<value> Emit reproducer on (option: off, crash (default), error, always)
  -gline-directives-only  Emit debug line info directives only
  -gline-tables-only      Emit debug line number tables only
  -gmodules               Generate debug info with external references to clang modules or precompiled headers
  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections
  -gno-inline-line-tables Don't emit inline line tables.
  --gpu-bundle-output     Bundle output files of HIP device compilation
  --gpu-instrument-lib=<value>
                          Instrument device library for HIP, which is a LLVM bitcode containing __cyg_profile_func_enter and __cyg_profile_func_exit
  --gpu-max-threads-per-block=<value>
                          Default max threads per block for kernel launch bounds for HIP
  -greproducible          Tune debug info to be reproducible.
  -gsplit-dwarf=<value>   Set DWARF fission mode
  -gz=<value>             DWARF debug sections compression type
  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)
  -g                      Generate source-level debug information
  --help-hidden           Display help for hidden options
  -help                   Display available options
  --hip-device-lib=<value>
                          HIP device library
  --hip-link              Link clang-offload-bundler bundles for HIP
  --hip-path=<value>      HIP runtime installation path, used for finding HIP version and adding HIP include path.
  --hip-version=<value>   HIP version in the format of major.minor.patch
  --hipspv-pass-plugin=<dsopath>
                          path to a pass plugin for HIP to SPIR-V passes.
  -H                      Show header includes and nesting depth
  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path
  -iapinotes-modules <directory>
                          Add directory to the API notes search path referenced by module name
  -iapinotes-path <file>  Include API notes file
  -ibuiltininc            Enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it
  -idirafter <value>      Add directory to AFTER include search path
  -iframeworkwithsysroot <directory>
                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot
  -iframework <value>     Add directory to SYSTEM framework search path
  -imacros <file>         Include macros from file before parsing
  -include-pch <file>     Include precompiled header file
  -include <file>         Include file before parsing
  -index-header-map       Make the next included directory (-I or -F) an indexer header map
  -index-ignore-macros    Ignore macros during indexing
  -index-ignore-pcms      Ignore symbols from imported pcm modules
  -index-ignore-system-symbols
                          Ignore symbols from system headers
  -index-record-codegen-name
                          Record the codegen name for symbols
  -index-store-path <value>
                          Enable indexing with the specified data store path
  -index-unit-output-path <path>
                          Use <path> as the output path for this compilation unit in the index unit file
  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix
  -iquote <directory>     Add directory to QUOTE include search path
  -isysroot <dir>         Set the system root directory (usually /)
  -isystem-after <directory>
                          Add directory to end of the SYSTEM include search path
  -isystem <directory>    Add directory to SYSTEM include search path
  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system
  -ivfsstatcache <value>  Use the stat data cached in file instead of doing filesystem syscalls. See clang-stat-cache utility.
  -iwithprefixbefore <dir>
                          Set directory to include search path with prefix
  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix
  -iwithsysroot <directory>
                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot
  -I <dir>                Add directory to the end of the list of include search paths
  --libomptarget-amdgcn-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-amdgpu-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-nvptx-bc-path=<value>
                          Path to libomptarget-nvptx bitcode library
  -L <dir>                Add directory to library search path
  -mabi=quadword-atomics  Enable quadword atomics ABI on AIX (AIX PPC64 only). Uses lqarx/stqcx. instructions.
  -mabi=vec-default       Enable the default Altivec ABI on AIX (AIX only). Uses only volatile vector registers.
  -mabi=vec-extabi        Enable the extended Altivec ABI on AIX (AIX only). Uses volatile and nonvolatile vector registers
  -mabicalls              Enable SVR4-style position-independent code (Mips only)
  -maix-struct-return     Return all structs in memory (PPC32 only)
  -malign-branch-boundary=<value>
                          Specify the boundary's size to align branches
  -malign-branch=<value>  Specify types of branches to align
  -malign-double          Align doubles to two words in structs (x86 only)
  -mamdgpu-ieee           Sets the IEEE bit in the expected default floating point  mode register. Floating point opcodes that support exception flag gathering quiet and propagate signaling NaN inputs per IEEE 754-2008. This option changes the ABI. (AMDGPU only)
  -mbackchain             Link stack frames through backchain on System Z
  -mbranch-protection=<value>
                          Enforce targets of indirect branches and function returns
  -mbranches-within-32B-boundaries
                          Align selected branches (fused, jcc, jmp) within 32-byte boundary
  -mcmodel=medany         Equivalent to -mcmodel=medium, compatible with RISC-V gcc.
  -mcmodel=medlow         Equivalent to -mcmodel=small, compatible with RISC-V gcc.
  -mcmse                  Allow use of CMSE (Armv8-M Security Extensions)
  -mcode-object-v3        Legacy option to specify code object ABI V3 (AMDGPU only)
  -mcode-object-version=<value>
                          Specify code object ABI version. Defaults to 4. (AMDGPU only)
  -mcrc                   Allow use of CRC instructions (ARM/Mips only)
  -mcumode                Specify CU wavefront execution mode (AMDGPU only)
  -mdefault-visibility-export-mapping=<value>
                          Mapping between default visibility and export
  -mdouble=<n             Force double to be <n> bits
  -MD                     Write a depfile containing user and system headers
  -meabi <value>          Set EABI type. Default depends on triple)
  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)
  -menable-experimental-extensions
                          Enable use of experimental RISC-V extensions.
  -menable-unsafe-fp-math Allow unsafe floating-point math optimizations which may decrease precision
  -mexec-model=<value>    Execution model (WebAssembly only)
  -mexecute-only          Disallow generation of data access to code sections (ARM only)
  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mfentry                Insert calls to fentry at function entry (x86/SystemZ only)
  -mfix-cmse-cve-2021-35465
                          Work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mfix-cortex-a57-aes-1742098
                          Work around Cortex-A57 Erratum 1742098 (ARM only)
  -mfix-cortex-a72-aes-1655431
                          Work around Cortex-A72 Erratum 1655431 (ARM only)
  -mfp32                  Use 32-bit floating point registers (MIPS only)
  -mfp64                  Use 64-bit floating point registers (MIPS only)
  -mframe-chain=<value>   Select the frame chain model used to emit frame records (Arm only).
  -mfunction-return=<value>
                          Replace returns with jumps to ``__x86_return_thunk`` (x86 only, error otherwise)
  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>
  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64/x86 only)
  -mglobal-merge          Enable merging of globals
  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mguard=<value>         Enable or disable Control Flow Guard checks and guard tables emission
  -MG                     Add missing headers to depfile
  -mharden-sls=<value>    Select straight-line speculation hardening scope (ARM/AArch64/X86 only). <arg> must be: all, none, retbr(ARM/AArch64), blr(ARM/AArch64), comdat(ARM/AArch64), nocomdat(ARM/AArch64), return(X86), indirect-jmp(X86)
  -mhvx-ieee-fp           Enable Hexagon HVX IEEE floating-point
  -mhvx-length=<value>    Set Hexagon Vector Length
  -mhvx-qfloat            Enable Hexagon HVX QFloat instructions
  -mhvx=<value>           Enable Hexagon Vector eXtensions
  -mhvx                   Enable Hexagon Vector eXtensions
  -miamcu                 Use Intel MCU ABI
  -mibt-seal              Optimize fcf-protection=branch/full (requires LTO).
  -mignore-xcoff-visibility
                          Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspecified' visibility in XCOFF object file
  --migrate               Run the migrator
  -mincremental-linker-compatible
                          (integrated-as) Emit an object file which can be used with an incremental linker
  -mindirect-branch-cs-prefix
                          Add cs prefix to call and jmp to indirect thunk
  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation
  -mios-version-min=<value>
                          Set iOS deployment target
  -MJ <value>             Write a compilation database entry per input
  -mllvm <value>          Additional arguments to forward to LLVM's option processing
  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)
  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.
  -mlong-double-128       Force long double to be 128 bits
  -mlong-double-64        Force long double to be 64 bits
  -mlong-double-80        Force long double to be 80 bits, padded to 128 bits for storage
  -mlvi-cfi               Enable only control-flow mitigations for Load Value Injection (LVI)
  -mlvi-hardening         Enable all mitigations for Load Value Injection (LVI)
  -mmacos-version-min=<value>
                          Set macOS deployment target
  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.
  -mmark-bti-property     Add .note.gnu.property with BTI to assembly files (AArch64 only)
  -MMD                    Write a depfile containing user headers
  -mmemops                Enable generation of memop instructions
  -mmlir <value>          Additional arguments to forward to MLIR's option processing
  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard
  -mmsa                   Enable MSA ASE (MIPS only)
  -mmt                    Enable MT ASE (MIPS only)
  -MM                     Like -MMD, but also implies -E and writes to stdout by default
  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)
  -mno-bti-at-return-twice
                          Do not add a BTI instruction after a setjmp or other return-twice construct (Arm/AArch64 only)
  -mno-code-object-v3     Legacy option to specify code object ABI V2 (AMDGPU only)
  -mno-crc                Disallow use of CRC instructions (Mips only)
  -mno-cumode             Specify WGP wavefront execution mode (AMDGPU only)
  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)
  -mno-execute-only       Allow generation of data access to code sections (ARM only)
  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mno-fix-cmse-cve-2021-35465
                          Don't work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mno-fix-cortex-a53-835769
                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mno-fix-cortex-a57-aes-1742098
                          Don't work around Cortex-A57 Erratum 1742098 (ARM only)
  -mno-fix-cortex-a72-aes-1655431
                          Don't work around Cortex-A72 Erratum 1655431 (ARM only)
  -mno-global-merge       Disable merging of globals
  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mno-hvx-ieee-fp        Disable Hexagon HVX IEEE floating-point
  -mno-hvx-qfloat         Disable Hexagon HVX QFloat instructions
  -mno-hvx                Disable Hexagon Vector eXtensions
  -mno-implicit-float     Don't generate implicit floating point instructions
  -mno-implicit-sme       Don't generate implicit SME instructions or mode switches
  -mno-incremental-linker-compatible
                          (integrated-as) Emit an object file which cannot be used with an incremental linker
  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)
  -mno-long-calls         Restore the default behaviour of not generating long calls
  -mno-lvi-cfi            Disable control-flow mitigations for Load Value Injection (LVI)
  -mno-lvi-hardening      Disable mitigations for Load Value Injection (LVI)
  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.
  -mno-memops             Disable generation of memop instructions
  -mno-movt               Disallow use of movt/movw pairs (ARM only)
  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard
  -mno-msa                Disable MSA ASE (MIPS only)
  -mno-mt                 Disable MT ASE (MIPS only)
  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.
  -mno-nvj                Disable generation of new-value jumps
  -mno-nvs                Disable generation of new-value stores
  -mno-outline-atomics    Don't generate local calls to out-of-line atomic operations
  -mno-outline            Disable function outlining (AArch64 only)
  -mno-packets            Disable generation of instruction packets
  -mno-relax              Disable linker relaxation
  -mno-restrict-it        Allow generation of complex IT blocks.
  -mno-save-restore       Disable using library calls for save and restore
  -mno-seses              Disable speculative execution side effect suppression (SESES)
  -mno-stack-arg-probe    Disable stack probes which are enabled by default
  -mno-tgsplit            Disable threadgroup split execution mode (AMDGPU only)
  -mno-tls-direct-seg-refs
                          Disable direct TLS access through segment registers
  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)
  -mno-wavefrontsize64    Specify wavefront size 32 mode (AMDGPU only)
  -mnocrc                 Disallow use of CRC instructions (ARM only)
  -mnop-mcount            Generate mcount/__fentry__ calls as nops. To activate they need to be patched in.
  -mnvj                   Enable generation of new-value jumps
  -mnvs                   Enable generation of new-value stores
  -module-dependency-dir <value>
                          Directory to dump module dependencies to
  -module-file-info       Provide information about a particular module file
  -momit-leaf-frame-pointer
                          Omit frame pointer setup for leaf functions
  -moutline-atomics       Generate local calls to out-of-line atomic operations
  -moutline               Enable function outlining (AArch64 only)
  -mpacked-stack          Use packed stack layout (SystemZ only).
  -mpackets               Enable generation of instruction packets
  -mpad-max-prefix-size=<value>
                          Specify maximum number of prefixes to use for padding
  -mprefer-vector-width=<value>
                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.
  -MP                     Create phony target for each dependency (other than main file)
  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility
  -MQ <value>             Specify name of main file output to quote in depfile
  -mrecord-mcount         Generate a __mcount_loc section entry for each __fentry__ call.
  -mrelax-all             (integrated-as) Relax all machine instructions
  -mrelax                 Enable linker relaxation
  -mrestrict-it           Disallow generation of complex IT blocks.
  -mrtd                   Make StdCall calling convention the default
  -msave-restore          Enable using library calls for save and restore
  -mseses                 Enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations
  -msign-return-address=<value>
                          Select return address signing scope
  -mskip-rax-setup        Skip setting up RAX register when passing variable arguments (x86 only)
  -msmall-data-limit=<value>
                          Put global and static data smaller than the limit into a special section
  -msoft-float            Use software floating point
  -mstack-alignment=<value>
                          Set the stack alignment
  -mstack-arg-probe       Enable stack probes
  -mstack-probe-size=<value>
                          Set the stack probe size
  -mstack-protector-guard-offset=<value>
                          Use the given offset for addressing the stack-protector guard
  -mstack-protector-guard-reg=<value>
                          Use the given reg for addressing the stack-protector guard
  -mstack-protector-guard-symbol=<value>
                          Use the given symbol for addressing the stack-protector guard
  -mstack-protector-guard=<value>
                          Use the given guard (global, tls) for addressing the stack-protector guard
  -mstackrealign          Force realign the stack at entry to every function
  -msve-vector-bits=<value>
                          Specify the size in bits of an SVE vector register. Defaults to the vector length agnostic value of "scalable". (AArch64 only)
  -msvr4-struct-return    Return small structs in registers (PPC32 only)
  -mtargetos=<value>      Set the deployment target to be the specified OS and OS version
  -mtgsplit               Enable threadgroup split execution mode (AMDGPU only)
  -mthread-model <value>  The thread model to use. Defaults to 'posix')
  -mtls-direct-seg-refs   Enable direct TLS access through segment registers (default)
  -mtls-size=<value>      Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)
  -mtp=<value>            Thread pointer access method (AArch32/AArch64 only)
  -mtune=<value>          Only supported on AArch64, PowerPC, RISC-V, SystemZ, and X86
  -MT <value>             Specify name of main file output in depfile
  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)
  -munsafe-fp-atomics     Enable unsafe floating point atomic instructions (AMDGPU only)
  -mvscale-max=<value>    Specify the vscale maximum. Defaults to the vector length agnostic value of "0". (AArch64 only)
  -mvscale-min=<value>    Specify the vscale minimum. Defaults to "1". (AArch64 only)
  -MV                     Use NMake/Jom format for the depfile
  -mwavefrontsize64       Specify wavefront size 64 mode (AMDGPU only)
  -M                      Like -MD, but also implies -E and writes to stdout by default
  --no-cuda-include-ptx=<value>
                          Do not include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.
  --no-default-config     Disable loading default configuration files
  --no-gpu-bundle-output  Do not bundle output files of HIP device compilation
  -no-hip-rt              Do not link against HIP runtime libraries
  --no-offload-arch=<value>
                          Remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. 'all' resets the list to its default value.
  --no-offload-new-driver Don't Use the new driver for offloading compilation.
  --no-system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as not including a system header.
  -nobuiltininc           Disable builtin #include directories
  -nogpuinc               Do not add include paths for CUDA/HIP and do not include the default CUDA/HIP wrapper headers
  -nogpulib               Do not link device library for CUDA/HIP device compilation
  -nohipwrapperinc        Do not include the default HIP wrapper headers and include paths
  -nostdinc++             Disable standard #include directories for the C++ standard library
  -ObjC++                 Treat source input files as Objective-C++ inputs
  -objcmt-allowlist-dir-path=<value>
                          Only modify files with a filename contained in the provided directory path
  -objcmt-atomic-property Make migration to 'atomic' properties
  -objcmt-migrate-all     Enable migration to modern ObjC
  -objcmt-migrate-annotation
                          Enable migration to property and method annotations
  -objcmt-migrate-designated-init
                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods
  -objcmt-migrate-instancetype
                          Enable migration to infer instancetype for method result type
  -objcmt-migrate-literals
                          Enable migration to modern ObjC literals
  -objcmt-migrate-ns-macros
                          Enable migration to NS_ENUM/NS_OPTIONS macros
  -objcmt-migrate-property-dot-syntax
                          Enable migration of setter/getter messages to property-dot syntax
  -objcmt-migrate-property
                          Enable migration to modern ObjC property
  -objcmt-migrate-protocol-conformance
                          Enable migration to add protocol conformance on classes
  -objcmt-migrate-readonly-property
                          Enable migration to modern ObjC readonly property
  -objcmt-migrate-readwrite-property
                          Enable migration to modern ObjC readwrite property
  -objcmt-migrate-subscripting
                          Enable migration to modern ObjC subscripting
  -objcmt-ns-nonatomic-iosonly
                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute
  -objcmt-returns-innerpointer-property
                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER
  -objcmt-whitelist-dir-path=<value>
                          Alias for -objcmt-allowlist-dir-path
  -ObjC                   Treat source input files as Objective-C inputs
  -object-file-name=<file>
                          Set the output <file> for debug infos
  --offload-arch=<value>  CUDA offloading device architecture (e.g. sm_35), or HIP offloading target ID in the form of a device architecture followed by target ID features delimited by a colon. Each target ID feature is a pre-defined string followed by a plus or minus sign (e.g. gfx908:xnack+:sramecc-).  May be specified more than once.
  --offload-device-only   Only compile for the offloading device.
  --offload-host-device   Only compile for the offloading host.
  --offload-host-only     Only compile for the offloading host.
  --offload-link          Use the new offloading linker to perform the link job.
  --offload-new-driver    Use the new driver for offloading compilation.
  --offload=<value>       Specify comma-separated list of offloading target triples (CUDA and HIP only)
  -o <file>               Write output to <file>
  -pedantic               Warn on language extensions
  -pg                     Enable mcount instrumentation
  -pipe                   Use pipes between commands, when possible
  --precompile            Only precompile the input
  -print-diagnostic-options
                          Print all of Clang's warning options
  -print-effective-triple Print the effective target triple
  -print-file-name=<file> Print the full library path of <file>
  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace
  -print-libgcc-file-name Print the library path for the currently used compiler runtime library ("libgcc.a" or "libclang_rt.builtins.*.a")
  -print-prog-name=<name> Print the full program path of <name>
  -print-resource-dir     Print the resource directory pathname
  -print-rocm-search-dirs Print the paths used for finding ROCm installation
  -print-runtime-dir      Print the directory pathname containing clangs runtime libraries
  -print-search-dirs      Print the paths used for finding libraries and programs
  -print-supported-cpus   Print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)
  -print-target-triple    Print the normalized target triple
  -print-targets          Print the registered targets
  -pthread                Support POSIX threads in generated code
  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)
  -P                      Disable linemarker output in -E mode
  -Qn                     Do not emit metadata containing compiler name and version
  -Qunused-arguments      Don't emit warning for unused driver arguments
  -Qy                     Emit metadata containing compiler name and version
  -relocatable-pch        Whether to build a relocatable precompiled header
  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++
  -rewrite-objc           Rewrite Objective-C source to C++
  --rocm-device-lib-path=<value>
                          ROCm device library path. Alternative to rocm-path.
  --rocm-path=<value>     ROCm installation path, used for finding and automatically linking required bitcode libraries.
  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression
  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression
  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression
  -rtlib=<value>          Compiler runtime library to use
  -R<remark>              Enable the specified remark
  -save-stats=<value>     Save llvm statistics.
  -save-stats             Save llvm statistics.
  -save-temps=<value>     Save intermediate compilation results.
  -save-temps             Save intermediate compilation results
  -serialize-diagnostics <value>
                          Serialize compiler diagnostics to a file
  -shared-libsan          Dynamically link the sanitizer runtime
  --start-no-unused-arguments
                          Don't emit warnings about unused arguments for the following arguments
  -static-libsan          Statically link the sanitizer runtime
  -static-openmp          Use the static host OpenMP runtime while linking.
  -std=<value>            Language standard to compile for
  -stdlib++-isystem <directory>
                          Use directory as the C++ standard library include path
  -stdlib=<value>         C++ standard library to use
  -sycl-std=<value>       SYCL language standard to compile for.
  --system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as including a system header.
  -S                      Only run preprocess and compilation steps
  --target=<value>        Generate code for the given target
  -time                   Time individual commands
  -traditional-cpp        Enable some traditional CPP emulation
  -trigraphs              Process trigraph sequences
  -T <script>             Specify <script> as linker script
  -undef                  undef all system defines
  -unwindlib=<value>      Unwind library to use
  -U <macro>              Undefine macro <macro>
  --verify-debug-info     Verify the binary representation of debug output
  -verify-pch             Load and verify that a pre-compiled header file is not stale
  --version               Print version information
  -v                      Show commands to run and use verbose output
  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler
  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED
  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker
  -working-directory <value>
                          Resolve file paths relative to the specified directory
  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor
  -W<warning>             Enable the specified warning
  -w                      Suppress all warnings
  -Xanalyzer <arg>        Pass <arg> to the static analyzer
  -Xarch_device <arg>     Pass <arg> to the CUDA/HIP device compilation
  -Xarch_host <arg>       Pass <arg> to the CUDA/HIP host compilation
  -Xassembler <arg>       Pass <arg> to the assembler
  -Xclang=<arg>           Alias for -Xclang
  -Xclang <arg>           Pass <arg> to clang -cc1
  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation
  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler
  -Xlinker <arg>          Pass <arg> to the linker
  -Xoffload-linker<triple> <arg>
                          Pass <arg> to the offload linkers or the ones idenfied by -<triple>
  -Xopenmp-target=<triple> <arg>
                          Pass <arg> to the target offloading toolchain identified by <triple>.
  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.
  -Xpreprocessor <arg>    Pass <arg> to the preprocessor
  -x <language>           Treat subsequent input files as having type <language>
  -z <arg>                Pass -z <arg> to the linker
Executing: g++ --help | head -n 500
Detected CLANG compiler
Executing: g++ --help | head -n 20 
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
stdout: error: write on a pipe with no reader
Executing: g++ --help
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
  -cl-ext=<value>         OpenCL only. Enable or disable OpenCL extensions/optional features. The argument is a comma-separated sequence of one or more extension names, each prefixed by '+' or '-'.
  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.
  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.
  -cl-fp32-correctly-rounded-divide-sqrt
                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.
  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.
  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.
  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.
  -cl-no-stdinc           OpenCL only. Disables all standard includes containing non-native compiler types and functions.
  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.
  -cl-single-precision-constant
                          OpenCL only. Treat double precision floating-point constant as single precision constant.
  -cl-std=<value>         OpenCL language standard to compile for.
  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.
  -cl-uniform-work-group-size
                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel
  -cl-unsafe-math-optimizations
                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.
  --config=<file>         Specify configuration file
  --cuda-compile-host-device
                          Compile CUDA code for both host and device (default). Has no effect on non-CUDA compilations.
  --cuda-device-only      Compile CUDA code for device only
  --cuda-feature=<value>  Manually specify the CUDA feature to use
  --cuda-host-only        Compile CUDA code for host only. Has no effect on non-CUDA compilations.
  --cuda-include-ptx=<value>
                          Include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --cuda-noopt-device-debug
                          Enable device-side debug info generation. Disables ptxas optimizations.
  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation
  --cuda-path=<value>     CUDA installation path
  -cuid=<value>           An ID for compilation unit, which should be the same for the same compilation unit but different for different compilation units. It is used to externalize device-side static variables for single source offloading languages CUDA and HIP so that they can be accessed by the host code of the same compilation unit.
  -cxx-isystem <directory>
                          Add directory to the C++ SYSTEM include search path
  -C                      Include comments in preprocessed output
  -c                      Only run preprocess, compile, and assemble steps
  -darwin-target-variant-triple <value>
                          Specify the darwin target variant triple
  -darwin-target-variant <value>
                          Generate code for an additional runtime variant of the deployment target
  -dD                     Print macro definitions in -E mode in addition to normal output
  -dependency-dot <value> Filename to write DOT-formatted header dependencies to
  -dependency-file <value>
                          Filename (or -) to write dependency output to
  -dI                     Print include directives in -E mode in addition to normal output
  -dM                     Print macro definitions in -E mode instead of normal output
  -dsym-dir <dir>         Directory to output dSYM's (if any) to
  -dump-depscan-tree=<value>
                          emit the CAS identifier for the tree instead of the full -cc1
  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)
  -emit-ast               Emit Clang AST files for source inputs
  -emit-interface-stubs   Generate Interface Stub Files.
  -emit-llvm              Use the LLVM representation for assembler and object files
  -emit-merged-ifs        Generate Interface Stub Files, emit merged text not binary.
  --emit-static-lib       Enable linker job to emit a static library.
  --end-no-unused-arguments
                          Start emitting warnings for unused driver arguments
  --extract-api-ignores=<value>
                          Comma separated list of files containing a new line separated list of API symbols to ignore when extracting API information.
  -extract-api            Extract API information
  -E                      Only run the preprocessor
  -faapcs-bitfield-load   Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).
  -faapcs-bitfield-width  Follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -faddrsig               Emit an address-significance table
  -falign-loops=<N>       N must be a power of two. Align loops to the boundary
  -faligned-allocation    Enable C++17 aligned allocation functions
  -fallow-editor-placeholders
                          Treat editor placeholders as valid source code
  -faltivec-src-compat=<value>
                          Source-level compatibility for Altivec vectors (for PowerPC targets). This includes results of vector comparison (scalar for 'xl', vector for 'gcc') as well as behavior when initializing with a scalar (splatting for 'xl', element zero only for 'gcc'). For 'mixed', the compatibility is as 'gcc' for 'vector bool/vector pixel' and as 'xl' for other types. Current default is 'mixed'.
  -fansi-escape-codes     Use ANSI escape codes for diagnostics
  -fapinotes-cache-path=<directory>
                          Does nothing; API notes are no longer cached separately from modules
  -fapinotes-modules      Enable module-based external API notes support
  -fapinotes-swift-version=<version>
                          Specify the Swift version to use when filtering API notes
  -fapinotes              Enable external API notes support
  -fapple-kext            Use Apple's kernel extensions ABI
  -fapple-link-rtlib      Force linking the clang builtins runtime library
  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling
  -fapplication-extension Restrict code to those available for App Extensions
  -fapprox-func           Allow certain math function calls to be replaced with an approximately equivalent calculation
  -fasync-exceptions      Enable EH Asynchronous exceptions
  -fbasic-block-sections=<value>
                          Place each function's basic blocks in unique sections (ELF Only)
  -fbinutils-version=<major.minor>
                          Produced object files can use all ELF features supported by this binutils version and newer. If -fno-integrated-as is specified, the generated assembly will consider GNU as support. 'none' means that all ELF features can be used, regardless of binutils support. Defaults to 2.26.
  -fblocks                Enable the 'blocks' language feature
  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler
  -fbranch-target-identification
                          Emit branch target identification instructions for indirect branch destinations
  -fbuild-session-file=<file>
                          Use the last modification time of <file> as the build session timestamp
  -fbuild-session-timestamp=<time since Epoch in seconds>
                          Time when the current build session started
  -fbuiltin-module-map    Load the clang builtins module map file.
  -fc++-abi=<value>       C++ ABI to use. This will override the target C++ ABI.
  -fcall-saved-x10        Make the x10 register call-saved (AArch64 only)
  -fcall-saved-x11        Make the x11 register call-saved (AArch64 only)
  -fcall-saved-x12        Make the x12 register call-saved (AArch64 only)
  -fcall-saved-x13        Make the x13 register call-saved (AArch64 only)
  -fcall-saved-x14        Make the x14 register call-saved (AArch64 only)
  -fcall-saved-x15        Make the x15 register call-saved (AArch64 only)
  -fcall-saved-x18        Make the x18 register call-saved (AArch64 only)
  -fcall-saved-x8         Make the x8 register call-saved (AArch64 only)
  -fcall-saved-x9         Make the x9 register call-saved (AArch64 only)
  -fcf-protection=<value> Instrument control-flow architecture protection
  -fcf-protection         Enable cf-protection in 'full' mode
  -fchar8_t               Enable C++ builtin type char8_t
  -fclang-abi-compat=<version>
                          Attempt to match the ABI of Clang <version>
  -fcolor-diagnostics     Enable colors in diagnostics
  -fcomment-block-commands=<arg>
                          Treat each comma separated argument in <arg> as a documentation comment block command
  -fcommon                Place uninitialized global variables in a common block
  -fcomplete-member-pointers
                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fconvergent-functions  Assume functions may be convergent
  -fcoro-aligned-allocation
                          Prefer aligned allocation for C++ Coroutines
  -fcoroutines-ts         Enable support for the C++ Coroutines TS
  -fcoverage-compilation-dir=<value>
                          The compilation directory to embed in the coverage mapping.
  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis
  -fcoverage-prefix-map=<value>
                          remap file source paths in coverage mapping
  -fcrash-diagnostics-dir=<dir>
                          Put crash-report files in <dir>
  -fcrash-diagnostics=<value>
                          Set level of crash diagnostic reporting, (option: off, compiler, all)
  -fcrash-diagnostics     Enable crash diagnostic reporting (default)
  -fcs-profile-generate=<directory>
                          Generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcs-profile-generate   Generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcuda-approx-transcendentals
                          Use approximate transcendental functions
  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces
  -fcxx-exceptions        Enable C++ exceptions
  -fcxx-modules           Enable modules for C++
  -fdata-sections         Place each data in its own section
  -fdebug-compilation-dir=<value>
                          The compilation directory to embed in the debug info
  -fdebug-default-version=<value>
                          Default DWARF version to use, if a -g option caused DWARF debug info to be produced
  -fdebug-info-for-profiling
                          Emit extra debug info to make sample profile more accurate
  -fdebug-macro           Emit macro debug information
  -fdebug-prefix-map=<value>
                          remap file source paths in debug info
  -fdebug-ranges-base-address
                          Use DWARF base address selection entries in .debug_ranges
  -fdebug-types-section   Place debug types in their own section (ELF Only)
  -fdeclspec              Allow __declspec as a keyword
  -fdelayed-template-parsing
                          Parse templated function definitions at the end of the translation unit
  -fdelete-null-pointer-checks
                          Treat usage of null pointers as undefined behavior (default)
  -fdepscan-daemon=<value>
                          Specify the path to the daemon to be used. Clang will use the daemon specified, rather than try to spawn its own based on parent processes.
  -fdepscan-include-tree  Set dep-scanner to produce the include tree
  -fdepscan-prefix-map-sdk=<new>
                          With -fdepscan, auto-detect the SDK path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map-toolchain=<new>
                          With -fdepscan, auto-detect the toolchain path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map=<old>=<new>
                          With -fdepscan, seamlessly filter the CAS filesystem to apply the given prefix, updating the command-line to match.
  -fdepscan-share-identifier <value>
                          Share depscan daemon for Clang invocations using the same string identifier.
  -fdepscan-share-parent=<value>
                          Share state based on the PID of the parent command if the name matches. See also -fdepscan-share-stop.
  -fdepscan-share-parent  Share state based on the PID of the parent command. See also -fdepscan-share-stop.
  -fdepscan-share-stop=<value>
                          Stop looking for the command named by -fdepscan-share if a process with the name of the provided argument is found first. Also blocks -fdepscan-share=parent if the parent has this name. E.g., -fdepscan -fdepscan-share=ninja -fdepscan-share-stop=cmake looks for 'ninja' and 'cmake' in the process tree; if 'ninja' is found first, state is shared based on ninja's PID; if 'cmake' is found first, state is not shared.
  -fdepscan-share=<value> If the argument is the name of a command in the process tree, share state based on its PID. E.g., -fdepscan -fdepscan-share=ninja will search for 'ninja' in the process tree and share state based on its PID if found. See also -fdepscan-share-stop.
  -fdepscan=<value>       Scan for dependencies ahead of compiling, generating a pruned CAS tree to send to -fcas-fs. Values are 'auto', 'daemon' (see -fdepscan-share and -fdepscan-share-parent), 'inline', or 'off' (default).
  -fdepscan               Turn on -fdepscan=auto.
  -fdiagnostics-absolute-paths
                          Print absolute paths in diagnostics
  -fdiagnostics-hotness-threshold=<value>
                          Prevent optimization remarks from being output if they do not have at least this profile count. Use 'auto' to apply the threshold from profile summary
  -fdiagnostics-misexpect-tolerance=<value>
                          Prevent misexpect diagnostics from being output if the profile counts are within N% of the expected. 
  -fdiagnostics-parseable-fixits
                          Print fix-its in machine parseable form
  -fdiagnostics-print-source-range-info
                          Print source range spans in numeric form
  -fdiagnostics-show-hotness
                          Enable profile hotness information in diagnostic line
  -fdiagnostics-show-note-include-stack
                          Display include stacks for diagnostic notes
  -fdiagnostics-show-option
                          Print option name with mappable diagnostics
  -fdiagnostics-show-template-tree
                          Print a template comparison tree for differing templates
  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)
  -fdirect-access-external-data
                          Don't use GOT indirection to reference external data symbols
  -fdiscard-value-names   Discard value names in LLVM IR
  -fdollars-in-identifiers
                          Allow '$' in identifiers
  -fdouble-square-bracket-attributes
                          Enable '[[]]' attributes in all C and C++ language modes
  -fdriver-only           Only run the driver.
  -fdwarf-exceptions      Use DWARF style exceptions
  -feliminate-unused-debug-types
                          Do not emit  debug info for defined but unused types
  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker
  -fembed-bitcode=<option>
                          Embed LLVM bitcode
  -fembed-bitcode         Embed LLVM IR bitcode as data
  -fembed-offload-object=<value>
                          Embed Offloading device-side binary into host object file as a section.
  -femit-all-decls        Emit all declarations, even if unused
  -femit-dwarf-unwind=<value>
                          When to emit DWARF unwind (EH frame) info
  -femulated-tls          Use emutls functions to access thread_local variables
  -fenable-matrix         Enable matrix data type and related builtin functions
  -fexceptions            Enable support for exception handling
  -fexperimental-library  Control whether unstable and experimental library features are enabled. This option enables various library features that are either experimental (also known as TSes), or have been but are not stable yet in the selected Standard Library implementation. It is not recommended to use this option in production code, since neither ABI nor API stability are guaranteed. This is intended to provide a preview of features that will ship in the future for experimentation purposes
  -fexperimental-new-constant-interpreter
                          Enable the experimental new constant interpreter
  -fexperimental-relative-c++-abi-vtables
                          Use the experimental C++ class ABI for classes with virtual tables
  -fexperimental-sanitize-metadata=<value>
                          Specify the type of metadata to emit for binary analysis sanitizers
  -fexperimental-strict-floating-point
                          Enables experimental strict floating point in LLVM.
  -fextend-arguments=<value>
                          Controls how scalar integer arguments are extended in calls to unprototyped and varargs functions
  -ffast-math             Allow aggressive, lossy floating-point optimizations
  -ffile-compilation-dir=<value>
                          The compilation directory to embed in the debug info and coverage mapping.
  -ffile-prefix-map=<value>
                          remap file source paths in debug info, predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -ffile-reproducible     Use the target's platform-specific path separator character when expanding the __FILE__ macro
  -ffine-grained-bitfield-accesses
                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.
  -ffinite-loops          Assume all loops are finite.
  -ffixed-a0              Reserve the a0 register (M68k only)
  -ffixed-a1              Reserve the a1 register (M68k only)
  -ffixed-a2              Reserve the a2 register (M68k only)
  -ffixed-a3              Reserve the a3 register (M68k only)
  -ffixed-a4              Reserve the a4 register (M68k only)
  -ffixed-a5              Reserve the a5 register (M68k only)
  -ffixed-a6              Reserve the a6 register (M68k only)
  -ffixed-d0              Reserve the d0 register (M68k only)
  -ffixed-d1              Reserve the d1 register (M68k only)
  -ffixed-d2              Reserve the d2 register (M68k only)
  -ffixed-d3              Reserve the d3 register (M68k only)
  -ffixed-d4              Reserve the d4 register (M68k only)
  -ffixed-d5              Reserve the d5 register (M68k only)
  -ffixed-d6              Reserve the d6 register (M68k only)
  -ffixed-d7              Reserve the d7 register (M68k only)
  -ffixed-point           Enable fixed point types
  -ffixed-r19             Reserve register r19 (Hexagon only)
  -ffixed-r9              Reserve the r9 register (ARM only)
  -ffixed-x10             Reserve the x10 register (AArch64/RISC-V only)
  -ffixed-x11             Reserve the x11 register (AArch64/RISC-V only)
  -ffixed-x12             Reserve the x12 register (AArch64/RISC-V only)
  -ffixed-x13             Reserve the x13 register (AArch64/RISC-V only)
  -ffixed-x14             Reserve the x14 register (AArch64/RISC-V only)
  -ffixed-x15             Reserve the x15 register (AArch64/RISC-V only)
  -ffixed-x16             Reserve the x16 register (AArch64/RISC-V only)
  -ffixed-x17             Reserve the x17 register (AArch64/RISC-V only)
  -ffixed-x18             Reserve the x18 register (AArch64/RISC-V only)
  -ffixed-x19             Reserve the x19 register (AArch64/RISC-V only)
  -ffixed-x1              Reserve the x1 register (AArch64/RISC-V only)
  -ffixed-x20             Reserve the x20 register (AArch64/RISC-V only)
  -ffixed-x21             Reserve the x21 register (AArch64/RISC-V only)
  -ffixed-x22             Reserve the x22 register (AArch64/RISC-V only)
  -ffixed-x23             Reserve the x23 register (AArch64/RISC-V only)
  -ffixed-x24             Reserve the x24 register (AArch64/RISC-V only)
  -ffixed-x25             Reserve the x25 register (AArch64/RISC-V only)
  -ffixed-x26             Reserve the x26 register (AArch64/RISC-V only)
  -ffixed-x27             Reserve the x27 register (AArch64/RISC-V only)
  -ffixed-x28             Reserve the x28 register (AArch64/RISC-V only)
  -ffixed-x29             Reserve the x29 register (AArch64/RISC-V only)
  -ffixed-x2              Reserve the x2 register (AArch64/RISC-V only)
  -ffixed-x30             Reserve the x30 register (AArch64/RISC-V only)
  -ffixed-x31             Reserve the x31 register (AArch64/RISC-V only)
  -ffixed-x3              Reserve the x3 register (AArch64/RISC-V only)
  -ffixed-x4              Reserve the x4 register (AArch64/RISC-V only)
  -ffixed-x5              Reserve the x5 register (AArch64/RISC-V only)
  -ffixed-x6              Reserve the x6 register (AArch64/RISC-V only)
  -ffixed-x7              Reserve the x7 register (AArch64/RISC-V only)
  -ffixed-x8              Reserve the x8 register (AArch64/RISC-V only)
  -ffixed-x9              Reserve the x9 register (AArch64/RISC-V only)
  -fforce-dwarf-frame     Always emit a debug frame section
  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization
  -fforce-enable-int128   Enable support for int128_t type
  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (fuses across statements disregarding pragmas) | on (only fuses in the same statement unless dictated by pragmas) | off (never fuses) | fast-honor-pragmas (fuses across statements unless diectated by pragmas). Default is 'fast' for CUDA, 'fast-honor-pragmas' for HIP, and 'on' otherwise.
  -ffp-eval-method=<value>
                          Specifies the evaluation method to use for floating-point arithmetic.
  -ffp-exception-behavior=<value>
                          Specifies the exception behavior of floating-point operations.
  -ffp-model=<value>      Controls the semantics of floating-point calculations.
  -ffreestanding          Assert that the compilation takes place in a freestanding environment
  -ffuchsia-api-level=<value>
                          Set Fuchsia API level
  -ffunction-sections     Place each function in its own section
  -fgeneric-block-helpers Use generic block helpers for copying/destroying blocks
  -fglobal-isel           Enables the global instruction selector
  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard
  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime
  -fgnu89-inline          Use the gnu89 inline semantics
  -fgnuc-version=<value>  Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)
  -fgpu-allow-device-init Allow device side init function in HIP (experimental)
  -fgpu-default-stream=<value>
                          Specify default stream. The default value is 'legacy'. (HIP only)
  -fgpu-defer-diag        Defer host/device related diagnostic messages for CUDA/HIP
  -fgpu-flush-denormals-to-zero
                          Flush denormal floating point values to zero in CUDA/HIP device mode.
  -fgpu-rdc               Generate relocatable device code, also known as separate compilation mode
  -fgpu-sanitize          Enable sanitizer for AMDGPU target
  -fhip-fp32-correctly-rounded-divide-sqrt
                          Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fhip-kernel-arg-name   Specify that kernel argument names are preserved (HIP only)
  -fhip-new-launch-api    Use new kernel launching API for HIP
  -fignore-exceptions     Enable support for ignoring exception handling constructs
  -fimplicit-module-maps  Implicitly search the file system for module map files.
  -fin-descriptor-block-flags
                          Emit in-descriptor block flags
  -finline-functions      Inline suitable functions
  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline
  -finline-max-stacksize=<value>
                          Suppress inlining of functions whose stack size exceeds the given value
  -finput-charset=<value> Specify the default character set for source files
  -finstrument-function-entry-bare
                          Instrument function entry only, after inlining, without arguments to the instrumentation call
  -finstrument-functions-after-inlining
                          Like -finstrument-functions, but insert the calls after inlining
  -finstrument-functions  Generate calls to instrument function entry and exit
  -fintegrated-as         Enable the integrated assembler
  -fintegrated-cc1        Run cc1 in-process
  -fintegrated-objemitter Use internal machine object code emitter.
  -fjmc                   Enable just-my-code debugging
  -fjump-tables           Use jump tables for lowering switches
  -fkeep-static-consts    Keep static const variables if unused
  -flax-vector-conversions=<value>
                          Enable implicit vector bit-casts
  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)
  -flto=auto              Enable LTO in 'full' mode
  -flto=jobserver         Enable LTO in 'full' mode
  -flto=<value>           Set LTO mode
  -flto                   Enable LTO in 'full' mode
  -fmacro-prefix-map=<value>
                          remap file source paths in predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -fmath-errno            Require math functions to indicate errors by setting errno
  -fmax-tokens=<value>    Max total number of preprocessed tokens for -Wmax-tokens.
  -fmax-type-align=<value>
                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment
  -fmemory-profile=<directory>
                          Enable heap memory profiling and dump results into <directory>
  -fmemory-profile        Enable heap memory profiling
  -fmerge-all-constants   Allow merging of constants
  -fmessage-length=<value>
                          Format message diagnostics so that they fit within N columns
  -fminimize-whitespace   Minimize whitespace when emitting preprocessor output
  -fmodule-file=[<name>=]<file>
                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.
  -fmodule-header=<kind>  Build a C++20 Header Unit from a header that should be found in the user (fmodule-header=user) or system (fmodule-header=system) search path.
  -fmodule-header         Build a C++20 Header Unit from a header.
  -fmodule-map-file=<file>
                          Load this module map file
  -fmodule-name=<name>    Specify the name of the module to build
  -fmodule-related-to-pch Mark module as related to a PCH
  -fmodules-cache-path=<directory>
                          Specify the module cache path
  -fmodules-decluse       Require declaration of modules used within a module
  -fmodules-disable-diagnostic-validation
                          Disable validation of the diagnostic options when loading the module
  -fmodules-ignore-macro=<value>
                          Ignore the definition of the given macro when building and loading modules
  -fmodules-prune-after=<seconds>
                          Specify the interval (in seconds) after which a module file will be considered unused
  -fmodules-prune-interval=<seconds>
                          Specify the interval (in seconds) between attempts to prune the module cache
  -fmodules-search-all    Search even non-imported modules to resolve references
  -fmodules-strict-decluse
                          Like -fmodules-decluse but requires all headers to be in modules
  -fmodules-ts            Enable support for the C++ Modules TS
  -fmodules-user-build-path <directory>
                          Specify the module user build path
  -fmodules-validate-input-files-content
                          Validate PCM input files based on content if mtime differs
  -fmodules-validate-once-per-build-session
                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session
  -fmodules-validate-system-headers
                          Validate the system headers that a module depends on when loading the module
  -fmodules               Enable the 'modules' language feature
  -fms-compatibility-version=<value>
                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fms-compatibility      Enable full Microsoft Visual C++ compatibility
  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler
  -fms-hotpatch           Ensure that all functions can be hotpatched at runtime
  -fms-runtime-lib=<value>
                          Select Windows run-time library
  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'
  -fnew-infallible        Enable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-aapcs-bitfield-width
                          Do not follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -fno-access-control     Disable C++ access control
  -fno-addrsig            Don't emit an address-significance table
  -fno-apinotes-modules   Disable module-based external API notes support
  -fno-apinotes           Disable external API notes support
  -fno-assume-sane-operator-new
                          Don't assume that C++'s global operator new can't alias any pointer
  -fno-autolink           Disable generation of linker directives for automatic library linking
  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function
  -fno-builtin            Disable implicit builtin knowledge of functions
  -fno-c++-static-destructors
                          Disable C++ static destructor registration
  -fno-char8_t            Disable C++ builtin type char8_t
  -fno-color-diagnostics  Disable colors in diagnostics
  -fno-common             Compile common globals like normal definitions
  -fno-complete-member-pointers
                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings
  -fno-constant-nsarray-literals
                          Disable creation of CodeFoundation-type constant initializer `NSArray`s from array literals
  -fno-constant-nsdictionary-literals
                          Disable creation of CodeFoundation-type constant initializer `NSDictionary`s from dictionary literals
  -fno-constant-nsnumber-literals
                          Disable creation of CodeFoundation-type constant initializer `NSNumber`s from number literals
  -fno-coverage-mapping   Disable code coverage analysis
  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash
  -fno-cuda-approx-transcendentals
                          Don't use approximate transcendental functions
  -fno-cxx-modules        Disable modules for C++
  -fno-debug-macro        Do not emit macro debug information
  -fno-declspec           Disallow __declspec as a keyword
  -fno-delayed-template-parsing
                          Disable delayed template parsing
  -fno-delete-null-pointer-checks
                          Do not treat usage of null pointers as undefined behavior
  -fno-depscan-share      Turn off -fdepscan-share and -fdepscan-share-parent.
  -fno-diagnostics-fixit-info
                          Do not include fixit information in diagnostics
  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'
  -fno-direct-access-external-data
                          Use GOT indirection to reference external data symbols
  -fno-discard-value-names
                          Do not discard value names in LLVM IR
  -fno-dollars-in-identifiers
                          Disallow '$' in identifiers
  -fno-double-square-bracket-attributes
                          Disable '[[]]' attributes in all C and C++ language modes
  -fno-elide-constructors Disable C++ copy constructor elision
  -fno-elide-type         Do not elide types when printing diagnostics
  -fno-eliminate-unused-debug-types
                          Emit  debug info for defined but unused types
  -fno-exceptions         Disable support for exception handling
  -fno-experimental-relative-c++-abi-vtables
                          Do not use the experimental C++ class ABI for classes with virtual tables
  -fno-experimental-sanitize-metadata=<value>
                          Disable emitting metadata for binary analysis sanitizers
  -fno-file-reproducible  Use the host's platform-specific path separator character when expanding the __FILE__ macro
  -fno-fine-grained-bitfield-accesses
                          Use large-integer access for consecutive bitfield runs.
  -fno-finite-loops       Do not assume that any loop is finite.
  -fno-fixed-point        Disable fixed point types
  -fno-force-enable-int128
                          Disable support for int128_t type
  -fno-generic-block-helpers
                          Don't use generic block helpers for copying/destroying blocks
  -fno-global-isel        Disables the global instruction selector
  -fno-gnu-inline-asm     Disable GNU style inline asm
  -fno-gpu-allow-device-init
                          Don't allow device side init function in HIP (experimental)
  -fno-gpu-defer-diag     Don't defer host/device related diagnostic messages for CUDA/HIP
  -fno-hip-fp32-correctly-rounded-divide-sqrt
                          Don't specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fno-hip-kernel-arg-name
                          Don't specify that kernel argument names are preserved (HIP only)
  -fno-hip-new-launch-api Don't use new kernel launching API for HIP
  -fno-in-descriptor-block-flags
                          Don't emit in-descriptor block flags
  -fno-integrated-as      Disable the integrated assembler
  -fno-integrated-cc1     Spawn a separate process for each cc1
  -fno-integrated-objemitter
                          Use external machine object code emitter.
  -fno-jump-tables        Do not use jump tables for lowering switches
  -fno-keep-static-consts Don't keep static const variables if unused
  -fno-knr-functions      Disable support for K&R C function declarations
  -fno-lto                Disable LTO mode (default)
  -fno-memory-profile     Disable heap memory profiling
  -fno-merge-all-constants
                          Disallow merging of constants
  -fno-modules-check-relocated<value>
                          Skip checks for relocated modules when loading PCM files
  -fno-new-infallible     Disable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-objc-infer-related-result-type
                          do not infer Objective-C related result type based on method family
  -fno-offload-lto        Disable LTO mode (default) for offload compilation
  -fno-openmp-extensions  Disable all Clang extensions for OpenMP directives and clauses
  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators
  -fno-optimize-sibling-calls
                          Disable tail call optimization, keeping the call stack accurate
  -fno-pch-codegen        Do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fno-pch-debuginfo      Do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fno-plt                Use GOT indirection instead of PLT to make external function calls (x86 only)
  -fno-preserve-as-comments
                          Do not preserve comments in inline assembly
  -fno-profile-generate   Disable generation of profile instrumentation.
  -fno-profile-instr-generate
                          Disable generation of profile instrumentation.
  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization
  -fno-pseudo-probe-for-profiling
                          Do not emit pseudo probes for sample profiling
  -fno-ptrauth-abi-version
                          Disable Pointer Authentication ABI versioning
  -fno-ptrauth-kernel-abi-version
                          Disable Pointer Authentication kernel ABI versioning
  -fno-register-global-dtors-with-atexit
                          Don't use atexit or __cxa_atexit to register global destructors
  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags
  -fno-rtti-data          Disable generation of RTTI data
  -fno-rtti               Disable generation of rtti information
  -fno-sanitize-address-globals-dead-stripping
                          Disable linker dead stripping of globals in AddressSanitizer
  -fno-sanitize-address-outline-instrumentation
                          Use default code inlining logic for the address sanitizer
  -fno-sanitize-address-poison-custom-array-cookie
                          Disable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fno-sanitize-address-use-after-scope
                          Disable use-after-scope detection in AddressSanitizer
  -fno-sanitize-address-use-odr-indicator
                          Disable ODR indicator globals
  -fno-sanitize-cfi-canonical-jump-tables
                          Do not make the jump table addresses canonical in the symbol table
  -fno-sanitize-cfi-cross-dso
                          Disable control flow integrity (CFI) checks for cross-DSO calls.
  -fno-sanitize-coverage=<value>
                          Disable features of coverage instrumentation for Sanitizers
  -fno-sanitize-hwaddress-experimental-aliasing
                          Disable aliasing mode in HWAddressSanitizer
  -fno-sanitize-ignorelist
                          Don't use ignorelist file for sanitizers
  -fno-sanitize-memory-param-retval
                          Disable detection of uninitialized parameters and return values
  -fno-sanitize-memory-track-origins
                          Disable origins tracking in MemorySanitizer
  -fno-sanitize-memory-use-after-dtor
                          Disable use-after-destroy detection in MemorySanitizer
  -fno-sanitize-recover=<value>
                          Disable recovery for specified sanitizers
  -fno-sanitize-stable-abi
                          Conventional ABI instrumentation for sanitizer runtime. Default: Conventional
  -fno-sanitize-stats     Disable sanitizer statistics gathering.
  -fno-sanitize-thread-atomics
                          Disable atomic operations instrumentation in ThreadSanitizer
  -fno-sanitize-thread-func-entry-exit
                          Disable function entry/exit instrumentation in ThreadSanitizer
  -fno-sanitize-thread-memory-access
                          Disable memory access instrumentation in ThreadSanitizer
  -fno-sanitize-trap=<value>
                          Disable trapping for specified sanitizers
  -fno-sanitize-trap      Disable trapping for all sanitizers
  -fno-short-wchar        Force wchar_t to be an unsigned int
  -fno-show-column        Do not include column number on diagnostics
  -fno-show-source-location
                          Do not include source location information with diagnostics
  -fno-signed-char        char is unsigned
  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros
  -fno-spell-checking     Disable spell-checking
  -fno-split-machine-functions
                          Disable late function splitting using profile information (x86 ELF)
  -fno-split-stack        Wouldn't use segmented stack
  -fno-stack-check        Disable stack checking
  -fno-stack-clash-protection
                          Disable stack clash protection
  -fno-stack-protector    Disable the use of stack protectors
  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary
  -fno-strict-float-cast-overflow
                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions
  -fno-strict-return      Don't treat control flow paths that fall off the end of a non-void function as unreachable
  -fno-sycl               Disables SYCL kernels compilation for device
  -fno-temp-file          Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes
  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe
  -fno-trap-function-returns
                          The trap function specified by -ftrap-function never returns
  -fno-trigraphs          Do not process trigraph sequences
  -fno-typed-cxx-new-delete
                          Disable use of typed variants of C++ new() and delete()
  -fno-typed-memory-operations-experimental
                          Disable Typed Memory Operations call site rewriting
  -fno-unique-section-names
                          Don't use unique names for text and data sections
  -fno-unroll-loops       Turn off loop unroller
  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors
  -fno-use-init-array     Use .ctors/.dtors instead of .init_array/.fini_array
  -fno-visibility-inlines-hidden-static-local-var
                          Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)
  -fno-xray-function-index
                          Omit function index section at the expense of single-function patching performance
  -fno-zero-initialized-in-bss
                          Don't place zero initialized data in BSS
  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc
  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers
  -fobjc-disable-direct-methods-for-testing
                          Ignore attribute objc_direct so that direct methods can be tested
  -fobjc-encode-cxx-class-template-spec
                          Fully encode c++ class template specialization
  -fobjc-exceptions       Enable Objective-C exceptions
  -fobjc-relative-method-lists
                          Enable relative method lists
  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version
  -fobjc-weak             Enable ARC-style weak references in Objective-C
  -foffload-lto=<value>   Set LTO mode for offload compilation
  -foffload-lto           Enable LTO in 'full' mode for offload compilation
  -fopenmp-extensions     Enable all Clang extensions for OpenMP directives and clauses
  -fopenmp-implicit-rpath Set rpath on OpenMP executables
  -fopenmp-offload-mandatory
                          Do not create a host fallback if offloading to the device fails.
  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.
  -fopenmp-target-debug   Enable debugging in the OpenMP offloading device RTL
  -fopenmp-targets=<value>
                          Specify comma-separated list of triples OpenMP offloading targets to be supported
  -fopenmp-version=<value>
                          Set OpenMP version (e.g. 45 for OpenMP 4.5, 50 for OpenMP 5.0). Default value is 50.
  -fopenmp                Parse OpenMP pragmas and generate parallel code.
  -foptimization-record-file=<file>
                          Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.
  -foptimization-record-passes=<regex>
                          Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)
  -forder-file-instrumentation
                          Generate instrumented code to collect order file into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fpack-struct=<value>   Specify the default maximum struct packing alignment
  -fpascal-strings        Recognize and construct Pascal-style string literals
  -fpass-plugin=<dsopath> Load pass plugin from a dynamic shared object file (only with new pass manager).
  -fpatchable-function-entry=<N,M>
                          Generate M NOPs before function entry and N-M NOPs after function entry
  -fpcc-struct-return     Override the default ABI to return all structs on the stack
  -fpch-codegen           Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fpch-debuginfo         Generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fpch-instantiate-templates
                          Instantiate templates already while building a PCH
  -fpch-validate-input-files-content
                          Validate PCH input files based on content if mtime differs
  -fplugin-arg-<name>-<arg>
                          Pass <arg> to plugin <name>
  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)
  -fprebuilt-implicit-modules
                          Look up implicit modules in the prebuilt module path
  -fprebuilt-module-path=<directory>
                          Specify the prebuilt module path
  -fproc-stat-report=<value>
                          Save subprocess statistics to the given file
  -fproc-stat-report<value>
                          Print subprocess statistics
  -fprofile-exclude-files=<value>
                          Instrument only functions from files where names don't match all the regexes separated by a semi-colon
  -fprofile-filter-files=<value>
                          Instrument only functions from files where names match any regex separated by a semi-colon
  -fprofile-function-groups=<N>
                          Partition functions into N groups and select only functions in group i to be instrumented using -fprofile-selected-function-group
  -fprofile-generate=<directory>
                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate=<file>
                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate
                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fprofile-instr-use=<value>
                          Use instrumentation data for profile-guided optimization
  -fprofile-list=<value>  Filename defining the list of functions/files to instrument
  -fprofile-remapping-file=<file>
                          Use the remappings described in <file> to match the profile data against names in the program
  -fprofile-sample-accurate
                          Specifies that the sample profile is accurate
  -fprofile-sample-use=<value>
                          Enable sample-based profile guided optimizations
  -fprofile-selected-function-group=<i>
                          Partition functions into N groups using -fprofile-function-groups and select only functions in group i to be instrumented. The valid range is 0 to N-1 inclusive
  -fprofile-update=<method>
                          Set update method of profile counters
  -fprofile-use=<pathname>
                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.
  -fprotect-parens        Determines whether the optimizer honors parentheses when floating-point expressions are evaluated
  -fpseudo-probe-for-profiling
                          Emit pseudo probes for sample profiling
  -fptrauth-abi-version=<value>
                          Pointer Authentication ABI version
  -fptrauth-auth-traps    Enable traps on authentication failures
  -fptrauth-block-descriptor-pointers
                          enable signing block descriptors
  -fptrauth-calls         Enable signing and authentication of all indirect calls
  -fptrauth-function-pointer-type-discrimination
                          Enabling type discrimination on C function pointers
  -fptrauth-indirect-gotos
                          Enable signing and authentication of indirect goto targets
  -fptrauth-intrinsics    Enable pointer-authentication intrinsics
  -fptrauth-kernel-abi-version
                          Enable Pointer Authentication kernel ABI version
  -fptrauth-objc-class-ro Enable signing and authentication for ObjC class_ro pointers
  -fptrauth-objc-interface-sel
                          Enable signing and authentication of Objective-C object's 'SEL' fields
  -fptrauth-objc-isa-masking
                          pre- and post-authentication masking mode of objective-c isa pointers
  -fptrauth-objc-isa-mode=<value>
                          Authentication mode for ObjC isa field. Full auth if unspecified
  -fptrauth-objc-isa      Enable signing and authentication of Objective-C object's 'isa' field
  -fptrauth-returns       Enable signing and authentication of return addresses
  -fptrauth-soft          Enable software lowering of pointer authentication
  -fptrauth-vtable-pointer-address-discrimination
                          Enable address discrimination of vtable pointers
  -fptrauth-vtable-pointer-type-discrimination
                          Enable type discrimination of vtable pointers
  -frandomize-layout-seed-file=<file>
                          File holding the seed used by the randomize structure layout feature
  -frandomize-layout-seed=<seed>
                          The seed used by the randomize structure layout feature
  -freciprocal-math       Allow division operations to be reassociated
  -freg-struct-return     Override the default ABI to return small structs in registers
  -fregister-global-dtors-with-atexit
                          Use atexit or __cxa_atexit to register global destructors
  -frelaxed-template-template-args
                          Enable C++17 relaxed template template argument matching
  -freroll-loops          Turn on loop reroller
  -fropi                  Generate read-only position independent code (ARM only)
  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags
  -frwpi                  Generate read-write position independent code (ARM only)
  -fsafe-buffer-usage-suggestions
                          Display suggestions to update code associated with -Wunsafe-buffer-usage warnings
  -fsanitize-address-destructor=<value>
                          Set destructor type used in ASan instrumentation
  -fsanitize-address-field-padding=<value>
                          Level of field padding for AddressSanitizer
  -fsanitize-address-globals-dead-stripping
                          Enable linker dead stripping of globals in AddressSanitizer
  -fsanitize-address-outline-instrumentation
                          Always generate function calls for address sanitizer instrumentation
  -fsanitize-address-poison-custom-array-cookie
                          Enable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fsanitize-address-use-after-return=<mode>
                          Select the mode of detecting stack use-after-return in AddressSanitizer
  -fsanitize-address-use-after-scope
                          Enable use-after-scope detection in AddressSanitizer
  -fsanitize-address-use-odr-indicator
                          Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size
  -fsanitize-blacklist=<value>
                          Alias for -fsanitize-ignorelist=
  -fsanitize-cfi-canonical-jump-tables
                          Make the jump table addresses canonical in the symbol table
  -fsanitize-cfi-cross-dso
                          Enable control flow integrity (CFI) checks for cross-DSO calls.
  -fsanitize-cfi-icall-generalize-pointers
                          Generalize pointers in CFI indirect call type signature checks
  -fsanitize-coverage-allowlist=<value>
                          Restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones
  -fsanitize-coverage-ignorelist=<value>
                          Disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones
  -fsanitize-coverage=<value>
                          Specify the type of coverage instrumentation for Sanitizers
  -fsanitize-hwaddress-abi=<value>
                          Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.
  -fsanitize-hwaddress-experimental-aliasing
                          Enable aliasing mode in HWAddressSanitizer
  -fsanitize-ignorelist=<value>
                          Path to ignorelist file for sanitizers
  -fsanitize-memory-param-retval
                          Enable detection of uninitialized parameters and return values
  -fsanitize-memory-track-origins=<value>
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-track-origins
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-use-after-dtor
                          Enable use-after-destroy detection in MemorySanitizer
  -fsanitize-memtag-mode=<value>
                          Set default MTE mode to 'sync' (default) or 'async'
  -fsanitize-recover=<value>
                          Enable recovery for specified sanitizers
  -fsanitize-stable-abi   Stable  ABI instrumentation for sanitizer runtime. Default: Conventional
  -fsanitize-stats        Enable sanitizer statistics gathering.
  -fsanitize-system-blacklist=<value>
                          Alias for -fsanitize-system-ignorelist=
  -fsanitize-system-ignorelist=<value>
                          Path to system ignorelist file for sanitizers
  -fsanitize-thread-atomics
                          Enable atomic operations instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-func-entry-exit
                          Enable function entry/exit instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-memory-access
                          Enable memory access instrumentation in ThreadSanitizer (default)
  -fsanitize-trap=<value> Enable trapping for specified sanitizers
  -fsanitize-trap         Enable trapping for all sanitizers
  -fsanitize-undefined-strip-path-components=<number>
                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.
  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks
  -fsave-optimization-record=<format>
                          Generate an optimization record file in a specific format
  -fsave-optimization-record
                          Generate a YAML optimization record file
  -fseh-exceptions        Use SEH style exceptions
  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values
  -fshort-wchar           Force wchar_t to be a short unsigned int
  -fshow-overloads=<value>
                          Which overload candidates to show when overload resolution fails. Defaults to 'all'
  -fshow-skipped-includes Show skipped includes in -H output.
  -fsigned-char           char is signed
  -fsized-deallocation    Enable C++14 sized global deallocation functions
  -fsjlj-exceptions       Use SjLj style exceptions
  -fslp-vectorize         Enable the superword-level parallelism vectorization passes
  -fsmall-block-descriptors
                          Enable small block descriptors
  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF
  -fsplit-lto-unit        Enables splitting of the LTO unit
  -fsplit-machine-functions
                          Enable late function splitting using profile information (x86 ELF)
  -fsplit-stack           Use segmented stack
  -fstack-check           Enable stack checking
  -fstack-clash-protection
                          Enable stack clash protection
  -fstack-protector-all   Enable stack protectors for all functions
  -fstack-protector-strong
                          Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable
  -fstack-protector       Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca , which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable. A function with a stack protector has a guard value added to the stack frame that is checked on function exit. The guard value must be positioned in the stack frame such that a buffer overflow from a vulnerable variable will overwrite the guard value before overwriting the function's return address. The reference stack guard value is stored in a global variable.
  -fstack-size-section    Emit section containing metadata on function stack sizes
  -fstack-usage           Emit .su file containing information on function stack sizes
  -fstandalone-debug      Emit full debug info for all types used by the program
  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range
  -fstrict-flex-arrays=<n>
                          Enable optimizations based on the strict definition of flexible arrays
  -fstrict-float-cast-overflow
                          Assume that overflowing float-to-int casts are undefined (default)
  -fstrict-vtable-pointers
                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects
  -fsuppress-conflicting-types
                          Ignore errors from conflicting types in function declarations
  -fswift-async-fp=<option>
                          Control emission of Swift async extended frame info
  -fsycl                  Enables SYCL kernels compilation for device
  -fsyntax-only           Run the preprocessor, parser and semantic analysis stages
  -fsystem-module         Build this module as a system module. Only used with -emit-module
  -ftarget-variant-availability-checks
                          Enable availability checks for the target variant platform
  -fthin-link-bitcode=<value>
                          Write minimized bitcode to <file> for the ThinLTO thin link only
  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index
  -ftime-report=<value>   (For new pass manager) 'per-pass': one report for each pass; 'per-pass-run': one report for each pass invocation
  -ftime-trace-granularity=<value>
                          Minimum time granularity (in microseconds) traced by time profiler
  -ftime-trace=<value>    Similar to -ftime-trace. Specify the JSON file or a directory which will contain the JSON file
  -ftime-trace            Turn on time profiler. Generates JSON file based on output filename.
  -ftrap-function-returns The trap function specified by -ftrap-function may return normally
  -ftrap-function=<value> Issue call to specified function rather than a trap instruction
  -ftrapv-handler=<function name>
                          Specify the function to be called on overflow
  -ftrapv                 Trap on integer overflow
  -ftrigraphs             Process trigraph sequences
  -ftrivial-auto-var-init-skip-cpp-obj
                          do not auto-initialize objects initialized by a C++ constructor
  -ftrivial-auto-var-init-skip-non-pod
                          do not auto-initialize non-POD objects
  -ftrivial-auto-var-init-skip-non-ptr-array
                          do not auto-initialize arrays other than arrays of pointers
  -ftrivial-auto-var-init-skip-stl
                          do not auto-initialize variables in STL namespace
  -ftrivial-auto-var-init-stop-after=<value>
                          Stop initializing trivial automatic stack variables after the specified number of instances
  -ftrivial-auto-var-init=<value>
                          Initialize trivial automatic stack variables. Defaults to 'uninitialized'
  -ftrivial-auto-var-zero-init-max-size=<value>
                          Zero initialize only first N bytes of each stack variable; 0 value turns off the limit.
  -ftyped-cxx-new-delete  Enable use of typed variants of C++ new() and delete()
  -ftyped-memory-operations-experimental
                          Enable Typed Memory Operations call site rewriting
  -funique-basic-block-section-names
                          Use unique names for basic block sections (ELF Only)
  -funique-internal-linkage-names
                          Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path
  -funroll-loops          Turn on loop unroller
  -fuse-cuid=<value>      Method to generate ID's for compilation units for single source offloading languages CUDA and HIP: 'hash' (ID's generated by hashing file path and command line options) | 'random' (ID's generated as random numbers) | 'none' (disabled). Default is 'hash'. This option will be overridden by option '-cuid=[ID]' if it is specified.
  -fuse-line-directives   Use #line in preprocessed output
  -fvalidate-ast-input-files-content
                          Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical
  -fveclib=<value>        Use the given vector functions library
  -fvectorize             Enable the loop vectorization passes
  -fverbose-asm           Generate verbose assembly output
  -fvirtual-function-elimination
                          Enables dead virtual function elimination optimization. Requires -flto=full
  -fvisibility-dllexport=<value>
                          The visibility for dllexport definitions [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-dllimport=<value>
                          The visibility for dllimport external declarations [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-nodllstorageclass=<value>
                          The visibility for external declarations without an explicit DLL dllstorageclass [-fvisibility-from-dllstorageclass]
  -fvisibility-from-dllstorageclass
                          Set the visibility of symbols in the generated code from their DLL storage class
  -fvisibility-global-new-delete-hidden
                          Give global C++ operator new and delete declarations hidden visibility
  -fvisibility-inlines-hidden-static-local-var
                          When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default
  -fvisibility-inlines-hidden
                          Give inline C++ member functions hidden visibility by default
  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default
  -fvisibility-nodllstorageclass=<value>
                          The visibility for definitions without an explicit DLL export class [-fvisibility-from-dllstorageclass]
  -fvisibility=<value>    Set the default symbol visibility for all global definitions
  -fwasm-exceptions       Use WebAssembly style exceptions
  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto
  -fwrapv                 Treat signed integer overflow as two's complement
  -fwritable-strings      Store string literals as writable data
  -fxl-pragma-pack        Enable IBM XL #pragma pack handling
  -fxray-always-emit-customevents
                          Always emit __xray_customevent(...) calls even if the containing function is not always instrumented
  -fxray-always-emit-typedevents
                          Always emit __xray_typedevent(...) calls even if the containing function is not always instrumented
  -fxray-always-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.
  -fxray-attr-list=<value>
                          Filename defining the list of functions/types for imbuing XRay attributes.
  -fxray-function-groups=<value>
                          Only instrument 1 of N groups
  -fxray-ignore-loops     Don't instrument functions with loops unless they also meet the minimum function size
  -fxray-instruction-threshold=<value>
                          Sets the minimum function size to instrument with XRay
  -fxray-instrumentation-bundle=<value>
                          Select which XRay instrumentation points to emit. Options: all, none, function-entry, function-exit, function, custom. Default is 'all'.  'function' includes both 'function-entry' and 'function-exit'.
  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit
  -fxray-link-deps        Tells clang to add the link dependencies for XRay.
  -fxray-modes=<value>    List of modes to link in by default into XRay instrumented binaries.
  -fxray-never-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.
  -fxray-selected-function-group=<value>
                          When using -fxray-function-groups, select which group of functions to instrument. Valid range is 0 to fxray-function-groups - 1
  -fzero-call-used-regs=<value>
                          Clear call-used registers upon function return (AArch64/x86 only)
  -fzvector               Enable System z vector language extension
  -F <value>              Add directory to framework include search path
  --gcc-install-dir=<value>
                          Use GCC installation in the specified directory. The directory ends with path components like 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Note: executables (e.g. ld) used by the compiler are not overridden by the selected GCC installation
  --gcc-toolchain=<value> Specify a directory where Clang can find 'include' and 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Clang will use the GCC installation with the largest version
  -gcodeview-ghash        Emit type record hashes in a .debug$H section
  -gcodeview              Generate CodeView debug information
  -gdwarf-2               Generate source-level debug information with dwarf version 2
  -gdwarf-3               Generate source-level debug information with dwarf version 3
  -gdwarf-4               Generate source-level debug information with dwarf version 4
  -gdwarf-5               Generate source-level debug information with dwarf version 5
  -gdwarf32               Enables DWARF32 format for ELF binaries, if debug information emission is enabled.
  -gdwarf64               Enables DWARF64 format for ELF binaries, if debug information emission is enabled.
  -gdwarf                 Generate source-level debug information with the default dwarf version
  -gembed-source          Embed source text in DWARF debug sections
  -gen-reproducer=<value> Emit reproducer on (option: off, crash (default), error, always)
  -gline-directives-only  Emit debug line info directives only
  -gline-tables-only      Emit debug line number tables only
  -gmodules               Generate debug info with external references to clang modules or precompiled headers
  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections
  -gno-inline-line-tables Don't emit inline line tables.
  --gpu-bundle-output     Bundle output files of HIP device compilation
  --gpu-instrument-lib=<value>
                          Instrument device library for HIP, which is a LLVM bitcode containing __cyg_profile_func_enter and __cyg_profile_func_exit
  --gpu-max-threads-per-block=<value>
                          Default max threads per block for kernel launch bounds for HIP
  -greproducible          Tune debug info to be reproducible.
  -gsplit-dwarf=<value>   Set DWARF fission mode
  -gz=<value>             DWARF debug sections compression type
  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)
  -g                      Generate source-level debug information
  --help-hidden           Display help for hidden options
  -help                   Display available options
  --hip-device-lib=<value>
                          HIP device library
  --hip-link              Link clang-offload-bundler bundles for HIP
  --hip-path=<value>      HIP runtime installation path, used for finding HIP version and adding HIP include path.
  --hip-version=<value>   HIP version in the format of major.minor.patch
  --hipspv-pass-plugin=<dsopath>
                          path to a pass plugin for HIP to SPIR-V passes.
  -H                      Show header includes and nesting depth
  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path
  -iapinotes-modules <directory>
                          Add directory to the API notes search path referenced by module name
  -iapinotes-path <file>  Include API notes file
  -ibuiltininc            Enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it
  -idirafter <value>      Add directory to AFTER include search path
  -iframeworkwithsysroot <directory>
                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot
  -iframework <value>     Add directory to SYSTEM framework search path
  -imacros <file>         Include macros from file before parsing
  -include-pch <file>     Include precompiled header file
  -include <file>         Include file before parsing
  -index-header-map       Make the next included directory (-I or -F) an indexer header map
  -index-ignore-macros    Ignore macros during indexing
  -index-ignore-pcms      Ignore symbols from imported pcm modules
  -index-ignore-system-symbols
                          Ignore symbols from system headers
  -index-record-codegen-name
                          Record the codegen name for symbols
  -index-store-path <value>
                          Enable indexing with the specified data store path
  -index-unit-output-path <path>
                          Use <path> as the output path for this compilation unit in the index unit file
  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix
  -iquote <directory>     Add directory to QUOTE include search path
  -isysroot <dir>         Set the system root directory (usually /)
  -isystem-after <directory>
                          Add directory to end of the SYSTEM include search path
  -isystem <directory>    Add directory to SYSTEM include search path
  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system
  -ivfsstatcache <value>  Use the stat data cached in file instead of doing filesystem syscalls. See clang-stat-cache utility.
  -iwithprefixbefore <dir>
                          Set directory to include search path with prefix
  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix
  -iwithsysroot <directory>
                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot
  -I <dir>                Add directory to the end of the list of include search paths
  --libomptarget-amdgcn-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-amdgpu-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-nvptx-bc-path=<value>
                          Path to libomptarget-nvptx bitcode library
  -L <dir>                Add directory to library search path
  -mabi=quadword-atomics  Enable quadword atomics ABI on AIX (AIX PPC64 only). Uses lqarx/stqcx. instructions.
  -mabi=vec-default       Enable the default Altivec ABI on AIX (AIX only). Uses only volatile vector registers.
  -mabi=vec-extabi        Enable the extended Altivec ABI on AIX (AIX only). Uses volatile and nonvolatile vector registers
  -mabicalls              Enable SVR4-style position-independent code (Mips only)
  -maix-struct-return     Return all structs in memory (PPC32 only)
  -malign-branch-boundary=<value>
                          Specify the boundary's size to align branches
  -malign-branch=<value>  Specify types of branches to align
  -malign-double          Align doubles to two words in structs (x86 only)
  -mamdgpu-ieee           Sets the IEEE bit in the expected default floating point  mode register. Floating point opcodes that support exception flag gathering quiet and propagate signaling NaN inputs per IEEE 754-2008. This option changes the ABI. (AMDGPU only)
  -mbackchain             Link stack frames through backchain on System Z
  -mbranch-protection=<value>
                          Enforce targets of indirect branches and function returns
  -mbranches-within-32B-boundaries
                          Align selected branches (fused, jcc, jmp) within 32-byte boundary
  -mcmodel=medany         Equivalent to -mcmodel=medium, compatible with RISC-V gcc.
  -mcmodel=medlow         Equivalent to -mcmodel=small, compatible with RISC-V gcc.
  -mcmse                  Allow use of CMSE (Armv8-M Security Extensions)
  -mcode-object-v3        Legacy option to specify code object ABI V3 (AMDGPU only)
  -mcode-object-version=<value>
                          Specify code object ABI version. Defaults to 4. (AMDGPU only)
  -mcrc                   Allow use of CRC instructions (ARM/Mips only)
  -mcumode                Specify CU wavefront execution mode (AMDGPU only)
  -mdefault-visibility-export-mapping=<value>
                          Mapping between default visibility and export
  -mdouble=<n             Force double to be <n> bits
  -MD                     Write a depfile containing user and system headers
  -meabi <value>          Set EABI type. Default depends on triple)
  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)
  -menable-experimental-extensions
                          Enable use of experimental RISC-V extensions.
  -menable-unsafe-fp-math Allow unsafe floating-point math optimizations which may decrease precision
  -mexec-model=<value>    Execution model (WebAssembly only)
  -mexecute-only          Disallow generation of data access to code sections (ARM only)
  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mfentry                Insert calls to fentry at function entry (x86/SystemZ only)
  -mfix-cmse-cve-2021-35465
                          Work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mfix-cortex-a57-aes-1742098
                          Work around Cortex-A57 Erratum 1742098 (ARM only)
  -mfix-cortex-a72-aes-1655431
                          Work around Cortex-A72 Erratum 1655431 (ARM only)
  -mfp32                  Use 32-bit floating point registers (MIPS only)
  -mfp64                  Use 64-bit floating point registers (MIPS only)
  -mframe-chain=<value>   Select the frame chain model used to emit frame records (Arm only).
  -mfunction-return=<value>
                          Replace returns with jumps to ``__x86_return_thunk`` (x86 only, error otherwise)
  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>
  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64/x86 only)
  -mglobal-merge          Enable merging of globals
  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mguard=<value>         Enable or disable Control Flow Guard checks and guard tables emission
  -MG                     Add missing headers to depfile
  -mharden-sls=<value>    Select straight-line speculation hardening scope (ARM/AArch64/X86 only). <arg> must be: all, none, retbr(ARM/AArch64), blr(ARM/AArch64), comdat(ARM/AArch64), nocomdat(ARM/AArch64), return(X86), indirect-jmp(X86)
  -mhvx-ieee-fp           Enable Hexagon HVX IEEE floating-point
  -mhvx-length=<value>    Set Hexagon Vector Length
  -mhvx-qfloat            Enable Hexagon HVX QFloat instructions
  -mhvx=<value>           Enable Hexagon Vector eXtensions
  -mhvx                   Enable Hexagon Vector eXtensions
  -miamcu                 Use Intel MCU ABI
  -mibt-seal              Optimize fcf-protection=branch/full (requires LTO).
  -mignore-xcoff-visibility
                          Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspecified' visibility in XCOFF object file
  --migrate               Run the migrator
  -mincremental-linker-compatible
                          (integrated-as) Emit an object file which can be used with an incremental linker
  -mindirect-branch-cs-prefix
                          Add cs prefix to call and jmp to indirect thunk
  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation
  -mios-version-min=<value>
                          Set iOS deployment target
  -MJ <value>             Write a compilation database entry per input
  -mllvm <value>          Additional arguments to forward to LLVM's option processing
  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)
  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.
  -mlong-double-128       Force long double to be 128 bits
  -mlong-double-64        Force long double to be 64 bits
  -mlong-double-80        Force long double to be 80 bits, padded to 128 bits for storage
  -mlvi-cfi               Enable only control-flow mitigations for Load Value Injection (LVI)
  -mlvi-hardening         Enable all mitigations for Load Value Injection (LVI)
  -mmacos-version-min=<value>
                          Set macOS deployment target
  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.
  -mmark-bti-property     Add .note.gnu.property with BTI to assembly files (AArch64 only)
  -MMD                    Write a depfile containing user headers
  -mmemops                Enable generation of memop instructions
  -mmlir <value>          Additional arguments to forward to MLIR's option processing
  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard
  -mmsa                   Enable MSA ASE (MIPS only)
  -mmt                    Enable MT ASE (MIPS only)
  -MM                     Like -MMD, but also implies -E and writes to stdout by default
  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)
  -mno-bti-at-return-twice
                          Do not add a BTI instruction after a setjmp or other return-twice construct (Arm/AArch64 only)
  -mno-code-object-v3     Legacy option to specify code object ABI V2 (AMDGPU only)
  -mno-crc                Disallow use of CRC instructions (Mips only)
  -mno-cumode             Specify WGP wavefront execution mode (AMDGPU only)
  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)
  -mno-execute-only       Allow generation of data access to code sections (ARM only)
  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mno-fix-cmse-cve-2021-35465
                          Don't work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mno-fix-cortex-a53-835769
                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mno-fix-cortex-a57-aes-1742098
                          Don't work around Cortex-A57 Erratum 1742098 (ARM only)
  -mno-fix-cortex-a72-aes-1655431
                          Don't work around Cortex-A72 Erratum 1655431 (ARM only)
  -mno-global-merge       Disable merging of globals
  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mno-hvx-ieee-fp        Disable Hexagon HVX IEEE floating-point
  -mno-hvx-qfloat         Disable Hexagon HVX QFloat instructions
  -mno-hvx                Disable Hexagon Vector eXtensions
  -mno-implicit-float     Don't generate implicit floating point instructions
  -mno-implicit-sme       Don't generate implicit SME instructions or mode switches
  -mno-incremental-linker-compatible
                          (integrated-as) Emit an object file which cannot be used with an incremental linker
  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)
  -mno-long-calls         Restore the default behaviour of not generating long calls
  -mno-lvi-cfi            Disable control-flow mitigations for Load Value Injection (LVI)
  -mno-lvi-hardening      Disable mitigations for Load Value Injection (LVI)
  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.
  -mno-memops             Disable generation of memop instructions
  -mno-movt               Disallow use of movt/movw pairs (ARM only)
  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard
  -mno-msa                Disable MSA ASE (MIPS only)
  -mno-mt                 Disable MT ASE (MIPS only)
  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.
  -mno-nvj                Disable generation of new-value jumps
  -mno-nvs                Disable generation of new-value stores
  -mno-outline-atomics    Don't generate local calls to out-of-line atomic operations
  -mno-outline            Disable function outlining (AArch64 only)
  -mno-packets            Disable generation of instruction packets
  -mno-relax              Disable linker relaxation
  -mno-restrict-it        Allow generation of complex IT blocks.
  -mno-save-restore       Disable using library calls for save and restore
  -mno-seses              Disable speculative execution side effect suppression (SESES)
  -mno-stack-arg-probe    Disable stack probes which are enabled by default
  -mno-tgsplit            Disable threadgroup split execution mode (AMDGPU only)
  -mno-tls-direct-seg-refs
                          Disable direct TLS access through segment registers
  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)
  -mno-wavefrontsize64    Specify wavefront size 32 mode (AMDGPU only)
  -mnocrc                 Disallow use of CRC instructions (ARM only)
  -mnop-mcount            Generate mcount/__fentry__ calls as nops. To activate they need to be patched in.
  -mnvj                   Enable generation of new-value jumps
  -mnvs                   Enable generation of new-value stores
  -module-dependency-dir <value>
                          Directory to dump module dependencies to
  -module-file-info       Provide information about a particular module file
  -momit-leaf-frame-pointer
                          Omit frame pointer setup for leaf functions
  -moutline-atomics       Generate local calls to out-of-line atomic operations
  -moutline               Enable function outlining (AArch64 only)
  -mpacked-stack          Use packed stack layout (SystemZ only).
  -mpackets               Enable generation of instruction packets
  -mpad-max-prefix-size=<value>
                          Specify maximum number of prefixes to use for padding
  -mprefer-vector-width=<value>
                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.
  -MP                     Create phony target for each dependency (other than main file)
  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility
  -MQ <value>             Specify name of main file output to quote in depfile
  -mrecord-mcount         Generate a __mcount_loc section entry for each __fentry__ call.
  -mrelax-all             (integrated-as) Relax all machine instructions
  -mrelax                 Enable linker relaxation
  -mrestrict-it           Disallow generation of complex IT blocks.
  -mrtd                   Make StdCall calling convention the default
  -msave-restore          Enable using library calls for save and restore
  -mseses                 Enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations
  -msign-return-address=<value>
                          Select return address signing scope
  -mskip-rax-setup        Skip setting up RAX register when passing variable arguments (x86 only)
  -msmall-data-limit=<value>
                          Put global and static data smaller than the limit into a special section
  -msoft-float            Use software floating point
  -mstack-alignment=<value>
                          Set the stack alignment
  -mstack-arg-probe       Enable stack probes
  -mstack-probe-size=<value>
                          Set the stack probe size
  -mstack-protector-guard-offset=<value>
                          Use the given offset for addressing the stack-protector guard
  -mstack-protector-guard-reg=<value>
                          Use the given reg for addressing the stack-protector guard
  -mstack-protector-guard-symbol=<value>
                          Use the given symbol for addressing the stack-protector guard
  -mstack-protector-guard=<value>
                          Use the given guard (global, tls) for addressing the stack-protector guard
  -mstackrealign          Force realign the stack at entry to every function
  -msve-vector-bits=<value>
                          Specify the size in bits of an SVE vector register. Defaults to the vector length agnostic value of "scalable". (AArch64 only)
  -msvr4-struct-return    Return small structs in registers (PPC32 only)
  -mtargetos=<value>      Set the deployment target to be the specified OS and OS version
  -mtgsplit               Enable threadgroup split execution mode (AMDGPU only)
  -mthread-model <value>  The thread model to use. Defaults to 'posix')
  -mtls-direct-seg-refs   Enable direct TLS access through segment registers (default)
  -mtls-size=<value>      Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)
  -mtp=<value>            Thread pointer access method (AArch32/AArch64 only)
  -mtune=<value>          Only supported on AArch64, PowerPC, RISC-V, SystemZ, and X86
  -MT <value>             Specify name of main file output in depfile
  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)
  -munsafe-fp-atomics     Enable unsafe floating point atomic instructions (AMDGPU only)
  -mvscale-max=<value>    Specify the vscale maximum. Defaults to the vector length agnostic value of "0". (AArch64 only)
  -mvscale-min=<value>    Specify the vscale minimum. Defaults to "1". (AArch64 only)
  -MV                     Use NMake/Jom format for the depfile
  -mwavefrontsize64       Specify wavefront size 64 mode (AMDGPU only)
  -M                      Like -MD, but also implies -E and writes to stdout by default
  --no-cuda-include-ptx=<value>
                          Do not include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.
  --no-default-config     Disable loading default configuration files
  --no-gpu-bundle-output  Do not bundle output files of HIP device compilation
  -no-hip-rt              Do not link against HIP runtime libraries
  --no-offload-arch=<value>
                          Remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. 'all' resets the list to its default value.
  --no-offload-new-driver Don't Use the new driver for offloading compilation.
  --no-system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as not including a system header.
  -nobuiltininc           Disable builtin #include directories
  -nogpuinc               Do not add include paths for CUDA/HIP and do not include the default CUDA/HIP wrapper headers
  -nogpulib               Do not link device library for CUDA/HIP device compilation
  -nohipwrapperinc        Do not include the default HIP wrapper headers and include paths
  -nostdinc++             Disable standard #include directories for the C++ standard library
  -ObjC++                 Treat source input files as Objective-C++ inputs
  -objcmt-allowlist-dir-path=<value>
                          Only modify files with a filename contained in the provided directory path
  -objcmt-atomic-property Make migration to 'atomic' properties
  -objcmt-migrate-all     Enable migration to modern ObjC
  -objcmt-migrate-annotation
                          Enable migration to property and method annotations
  -objcmt-migrate-designated-init
                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods
  -objcmt-migrate-instancetype
                          Enable migration to infer instancetype for method result type
  -objcmt-migrate-literals
                          Enable migration to modern ObjC literals
  -objcmt-migrate-ns-macros
                          Enable migration to NS_ENUM/NS_OPTIONS macros
  -objcmt-migrate-property-dot-syntax
                          Enable migration of setter/getter messages to property-dot syntax
  -objcmt-migrate-property
                          Enable migration to modern ObjC property
  -objcmt-migrate-protocol-conformance
                          Enable migration to add protocol conformance on classes
  -objcmt-migrate-readonly-property
                          Enable migration to modern ObjC readonly property
  -objcmt-migrate-readwrite-property
                          Enable migration to modern ObjC readwrite property
  -objcmt-migrate-subscripting
                          Enable migration to modern ObjC subscripting
  -objcmt-ns-nonatomic-iosonly
                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute
  -objcmt-returns-innerpointer-property
                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER
  -objcmt-whitelist-dir-path=<value>
                          Alias for -objcmt-allowlist-dir-path
  -ObjC                   Treat source input files as Objective-C inputs
  -object-file-name=<file>
                          Set the output <file> for debug infos
  --offload-arch=<value>  CUDA offloading device architecture (e.g. sm_35), or HIP offloading target ID in the form of a device architecture followed by target ID features delimited by a colon. Each target ID feature is a pre-defined string followed by a plus or minus sign (e.g. gfx908:xnack+:sramecc-).  May be specified more than once.
  --offload-device-only   Only compile for the offloading device.
  --offload-host-device   Only compile for the offloading host.
  --offload-host-only     Only compile for the offloading host.
  --offload-link          Use the new offloading linker to perform the link job.
  --offload-new-driver    Use the new driver for offloading compilation.
  --offload=<value>       Specify comma-separated list of offloading target triples (CUDA and HIP only)
  -o <file>               Write output to <file>
  -pedantic               Warn on language extensions
  -pg                     Enable mcount instrumentation
  -pipe                   Use pipes between commands, when possible
  --precompile            Only precompile the input
  -print-diagnostic-options
                          Print all of Clang's warning options
  -print-effective-triple Print the effective target triple
  -print-file-name=<file> Print the full library path of <file>
  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace
  -print-libgcc-file-name Print the library path for the currently used compiler runtime library ("libgcc.a" or "libclang_rt.builtins.*.a")
  -print-prog-name=<name> Print the full program path of <name>
  -print-resource-dir     Print the resource directory pathname
  -print-rocm-search-dirs Print the paths used for finding ROCm installation
  -print-runtime-dir      Print the directory pathname containing clangs runtime libraries
  -print-search-dirs      Print the paths used for finding libraries and programs
  -print-supported-cpus   Print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)
  -print-target-triple    Print the normalized target triple
  -print-targets          Print the registered targets
  -pthread                Support POSIX threads in generated code
  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)
  -P                      Disable linemarker output in -E mode
  -Qn                     Do not emit metadata containing compiler name and version
  -Qunused-arguments      Don't emit warning for unused driver arguments
  -Qy                     Emit metadata containing compiler name and version
  -relocatable-pch        Whether to build a relocatable precompiled header
  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++
  -rewrite-objc           Rewrite Objective-C source to C++
  --rocm-device-lib-path=<value>
                          ROCm device library path. Alternative to rocm-path.
  --rocm-path=<value>     ROCm installation path, used for finding and automatically linking required bitcode libraries.
  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression
  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression
  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression
  -rtlib=<value>          Compiler runtime library to use
  -R<remark>              Enable the specified remark
  -save-stats=<value>     Save llvm statistics.
  -save-stats             Save llvm statistics.
  -save-temps=<value>     Save intermediate compilation results.
  -save-temps             Save intermediate compilation results
  -serialize-diagnostics <value>
                          Serialize compiler diagnostics to a file
  -shared-libsan          Dynamically link the sanitizer runtime
  --start-no-unused-arguments
                          Don't emit warnings about unused arguments for the following arguments
  -static-libsan          Statically link the sanitizer runtime
  -static-openmp          Use the static host OpenMP runtime while linking.
  -std=<value>            Language standard to compile for
  -stdlib++-isystem <directory>
                          Use directory as the C++ standard library include path
  -stdlib=<value>         C++ standard library to use
  -sycl-std=<value>       SYCL language standard to compile for.
  --system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as including a system header.
  -S                      Only run preprocess and compilation steps
  --target=<value>        Generate code for the given target
  -time                   Time individual commands
  -traditional-cpp        Enable some traditional CPP emulation
  -trigraphs              Process trigraph sequences
  -T <script>             Specify <script> as linker script
  -undef                  undef all system defines
  -unwindlib=<value>      Unwind library to use
  -U <macro>              Undefine macro <macro>
  --verify-debug-info     Verify the binary representation of debug output
  -verify-pch             Load and verify that a pre-compiled header file is not stale
  --version               Print version information
  -v                      Show commands to run and use verbose output
  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler
  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED
  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker
  -working-directory <value>
                          Resolve file paths relative to the specified directory
  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor
  -W<warning>             Enable the specified warning
  -w                      Suppress all warnings
  -Xanalyzer <arg>        Pass <arg> to the static analyzer
  -Xarch_device <arg>     Pass <arg> to the CUDA/HIP device compilation
  -Xarch_host <arg>       Pass <arg> to the CUDA/HIP host compilation
  -Xassembler <arg>       Pass <arg> to the assembler
  -Xclang=<arg>           Alias for -Xclang
  -Xclang <arg>           Pass <arg> to clang -cc1
  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation
  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler
  -Xlinker <arg>          Pass <arg> to the linker
  -Xoffload-linker<triple> <arg>
                          Pass <arg> to the offload linkers or the ones idenfied by -<triple>
  -Xopenmp-target=<triple> <arg>
                          Pass <arg> to the target offloading toolchain identified by <triple>.
  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.
  -Xpreprocessor <arg>    Pass <arg> to the preprocessor
  -x <language>           Treat subsequent input files as having type <language>
  -z <arg>                Pass -z <arg> to the linker
Executing: g++ --help | head -n 20 
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
stdout: error: write on a pipe with no reader
Executing: g++ --help
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
  -cl-ext=<value>         OpenCL only. Enable or disable OpenCL extensions/optional features. The argument is a comma-separated sequence of one or more extension names, each prefixed by '+' or '-'.
  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.
  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.
  -cl-fp32-correctly-rounded-divide-sqrt
                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.
  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.
  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.
  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.
  -cl-no-stdinc           OpenCL only. Disables all standard includes containing non-native compiler types and functions.
  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.
  -cl-single-precision-constant
                          OpenCL only. Treat double precision floating-point constant as single precision constant.
  -cl-std=<value>         OpenCL language standard to compile for.
  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.
  -cl-uniform-work-group-size
                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel
  -cl-unsafe-math-optimizations
                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.
  --config=<file>         Specify configuration file
  --cuda-compile-host-device
                          Compile CUDA code for both host and device (default). Has no effect on non-CUDA compilations.
  --cuda-device-only      Compile CUDA code for device only
  --cuda-feature=<value>  Manually specify the CUDA feature to use
  --cuda-host-only        Compile CUDA code for host only. Has no effect on non-CUDA compilations.
  --cuda-include-ptx=<value>
                          Include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --cuda-noopt-device-debug
                          Enable device-side debug info generation. Disables ptxas optimizations.
  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation
  --cuda-path=<value>     CUDA installation path
  -cuid=<value>           An ID for compilation unit, which should be the same for the same compilation unit but different for different compilation units. It is used to externalize device-side static variables for single source offloading languages CUDA and HIP so that they can be accessed by the host code of the same compilation unit.
  -cxx-isystem <directory>
                          Add directory to the C++ SYSTEM include search path
  -C                      Include comments in preprocessed output
  -c                      Only run preprocess, compile, and assemble steps
  -darwin-target-variant-triple <value>
                          Specify the darwin target variant triple
  -darwin-target-variant <value>
                          Generate code for an additional runtime variant of the deployment target
  -dD                     Print macro definitions in -E mode in addition to normal output
  -dependency-dot <value> Filename to write DOT-formatted header dependencies to
  -dependency-file <value>
                          Filename (or -) to write dependency output to
  -dI                     Print include directives in -E mode in addition to normal output
  -dM                     Print macro definitions in -E mode instead of normal output
  -dsym-dir <dir>         Directory to output dSYM's (if any) to
  -dump-depscan-tree=<value>
                          emit the CAS identifier for the tree instead of the full -cc1
  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)
  -emit-ast               Emit Clang AST files for source inputs
  -emit-interface-stubs   Generate Interface Stub Files.
  -emit-llvm              Use the LLVM representation for assembler and object files
  -emit-merged-ifs        Generate Interface Stub Files, emit merged text not binary.
  --emit-static-lib       Enable linker job to emit a static library.
  --end-no-unused-arguments
                          Start emitting warnings for unused driver arguments
  --extract-api-ignores=<value>
                          Comma separated list of files containing a new line separated list of API symbols to ignore when extracting API information.
  -extract-api            Extract API information
  -E                      Only run the preprocessor
  -faapcs-bitfield-load   Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).
  -faapcs-bitfield-width  Follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -faddrsig               Emit an address-significance table
  -falign-loops=<N>       N must be a power of two. Align loops to the boundary
  -faligned-allocation    Enable C++17 aligned allocation functions
  -fallow-editor-placeholders
                          Treat editor placeholders as valid source code
  -faltivec-src-compat=<value>
                          Source-level compatibility for Altivec vectors (for PowerPC targets). This includes results of vector comparison (scalar for 'xl', vector for 'gcc') as well as behavior when initializing with a scalar (splatting for 'xl', element zero only for 'gcc'). For 'mixed', the compatibility is as 'gcc' for 'vector bool/vector pixel' and as 'xl' for other types. Current default is 'mixed'.
  -fansi-escape-codes     Use ANSI escape codes for diagnostics
  -fapinotes-cache-path=<directory>
                          Does nothing; API notes are no longer cached separately from modules
  -fapinotes-modules      Enable module-based external API notes support
  -fapinotes-swift-version=<version>
                          Specify the Swift version to use when filtering API notes
  -fapinotes              Enable external API notes support
  -fapple-kext            Use Apple's kernel extensions ABI
  -fapple-link-rtlib      Force linking the clang builtins runtime library
  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling
  -fapplication-extension Restrict code to those available for App Extensions
  -fapprox-func           Allow certain math function calls to be replaced with an approximately equivalent calculation
  -fasync-exceptions      Enable EH Asynchronous exceptions
  -fbasic-block-sections=<value>
                          Place each function's basic blocks in unique sections (ELF Only)
  -fbinutils-version=<major.minor>
                          Produced object files can use all ELF features supported by this binutils version and newer. If -fno-integrated-as is specified, the generated assembly will consider GNU as support. 'none' means that all ELF features can be used, regardless of binutils support. Defaults to 2.26.
  -fblocks                Enable the 'blocks' language feature
  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler
  -fbranch-target-identification
                          Emit branch target identification instructions for indirect branch destinations
  -fbuild-session-file=<file>
                          Use the last modification time of <file> as the build session timestamp
  -fbuild-session-timestamp=<time since Epoch in seconds>
                          Time when the current build session started
  -fbuiltin-module-map    Load the clang builtins module map file.
  -fc++-abi=<value>       C++ ABI to use. This will override the target C++ ABI.
  -fcall-saved-x10        Make the x10 register call-saved (AArch64 only)
  -fcall-saved-x11        Make the x11 register call-saved (AArch64 only)
  -fcall-saved-x12        Make the x12 register call-saved (AArch64 only)
  -fcall-saved-x13        Make the x13 register call-saved (AArch64 only)
  -fcall-saved-x14        Make the x14 register call-saved (AArch64 only)
  -fcall-saved-x15        Make the x15 register call-saved (AArch64 only)
  -fcall-saved-x18        Make the x18 register call-saved (AArch64 only)
  -fcall-saved-x8         Make the x8 register call-saved (AArch64 only)
  -fcall-saved-x9         Make the x9 register call-saved (AArch64 only)
  -fcf-protection=<value> Instrument control-flow architecture protection
  -fcf-protection         Enable cf-protection in 'full' mode
  -fchar8_t               Enable C++ builtin type char8_t
  -fclang-abi-compat=<version>
                          Attempt to match the ABI of Clang <version>
  -fcolor-diagnostics     Enable colors in diagnostics
  -fcomment-block-commands=<arg>
                          Treat each comma separated argument in <arg> as a documentation comment block command
  -fcommon                Place uninitialized global variables in a common block
  -fcomplete-member-pointers
                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fconvergent-functions  Assume functions may be convergent
  -fcoro-aligned-allocation
                          Prefer aligned allocation for C++ Coroutines
  -fcoroutines-ts         Enable support for the C++ Coroutines TS
  -fcoverage-compilation-dir=<value>
                          The compilation directory to embed in the coverage mapping.
  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis
  -fcoverage-prefix-map=<value>
                          remap file source paths in coverage mapping
  -fcrash-diagnostics-dir=<dir>
                          Put crash-report files in <dir>
  -fcrash-diagnostics=<value>
                          Set level of crash diagnostic reporting, (option: off, compiler, all)
  -fcrash-diagnostics     Enable crash diagnostic reporting (default)
  -fcs-profile-generate=<directory>
                          Generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcs-profile-generate   Generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcuda-approx-transcendentals
                          Use approximate transcendental functions
  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces
  -fcxx-exceptions        Enable C++ exceptions
  -fcxx-modules           Enable modules for C++
  -fdata-sections         Place each data in its own section
  -fdebug-compilation-dir=<value>
                          The compilation directory to embed in the debug info
  -fdebug-default-version=<value>
                          Default DWARF version to use, if a -g option caused DWARF debug info to be produced
  -fdebug-info-for-profiling
                          Emit extra debug info to make sample profile more accurate
  -fdebug-macro           Emit macro debug information
  -fdebug-prefix-map=<value>
                          remap file source paths in debug info
  -fdebug-ranges-base-address
                          Use DWARF base address selection entries in .debug_ranges
  -fdebug-types-section   Place debug types in their own section (ELF Only)
  -fdeclspec              Allow __declspec as a keyword
  -fdelayed-template-parsing
                          Parse templated function definitions at the end of the translation unit
  -fdelete-null-pointer-checks
                          Treat usage of null pointers as undefined behavior (default)
  -fdepscan-daemon=<value>
                          Specify the path to the daemon to be used. Clang will use the daemon specified, rather than try to spawn its own based on parent processes.
  -fdepscan-include-tree  Set dep-scanner to produce the include tree
  -fdepscan-prefix-map-sdk=<new>
                          With -fdepscan, auto-detect the SDK path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map-toolchain=<new>
                          With -fdepscan, auto-detect the toolchain path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map=<old>=<new>
                          With -fdepscan, seamlessly filter the CAS filesystem to apply the given prefix, updating the command-line to match.
  -fdepscan-share-identifier <value>
                          Share depscan daemon for Clang invocations using the same string identifier.
  -fdepscan-share-parent=<value>
                          Share state based on the PID of the parent command if the name matches. See also -fdepscan-share-stop.
  -fdepscan-share-parent  Share state based on the PID of the parent command. See also -fdepscan-share-stop.
  -fdepscan-share-stop=<value>
                          Stop looking for the command named by -fdepscan-share if a process with the name of the provided argument is found first. Also blocks -fdepscan-share=parent if the parent has this name. E.g., -fdepscan -fdepscan-share=ninja -fdepscan-share-stop=cmake looks for 'ninja' and 'cmake' in the process tree; if 'ninja' is found first, state is shared based on ninja's PID; if 'cmake' is found first, state is not shared.
  -fdepscan-share=<value> If the argument is the name of a command in the process tree, share state based on its PID. E.g., -fdepscan -fdepscan-share=ninja will search for 'ninja' in the process tree and share state based on its PID if found. See also -fdepscan-share-stop.
  -fdepscan=<value>       Scan for dependencies ahead of compiling, generating a pruned CAS tree to send to -fcas-fs. Values are 'auto', 'daemon' (see -fdepscan-share and -fdepscan-share-parent), 'inline', or 'off' (default).
  -fdepscan               Turn on -fdepscan=auto.
  -fdiagnostics-absolute-paths
                          Print absolute paths in diagnostics
  -fdiagnostics-hotness-threshold=<value>
                          Prevent optimization remarks from being output if they do not have at least this profile count. Use 'auto' to apply the threshold from profile summary
  -fdiagnostics-misexpect-tolerance=<value>
                          Prevent misexpect diagnostics from being output if the profile counts are within N% of the expected. 
  -fdiagnostics-parseable-fixits
                          Print fix-its in machine parseable form
  -fdiagnostics-print-source-range-info
                          Print source range spans in numeric form
  -fdiagnostics-show-hotness
                          Enable profile hotness information in diagnostic line
  -fdiagnostics-show-note-include-stack
                          Display include stacks for diagnostic notes
  -fdiagnostics-show-option
                          Print option name with mappable diagnostics
  -fdiagnostics-show-template-tree
                          Print a template comparison tree for differing templates
  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)
  -fdirect-access-external-data
                          Don't use GOT indirection to reference external data symbols
  -fdiscard-value-names   Discard value names in LLVM IR
  -fdollars-in-identifiers
                          Allow '$' in identifiers
  -fdouble-square-bracket-attributes
                          Enable '[[]]' attributes in all C and C++ language modes
  -fdriver-only           Only run the driver.
  -fdwarf-exceptions      Use DWARF style exceptions
  -feliminate-unused-debug-types
                          Do not emit  debug info for defined but unused types
  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker
  -fembed-bitcode=<option>
                          Embed LLVM bitcode
  -fembed-bitcode         Embed LLVM IR bitcode as data
  -fembed-offload-object=<value>
                          Embed Offloading device-side binary into host object file as a section.
  -femit-all-decls        Emit all declarations, even if unused
  -femit-dwarf-unwind=<value>
                          When to emit DWARF unwind (EH frame) info
  -femulated-tls          Use emutls functions to access thread_local variables
  -fenable-matrix         Enable matrix data type and related builtin functions
  -fexceptions            Enable support for exception handling
  -fexperimental-library  Control whether unstable and experimental library features are enabled. This option enables various library features that are either experimental (also known as TSes), or have been but are not stable yet in the selected Standard Library implementation. It is not recommended to use this option in production code, since neither ABI nor API stability are guaranteed. This is intended to provide a preview of features that will ship in the future for experimentation purposes
  -fexperimental-new-constant-interpreter
                          Enable the experimental new constant interpreter
  -fexperimental-relative-c++-abi-vtables
                          Use the experimental C++ class ABI for classes with virtual tables
  -fexperimental-sanitize-metadata=<value>
                          Specify the type of metadata to emit for binary analysis sanitizers
  -fexperimental-strict-floating-point
                          Enables experimental strict floating point in LLVM.
  -fextend-arguments=<value>
                          Controls how scalar integer arguments are extended in calls to unprototyped and varargs functions
  -ffast-math             Allow aggressive, lossy floating-point optimizations
  -ffile-compilation-dir=<value>
                          The compilation directory to embed in the debug info and coverage mapping.
  -ffile-prefix-map=<value>
                          remap file source paths in debug info, predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -ffile-reproducible     Use the target's platform-specific path separator character when expanding the __FILE__ macro
  -ffine-grained-bitfield-accesses
                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.
  -ffinite-loops          Assume all loops are finite.
  -ffixed-a0              Reserve the a0 register (M68k only)
  -ffixed-a1              Reserve the a1 register (M68k only)
  -ffixed-a2              Reserve the a2 register (M68k only)
  -ffixed-a3              Reserve the a3 register (M68k only)
  -ffixed-a4              Reserve the a4 register (M68k only)
  -ffixed-a5              Reserve the a5 register (M68k only)
  -ffixed-a6              Reserve the a6 register (M68k only)
  -ffixed-d0              Reserve the d0 register (M68k only)
  -ffixed-d1              Reserve the d1 register (M68k only)
  -ffixed-d2              Reserve the d2 register (M68k only)
  -ffixed-d3              Reserve the d3 register (M68k only)
  -ffixed-d4              Reserve the d4 register (M68k only)
  -ffixed-d5              Reserve the d5 register (M68k only)
  -ffixed-d6              Reserve the d6 register (M68k only)
  -ffixed-d7              Reserve the d7 register (M68k only)
  -ffixed-point           Enable fixed point types
  -ffixed-r19             Reserve register r19 (Hexagon only)
  -ffixed-r9              Reserve the r9 register (ARM only)
  -ffixed-x10             Reserve the x10 register (AArch64/RISC-V only)
  -ffixed-x11             Reserve the x11 register (AArch64/RISC-V only)
  -ffixed-x12             Reserve the x12 register (AArch64/RISC-V only)
  -ffixed-x13             Reserve the x13 register (AArch64/RISC-V only)
  -ffixed-x14             Reserve the x14 register (AArch64/RISC-V only)
  -ffixed-x15             Reserve the x15 register (AArch64/RISC-V only)
  -ffixed-x16             Reserve the x16 register (AArch64/RISC-V only)
  -ffixed-x17             Reserve the x17 register (AArch64/RISC-V only)
  -ffixed-x18             Reserve the x18 register (AArch64/RISC-V only)
  -ffixed-x19             Reserve the x19 register (AArch64/RISC-V only)
  -ffixed-x1              Reserve the x1 register (AArch64/RISC-V only)
  -ffixed-x20             Reserve the x20 register (AArch64/RISC-V only)
  -ffixed-x21             Reserve the x21 register (AArch64/RISC-V only)
  -ffixed-x22             Reserve the x22 register (AArch64/RISC-V only)
  -ffixed-x23             Reserve the x23 register (AArch64/RISC-V only)
  -ffixed-x24             Reserve the x24 register (AArch64/RISC-V only)
  -ffixed-x25             Reserve the x25 register (AArch64/RISC-V only)
  -ffixed-x26             Reserve the x26 register (AArch64/RISC-V only)
  -ffixed-x27             Reserve the x27 register (AArch64/RISC-V only)
  -ffixed-x28             Reserve the x28 register (AArch64/RISC-V only)
  -ffixed-x29             Reserve the x29 register (AArch64/RISC-V only)
  -ffixed-x2              Reserve the x2 register (AArch64/RISC-V only)
  -ffixed-x30             Reserve the x30 register (AArch64/RISC-V only)
  -ffixed-x31             Reserve the x31 register (AArch64/RISC-V only)
  -ffixed-x3              Reserve the x3 register (AArch64/RISC-V only)
  -ffixed-x4              Reserve the x4 register (AArch64/RISC-V only)
  -ffixed-x5              Reserve the x5 register (AArch64/RISC-V only)
  -ffixed-x6              Reserve the x6 register (AArch64/RISC-V only)
  -ffixed-x7              Reserve the x7 register (AArch64/RISC-V only)
  -ffixed-x8              Reserve the x8 register (AArch64/RISC-V only)
  -ffixed-x9              Reserve the x9 register (AArch64/RISC-V only)
  -fforce-dwarf-frame     Always emit a debug frame section
  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization
  -fforce-enable-int128   Enable support for int128_t type
  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (fuses across statements disregarding pragmas) | on (only fuses in the same statement unless dictated by pragmas) | off (never fuses) | fast-honor-pragmas (fuses across statements unless diectated by pragmas). Default is 'fast' for CUDA, 'fast-honor-pragmas' for HIP, and 'on' otherwise.
  -ffp-eval-method=<value>
                          Specifies the evaluation method to use for floating-point arithmetic.
  -ffp-exception-behavior=<value>
                          Specifies the exception behavior of floating-point operations.
  -ffp-model=<value>      Controls the semantics of floating-point calculations.
  -ffreestanding          Assert that the compilation takes place in a freestanding environment
  -ffuchsia-api-level=<value>
                          Set Fuchsia API level
  -ffunction-sections     Place each function in its own section
  -fgeneric-block-helpers Use generic block helpers for copying/destroying blocks
  -fglobal-isel           Enables the global instruction selector
  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard
  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime
  -fgnu89-inline          Use the gnu89 inline semantics
  -fgnuc-version=<value>  Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)
  -fgpu-allow-device-init Allow device side init function in HIP (experimental)
  -fgpu-default-stream=<value>
                          Specify default stream. The default value is 'legacy'. (HIP only)
  -fgpu-defer-diag        Defer host/device related diagnostic messages for CUDA/HIP
  -fgpu-flush-denormals-to-zero
                          Flush denormal floating point values to zero in CUDA/HIP device mode.
  -fgpu-rdc               Generate relocatable device code, also known as separate compilation mode
  -fgpu-sanitize          Enable sanitizer for AMDGPU target
  -fhip-fp32-correctly-rounded-divide-sqrt
                          Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fhip-kernel-arg-name   Specify that kernel argument names are preserved (HIP only)
  -fhip-new-launch-api    Use new kernel launching API for HIP
  -fignore-exceptions     Enable support for ignoring exception handling constructs
  -fimplicit-module-maps  Implicitly search the file system for module map files.
  -fin-descriptor-block-flags
                          Emit in-descriptor block flags
  -finline-functions      Inline suitable functions
  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline
  -finline-max-stacksize=<value>
                          Suppress inlining of functions whose stack size exceeds the given value
  -finput-charset=<value> Specify the default character set for source files
  -finstrument-function-entry-bare
                          Instrument function entry only, after inlining, without arguments to the instrumentation call
  -finstrument-functions-after-inlining
                          Like -finstrument-functions, but insert the calls after inlining
  -finstrument-functions  Generate calls to instrument function entry and exit
  -fintegrated-as         Enable the integrated assembler
  -fintegrated-cc1        Run cc1 in-process
  -fintegrated-objemitter Use internal machine object code emitter.
  -fjmc                   Enable just-my-code debugging
  -fjump-tables           Use jump tables for lowering switches
  -fkeep-static-consts    Keep static const variables if unused
  -flax-vector-conversions=<value>
                          Enable implicit vector bit-casts
  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)
  -flto=auto              Enable LTO in 'full' mode
  -flto=jobserver         Enable LTO in 'full' mode
  -flto=<value>           Set LTO mode
  -flto                   Enable LTO in 'full' mode
  -fmacro-prefix-map=<value>
                          remap file source paths in predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -fmath-errno            Require math functions to indicate errors by setting errno
  -fmax-tokens=<value>    Max total number of preprocessed tokens for -Wmax-tokens.
  -fmax-type-align=<value>
                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment
  -fmemory-profile=<directory>
                          Enable heap memory profiling and dump results into <directory>
  -fmemory-profile        Enable heap memory profiling
  -fmerge-all-constants   Allow merging of constants
  -fmessage-length=<value>
                          Format message diagnostics so that they fit within N columns
  -fminimize-whitespace   Minimize whitespace when emitting preprocessor output
  -fmodule-file=[<name>=]<file>
                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.
  -fmodule-header=<kind>  Build a C++20 Header Unit from a header that should be found in the user (fmodule-header=user) or system (fmodule-header=system) search path.
  -fmodule-header         Build a C++20 Header Unit from a header.
  -fmodule-map-file=<file>
                          Load this module map file
  -fmodule-name=<name>    Specify the name of the module to build
  -fmodule-related-to-pch Mark module as related to a PCH
  -fmodules-cache-path=<directory>
                          Specify the module cache path
  -fmodules-decluse       Require declaration of modules used within a module
  -fmodules-disable-diagnostic-validation
                          Disable validation of the diagnostic options when loading the module
  -fmodules-ignore-macro=<value>
                          Ignore the definition of the given macro when building and loading modules
  -fmodules-prune-after=<seconds>
                          Specify the interval (in seconds) after which a module file will be considered unused
  -fmodules-prune-interval=<seconds>
                          Specify the interval (in seconds) between attempts to prune the module cache
  -fmodules-search-all    Search even non-imported modules to resolve references
  -fmodules-strict-decluse
                          Like -fmodules-decluse but requires all headers to be in modules
  -fmodules-ts            Enable support for the C++ Modules TS
  -fmodules-user-build-path <directory>
                          Specify the module user build path
  -fmodules-validate-input-files-content
                          Validate PCM input files based on content if mtime differs
  -fmodules-validate-once-per-build-session
                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session
  -fmodules-validate-system-headers
                          Validate the system headers that a module depends on when loading the module
  -fmodules               Enable the 'modules' language feature
  -fms-compatibility-version=<value>
                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fms-compatibility      Enable full Microsoft Visual C++ compatibility
  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler
  -fms-hotpatch           Ensure that all functions can be hotpatched at runtime
  -fms-runtime-lib=<value>
                          Select Windows run-time library
  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'
  -fnew-infallible        Enable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-aapcs-bitfield-width
                          Do not follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -fno-access-control     Disable C++ access control
  -fno-addrsig            Don't emit an address-significance table
  -fno-apinotes-modules   Disable module-based external API notes support
  -fno-apinotes           Disable external API notes support
  -fno-assume-sane-operator-new
                          Don't assume that C++'s global operator new can't alias any pointer
  -fno-autolink           Disable generation of linker directives for automatic library linking
  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function
  -fno-builtin            Disable implicit builtin knowledge of functions
  -fno-c++-static-destructors
                          Disable C++ static destructor registration
  -fno-char8_t            Disable C++ builtin type char8_t
  -fno-color-diagnostics  Disable colors in diagnostics
  -fno-common             Compile common globals like normal definitions
  -fno-complete-member-pointers
                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings
  -fno-constant-nsarray-literals
                          Disable creation of CodeFoundation-type constant initializer `NSArray`s from array literals
  -fno-constant-nsdictionary-literals
                          Disable creation of CodeFoundation-type constant initializer `NSDictionary`s from dictionary literals
  -fno-constant-nsnumber-literals
                          Disable creation of CodeFoundation-type constant initializer `NSNumber`s from number literals
  -fno-coverage-mapping   Disable code coverage analysis
  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash
  -fno-cuda-approx-transcendentals
                          Don't use approximate transcendental functions
  -fno-cxx-modules        Disable modules for C++
  -fno-debug-macro        Do not emit macro debug information
  -fno-declspec           Disallow __declspec as a keyword
  -fno-delayed-template-parsing
                          Disable delayed template parsing
  -fno-delete-null-pointer-checks
                          Do not treat usage of null pointers as undefined behavior
  -fno-depscan-share      Turn off -fdepscan-share and -fdepscan-share-parent.
  -fno-diagnostics-fixit-info
                          Do not include fixit information in diagnostics
  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'
  -fno-direct-access-external-data
                          Use GOT indirection to reference external data symbols
  -fno-discard-value-names
                          Do not discard value names in LLVM IR
  -fno-dollars-in-identifiers
                          Disallow '$' in identifiers
  -fno-double-square-bracket-attributes
                          Disable '[[]]' attributes in all C and C++ language modes
  -fno-elide-constructors Disable C++ copy constructor elision
  -fno-elide-type         Do not elide types when printing diagnostics
  -fno-eliminate-unused-debug-types
                          Emit  debug info for defined but unused types
  -fno-exceptions         Disable support for exception handling
  -fno-experimental-relative-c++-abi-vtables
                          Do not use the experimental C++ class ABI for classes with virtual tables
  -fno-experimental-sanitize-metadata=<value>
                          Disable emitting metadata for binary analysis sanitizers
  -fno-file-reproducible  Use the host's platform-specific path separator character when expanding the __FILE__ macro
  -fno-fine-grained-bitfield-accesses
                          Use large-integer access for consecutive bitfield runs.
  -fno-finite-loops       Do not assume that any loop is finite.
  -fno-fixed-point        Disable fixed point types
  -fno-force-enable-int128
                          Disable support for int128_t type
  -fno-generic-block-helpers
                          Don't use generic block helpers for copying/destroying blocks
  -fno-global-isel        Disables the global instruction selector
  -fno-gnu-inline-asm     Disable GNU style inline asm
  -fno-gpu-allow-device-init
                          Don't allow device side init function in HIP (experimental)
  -fno-gpu-defer-diag     Don't defer host/device related diagnostic messages for CUDA/HIP
  -fno-hip-fp32-correctly-rounded-divide-sqrt
                          Don't specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fno-hip-kernel-arg-name
                          Don't specify that kernel argument names are preserved (HIP only)
  -fno-hip-new-launch-api Don't use new kernel launching API for HIP
  -fno-in-descriptor-block-flags
                          Don't emit in-descriptor block flags
  -fno-integrated-as      Disable the integrated assembler
  -fno-integrated-cc1     Spawn a separate process for each cc1
  -fno-integrated-objemitter
                          Use external machine object code emitter.
  -fno-jump-tables        Do not use jump tables for lowering switches
  -fno-keep-static-consts Don't keep static const variables if unused
  -fno-knr-functions      Disable support for K&R C function declarations
  -fno-lto                Disable LTO mode (default)
  -fno-memory-profile     Disable heap memory profiling
  -fno-merge-all-constants
                          Disallow merging of constants
  -fno-modules-check-relocated<value>
                          Skip checks for relocated modules when loading PCM files
  -fno-new-infallible     Disable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-objc-infer-related-result-type
                          do not infer Objective-C related result type based on method family
  -fno-offload-lto        Disable LTO mode (default) for offload compilation
  -fno-openmp-extensions  Disable all Clang extensions for OpenMP directives and clauses
  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators
  -fno-optimize-sibling-calls
                          Disable tail call optimization, keeping the call stack accurate
  -fno-pch-codegen        Do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fno-pch-debuginfo      Do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fno-plt                Use GOT indirection instead of PLT to make external function calls (x86 only)
  -fno-preserve-as-comments
                          Do not preserve comments in inline assembly
  -fno-profile-generate   Disable generation of profile instrumentation.
  -fno-profile-instr-generate
                          Disable generation of profile instrumentation.
  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization
  -fno-pseudo-probe-for-profiling
                          Do not emit pseudo probes for sample profiling
  -fno-ptrauth-abi-version
                          Disable Pointer Authentication ABI versioning
  -fno-ptrauth-kernel-abi-version
                          Disable Pointer Authentication kernel ABI versioning
  -fno-register-global-dtors-with-atexit
                          Don't use atexit or __cxa_atexit to register global destructors
  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags
  -fno-rtti-data          Disable generation of RTTI data
  -fno-rtti               Disable generation of rtti information
  -fno-sanitize-address-globals-dead-stripping
                          Disable linker dead stripping of globals in AddressSanitizer
  -fno-sanitize-address-outline-instrumentation
                          Use default code inlining logic for the address sanitizer
  -fno-sanitize-address-poison-custom-array-cookie
                          Disable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fno-sanitize-address-use-after-scope
                          Disable use-after-scope detection in AddressSanitizer
  -fno-sanitize-address-use-odr-indicator
                          Disable ODR indicator globals
  -fno-sanitize-cfi-canonical-jump-tables
                          Do not make the jump table addresses canonical in the symbol table
  -fno-sanitize-cfi-cross-dso
                          Disable control flow integrity (CFI) checks for cross-DSO calls.
  -fno-sanitize-coverage=<value>
                          Disable features of coverage instrumentation for Sanitizers
  -fno-sanitize-hwaddress-experimental-aliasing
                          Disable aliasing mode in HWAddressSanitizer
  -fno-sanitize-ignorelist
                          Don't use ignorelist file for sanitizers
  -fno-sanitize-memory-param-retval
                          Disable detection of uninitialized parameters and return values
  -fno-sanitize-memory-track-origins
                          Disable origins tracking in MemorySanitizer
  -fno-sanitize-memory-use-after-dtor
                          Disable use-after-destroy detection in MemorySanitizer
  -fno-sanitize-recover=<value>
                          Disable recovery for specified sanitizers
  -fno-sanitize-stable-abi
                          Conventional ABI instrumentation for sanitizer runtime. Default: Conventional
  -fno-sanitize-stats     Disable sanitizer statistics gathering.
  -fno-sanitize-thread-atomics
                          Disable atomic operations instrumentation in ThreadSanitizer
  -fno-sanitize-thread-func-entry-exit
                          Disable function entry/exit instrumentation in ThreadSanitizer
  -fno-sanitize-thread-memory-access
                          Disable memory access instrumentation in ThreadSanitizer
  -fno-sanitize-trap=<value>
                          Disable trapping for specified sanitizers
  -fno-sanitize-trap      Disable trapping for all sanitizers
  -fno-short-wchar        Force wchar_t to be an unsigned int
  -fno-show-column        Do not include column number on diagnostics
  -fno-show-source-location
                          Do not include source location information with diagnostics
  -fno-signed-char        char is unsigned
  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros
  -fno-spell-checking     Disable spell-checking
  -fno-split-machine-functions
                          Disable late function splitting using profile information (x86 ELF)
  -fno-split-stack        Wouldn't use segmented stack
  -fno-stack-check        Disable stack checking
  -fno-stack-clash-protection
                          Disable stack clash protection
  -fno-stack-protector    Disable the use of stack protectors
  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary
  -fno-strict-float-cast-overflow
                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions
  -fno-strict-return      Don't treat control flow paths that fall off the end of a non-void function as unreachable
  -fno-sycl               Disables SYCL kernels compilation for device
  -fno-temp-file          Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes
  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe
  -fno-trap-function-returns
                          The trap function specified by -ftrap-function never returns
  -fno-trigraphs          Do not process trigraph sequences
  -fno-typed-cxx-new-delete
                          Disable use of typed variants of C++ new() and delete()
  -fno-typed-memory-operations-experimental
                          Disable Typed Memory Operations call site rewriting
  -fno-unique-section-names
                          Don't use unique names for text and data sections
  -fno-unroll-loops       Turn off loop unroller
  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors
  -fno-use-init-array     Use .ctors/.dtors instead of .init_array/.fini_array
  -fno-visibility-inlines-hidden-static-local-var
                          Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)
  -fno-xray-function-index
                          Omit function index section at the expense of single-function patching performance
  -fno-zero-initialized-in-bss
                          Don't place zero initialized data in BSS
  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc
  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers
  -fobjc-disable-direct-methods-for-testing
                          Ignore attribute objc_direct so that direct methods can be tested
  -fobjc-encode-cxx-class-template-spec
                          Fully encode c++ class template specialization
  -fobjc-exceptions       Enable Objective-C exceptions
  -fobjc-relative-method-lists
                          Enable relative method lists
  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version
  -fobjc-weak             Enable ARC-style weak references in Objective-C
  -foffload-lto=<value>   Set LTO mode for offload compilation
  -foffload-lto           Enable LTO in 'full' mode for offload compilation
  -fopenmp-extensions     Enable all Clang extensions for OpenMP directives and clauses
  -fopenmp-implicit-rpath Set rpath on OpenMP executables
  -fopenmp-offload-mandatory
                          Do not create a host fallback if offloading to the device fails.
  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.
  -fopenmp-target-debug   Enable debugging in the OpenMP offloading device RTL
  -fopenmp-targets=<value>
                          Specify comma-separated list of triples OpenMP offloading targets to be supported
  -fopenmp-version=<value>
                          Set OpenMP version (e.g. 45 for OpenMP 4.5, 50 for OpenMP 5.0). Default value is 50.
  -fopenmp                Parse OpenMP pragmas and generate parallel code.
  -foptimization-record-file=<file>
                          Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.
  -foptimization-record-passes=<regex>
                          Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)
  -forder-file-instrumentation
                          Generate instrumented code to collect order file into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fpack-struct=<value>   Specify the default maximum struct packing alignment
  -fpascal-strings        Recognize and construct Pascal-style string literals
  -fpass-plugin=<dsopath> Load pass plugin from a dynamic shared object file (only with new pass manager).
  -fpatchable-function-entry=<N,M>
                          Generate M NOPs before function entry and N-M NOPs after function entry
  -fpcc-struct-return     Override the default ABI to return all structs on the stack
  -fpch-codegen           Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fpch-debuginfo         Generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fpch-instantiate-templates
                          Instantiate templates already while building a PCH
  -fpch-validate-input-files-content
                          Validate PCH input files based on content if mtime differs
  -fplugin-arg-<name>-<arg>
                          Pass <arg> to plugin <name>
  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)
  -fprebuilt-implicit-modules
                          Look up implicit modules in the prebuilt module path
  -fprebuilt-module-path=<directory>
                          Specify the prebuilt module path
  -fproc-stat-report=<value>
                          Save subprocess statistics to the given file
  -fproc-stat-report<value>
                          Print subprocess statistics
  -fprofile-exclude-files=<value>
                          Instrument only functions from files where names don't match all the regexes separated by a semi-colon
  -fprofile-filter-files=<value>
                          Instrument only functions from files where names match any regex separated by a semi-colon
  -fprofile-function-groups=<N>
                          Partition functions into N groups and select only functions in group i to be instrumented using -fprofile-selected-function-group
  -fprofile-generate=<directory>
                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate=<file>
                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate
                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fprofile-instr-use=<value>
                          Use instrumentation data for profile-guided optimization
  -fprofile-list=<value>  Filename defining the list of functions/files to instrument
  -fprofile-remapping-file=<file>
                          Use the remappings described in <file> to match the profile data against names in the program
  -fprofile-sample-accurate
                          Specifies that the sample profile is accurate
  -fprofile-sample-use=<value>
                          Enable sample-based profile guided optimizations
  -fprofile-selected-function-group=<i>
                          Partition functions into N groups using -fprofile-function-groups and select only functions in group i to be instrumented. The valid range is 0 to N-1 inclusive
  -fprofile-update=<method>
                          Set update method of profile counters
  -fprofile-use=<pathname>
                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.
  -fprotect-parens        Determines whether the optimizer honors parentheses when floating-point expressions are evaluated
  -fpseudo-probe-for-profiling
                          Emit pseudo probes for sample profiling
  -fptrauth-abi-version=<value>
                          Pointer Authentication ABI version
  -fptrauth-auth-traps    Enable traps on authentication failures
  -fptrauth-block-descriptor-pointers
                          enable signing block descriptors
  -fptrauth-calls         Enable signing and authentication of all indirect calls
  -fptrauth-function-pointer-type-discrimination
                          Enabling type discrimination on C function pointers
  -fptrauth-indirect-gotos
                          Enable signing and authentication of indirect goto targets
  -fptrauth-intrinsics    Enable pointer-authentication intrinsics
  -fptrauth-kernel-abi-version
                          Enable Pointer Authentication kernel ABI version
  -fptrauth-objc-class-ro Enable signing and authentication for ObjC class_ro pointers
  -fptrauth-objc-interface-sel
                          Enable signing and authentication of Objective-C object's 'SEL' fields
  -fptrauth-objc-isa-masking
                          pre- and post-authentication masking mode of objective-c isa pointers
  -fptrauth-objc-isa-mode=<value>
                          Authentication mode for ObjC isa field. Full auth if unspecified
  -fptrauth-objc-isa      Enable signing and authentication of Objective-C object's 'isa' field
  -fptrauth-returns       Enable signing and authentication of return addresses
  -fptrauth-soft          Enable software lowering of pointer authentication
  -fptrauth-vtable-pointer-address-discrimination
                          Enable address discrimination of vtable pointers
  -fptrauth-vtable-pointer-type-discrimination
                          Enable type discrimination of vtable pointers
  -frandomize-layout-seed-file=<file>
                          File holding the seed used by the randomize structure layout feature
  -frandomize-layout-seed=<seed>
                          The seed used by the randomize structure layout feature
  -freciprocal-math       Allow division operations to be reassociated
  -freg-struct-return     Override the default ABI to return small structs in registers
  -fregister-global-dtors-with-atexit
                          Use atexit or __cxa_atexit to register global destructors
  -frelaxed-template-template-args
                          Enable C++17 relaxed template template argument matching
  -freroll-loops          Turn on loop reroller
  -fropi                  Generate read-only position independent code (ARM only)
  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags
  -frwpi                  Generate read-write position independent code (ARM only)
  -fsafe-buffer-usage-suggestions
                          Display suggestions to update code associated with -Wunsafe-buffer-usage warnings
  -fsanitize-address-destructor=<value>
                          Set destructor type used in ASan instrumentation
  -fsanitize-address-field-padding=<value>
                          Level of field padding for AddressSanitizer
  -fsanitize-address-globals-dead-stripping
                          Enable linker dead stripping of globals in AddressSanitizer
  -fsanitize-address-outline-instrumentation
                          Always generate function calls for address sanitizer instrumentation
  -fsanitize-address-poison-custom-array-cookie
                          Enable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fsanitize-address-use-after-return=<mode>
                          Select the mode of detecting stack use-after-return in AddressSanitizer
  -fsanitize-address-use-after-scope
                          Enable use-after-scope detection in AddressSanitizer
  -fsanitize-address-use-odr-indicator
                          Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size
  -fsanitize-blacklist=<value>
                          Alias for -fsanitize-ignorelist=
  -fsanitize-cfi-canonical-jump-tables
                          Make the jump table addresses canonical in the symbol table
  -fsanitize-cfi-cross-dso
                          Enable control flow integrity (CFI) checks for cross-DSO calls.
  -fsanitize-cfi-icall-generalize-pointers
                          Generalize pointers in CFI indirect call type signature checks
  -fsanitize-coverage-allowlist=<value>
                          Restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones
  -fsanitize-coverage-ignorelist=<value>
                          Disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones
  -fsanitize-coverage=<value>
                          Specify the type of coverage instrumentation for Sanitizers
  -fsanitize-hwaddress-abi=<value>
                          Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.
  -fsanitize-hwaddress-experimental-aliasing
                          Enable aliasing mode in HWAddressSanitizer
  -fsanitize-ignorelist=<value>
                          Path to ignorelist file for sanitizers
  -fsanitize-memory-param-retval
                          Enable detection of uninitialized parameters and return values
  -fsanitize-memory-track-origins=<value>
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-track-origins
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-use-after-dtor
                          Enable use-after-destroy detection in MemorySanitizer
  -fsanitize-memtag-mode=<value>
                          Set default MTE mode to 'sync' (default) or 'async'
  -fsanitize-recover=<value>
                          Enable recovery for specified sanitizers
  -fsanitize-stable-abi   Stable  ABI instrumentation for sanitizer runtime. Default: Conventional
  -fsanitize-stats        Enable sanitizer statistics gathering.
  -fsanitize-system-blacklist=<value>
                          Alias for -fsanitize-system-ignorelist=
  -fsanitize-system-ignorelist=<value>
                          Path to system ignorelist file for sanitizers
  -fsanitize-thread-atomics
                          Enable atomic operations instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-func-entry-exit
                          Enable function entry/exit instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-memory-access
                          Enable memory access instrumentation in ThreadSanitizer (default)
  -fsanitize-trap=<value> Enable trapping for specified sanitizers
  -fsanitize-trap         Enable trapping for all sanitizers
  -fsanitize-undefined-strip-path-components=<number>
                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.
  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks
  -fsave-optimization-record=<format>
                          Generate an optimization record file in a specific format
  -fsave-optimization-record
                          Generate a YAML optimization record file
  -fseh-exceptions        Use SEH style exceptions
  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values
  -fshort-wchar           Force wchar_t to be a short unsigned int
  -fshow-overloads=<value>
                          Which overload candidates to show when overload resolution fails. Defaults to 'all'
  -fshow-skipped-includes Show skipped includes in -H output.
  -fsigned-char           char is signed
  -fsized-deallocation    Enable C++14 sized global deallocation functions
  -fsjlj-exceptions       Use SjLj style exceptions
  -fslp-vectorize         Enable the superword-level parallelism vectorization passes
  -fsmall-block-descriptors
                          Enable small block descriptors
  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF
  -fsplit-lto-unit        Enables splitting of the LTO unit
  -fsplit-machine-functions
                          Enable late function splitting using profile information (x86 ELF)
  -fsplit-stack           Use segmented stack
  -fstack-check           Enable stack checking
  -fstack-clash-protection
                          Enable stack clash protection
  -fstack-protector-all   Enable stack protectors for all functions
  -fstack-protector-strong
                          Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable
  -fstack-protector       Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca , which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable. A function with a stack protector has a guard value added to the stack frame that is checked on function exit. The guard value must be positioned in the stack frame such that a buffer overflow from a vulnerable variable will overwrite the guard value before overwriting the function's return address. The reference stack guard value is stored in a global variable.
  -fstack-size-section    Emit section containing metadata on function stack sizes
  -fstack-usage           Emit .su file containing information on function stack sizes
  -fstandalone-debug      Emit full debug info for all types used by the program
  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range
  -fstrict-flex-arrays=<n>
                          Enable optimizations based on the strict definition of flexible arrays
  -fstrict-float-cast-overflow
                          Assume that overflowing float-to-int casts are undefined (default)
  -fstrict-vtable-pointers
                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects
  -fsuppress-conflicting-types
                          Ignore errors from conflicting types in function declarations
  -fswift-async-fp=<option>
                          Control emission of Swift async extended frame info
  -fsycl                  Enables SYCL kernels compilation for device
  -fsyntax-only           Run the preprocessor, parser and semantic analysis stages
  -fsystem-module         Build this module as a system module. Only used with -emit-module
  -ftarget-variant-availability-checks
                          Enable availability checks for the target variant platform
  -fthin-link-bitcode=<value>
                          Write minimized bitcode to <file> for the ThinLTO thin link only
  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index
  -ftime-report=<value>   (For new pass manager) 'per-pass': one report for each pass; 'per-pass-run': one report for each pass invocation
  -ftime-trace-granularity=<value>
                          Minimum time granularity (in microseconds) traced by time profiler
  -ftime-trace=<value>    Similar to -ftime-trace. Specify the JSON file or a directory which will contain the JSON file
  -ftime-trace            Turn on time profiler. Generates JSON file based on output filename.
  -ftrap-function-returns The trap function specified by -ftrap-function may return normally
  -ftrap-function=<value> Issue call to specified function rather than a trap instruction
  -ftrapv-handler=<function name>
                          Specify the function to be called on overflow
  -ftrapv                 Trap on integer overflow
  -ftrigraphs             Process trigraph sequences
  -ftrivial-auto-var-init-skip-cpp-obj
                          do not auto-initialize objects initialized by a C++ constructor
  -ftrivial-auto-var-init-skip-non-pod
                          do not auto-initialize non-POD objects
  -ftrivial-auto-var-init-skip-non-ptr-array
                          do not auto-initialize arrays other than arrays of pointers
  -ftrivial-auto-var-init-skip-stl
                          do not auto-initialize variables in STL namespace
  -ftrivial-auto-var-init-stop-after=<value>
                          Stop initializing trivial automatic stack variables after the specified number of instances
  -ftrivial-auto-var-init=<value>
                          Initialize trivial automatic stack variables. Defaults to 'uninitialized'
  -ftrivial-auto-var-zero-init-max-size=<value>
                          Zero initialize only first N bytes of each stack variable; 0 value turns off the limit.
  -ftyped-cxx-new-delete  Enable use of typed variants of C++ new() and delete()
  -ftyped-memory-operations-experimental
                          Enable Typed Memory Operations call site rewriting
  -funique-basic-block-section-names
                          Use unique names for basic block sections (ELF Only)
  -funique-internal-linkage-names
                          Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path
  -funroll-loops          Turn on loop unroller
  -fuse-cuid=<value>      Method to generate ID's for compilation units for single source offloading languages CUDA and HIP: 'hash' (ID's generated by hashing file path and command line options) | 'random' (ID's generated as random numbers) | 'none' (disabled). Default is 'hash'. This option will be overridden by option '-cuid=[ID]' if it is specified.
  -fuse-line-directives   Use #line in preprocessed output
  -fvalidate-ast-input-files-content
                          Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical
  -fveclib=<value>        Use the given vector functions library
  -fvectorize             Enable the loop vectorization passes
  -fverbose-asm           Generate verbose assembly output
  -fvirtual-function-elimination
                          Enables dead virtual function elimination optimization. Requires -flto=full
  -fvisibility-dllexport=<value>
                          The visibility for dllexport definitions [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-dllimport=<value>
                          The visibility for dllimport external declarations [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-nodllstorageclass=<value>
                          The visibility for external declarations without an explicit DLL dllstorageclass [-fvisibility-from-dllstorageclass]
  -fvisibility-from-dllstorageclass
                          Set the visibility of symbols in the generated code from their DLL storage class
  -fvisibility-global-new-delete-hidden
                          Give global C++ operator new and delete declarations hidden visibility
  -fvisibility-inlines-hidden-static-local-var
                          When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default
  -fvisibility-inlines-hidden
                          Give inline C++ member functions hidden visibility by default
  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default
  -fvisibility-nodllstorageclass=<value>
                          The visibility for definitions without an explicit DLL export class [-fvisibility-from-dllstorageclass]
  -fvisibility=<value>    Set the default symbol visibility for all global definitions
  -fwasm-exceptions       Use WebAssembly style exceptions
  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto
  -fwrapv                 Treat signed integer overflow as two's complement
  -fwritable-strings      Store string literals as writable data
  -fxl-pragma-pack        Enable IBM XL #pragma pack handling
  -fxray-always-emit-customevents
                          Always emit __xray_customevent(...) calls even if the containing function is not always instrumented
  -fxray-always-emit-typedevents
                          Always emit __xray_typedevent(...) calls even if the containing function is not always instrumented
  -fxray-always-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.
  -fxray-attr-list=<value>
                          Filename defining the list of functions/types for imbuing XRay attributes.
  -fxray-function-groups=<value>
                          Only instrument 1 of N groups
  -fxray-ignore-loops     Don't instrument functions with loops unless they also meet the minimum function size
  -fxray-instruction-threshold=<value>
                          Sets the minimum function size to instrument with XRay
  -fxray-instrumentation-bundle=<value>
                          Select which XRay instrumentation points to emit. Options: all, none, function-entry, function-exit, function, custom. Default is 'all'.  'function' includes both 'function-entry' and 'function-exit'.
  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit
  -fxray-link-deps        Tells clang to add the link dependencies for XRay.
  -fxray-modes=<value>    List of modes to link in by default into XRay instrumented binaries.
  -fxray-never-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.
  -fxray-selected-function-group=<value>
                          When using -fxray-function-groups, select which group of functions to instrument. Valid range is 0 to fxray-function-groups - 1
  -fzero-call-used-regs=<value>
                          Clear call-used registers upon function return (AArch64/x86 only)
  -fzvector               Enable System z vector language extension
  -F <value>              Add directory to framework include search path
  --gcc-install-dir=<value>
                          Use GCC installation in the specified directory. The directory ends with path components like 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Note: executables (e.g. ld) used by the compiler are not overridden by the selected GCC installation
  --gcc-toolchain=<value> Specify a directory where Clang can find 'include' and 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Clang will use the GCC installation with the largest version
  -gcodeview-ghash        Emit type record hashes in a .debug$H section
  -gcodeview              Generate CodeView debug information
  -gdwarf-2               Generate source-level debug information with dwarf version 2
  -gdwarf-3               Generate source-level debug information with dwarf version 3
  -gdwarf-4               Generate source-level debug information with dwarf version 4
  -gdwarf-5               Generate source-level debug information with dwarf version 5
  -gdwarf32               Enables DWARF32 format for ELF binaries, if debug information emission is enabled.
  -gdwarf64               Enables DWARF64 format for ELF binaries, if debug information emission is enabled.
  -gdwarf                 Generate source-level debug information with the default dwarf version
  -gembed-source          Embed source text in DWARF debug sections
  -gen-reproducer=<value> Emit reproducer on (option: off, crash (default), error, always)
  -gline-directives-only  Emit debug line info directives only
  -gline-tables-only      Emit debug line number tables only
  -gmodules               Generate debug info with external references to clang modules or precompiled headers
  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections
  -gno-inline-line-tables Don't emit inline line tables.
  --gpu-bundle-output     Bundle output files of HIP device compilation
  --gpu-instrument-lib=<value>
                          Instrument device library for HIP, which is a LLVM bitcode containing __cyg_profile_func_enter and __cyg_profile_func_exit
  --gpu-max-threads-per-block=<value>
                          Default max threads per block for kernel launch bounds for HIP
  -greproducible          Tune debug info to be reproducible.
  -gsplit-dwarf=<value>   Set DWARF fission mode
  -gz=<value>             DWARF debug sections compression type
  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)
  -g                      Generate source-level debug information
  --help-hidden           Display help for hidden options
  -help                   Display available options
  --hip-device-lib=<value>
                          HIP device library
  --hip-link              Link clang-offload-bundler bundles for HIP
  --hip-path=<value>      HIP runtime installation path, used for finding HIP version and adding HIP include path.
  --hip-version=<value>   HIP version in the format of major.minor.patch
  --hipspv-pass-plugin=<dsopath>
                          path to a pass plugin for HIP to SPIR-V passes.
  -H                      Show header includes and nesting depth
  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path
  -iapinotes-modules <directory>
                          Add directory to the API notes search path referenced by module name
  -iapinotes-path <file>  Include API notes file
  -ibuiltininc            Enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it
  -idirafter <value>      Add directory to AFTER include search path
  -iframeworkwithsysroot <directory>
                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot
  -iframework <value>     Add directory to SYSTEM framework search path
  -imacros <file>         Include macros from file before parsing
  -include-pch <file>     Include precompiled header file
  -include <file>         Include file before parsing
  -index-header-map       Make the next included directory (-I or -F) an indexer header map
  -index-ignore-macros    Ignore macros during indexing
  -index-ignore-pcms      Ignore symbols from imported pcm modules
  -index-ignore-system-symbols
                          Ignore symbols from system headers
  -index-record-codegen-name
                          Record the codegen name for symbols
  -index-store-path <value>
                          Enable indexing with the specified data store path
  -index-unit-output-path <path>
                          Use <path> as the output path for this compilation unit in the index unit file
  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix
  -iquote <directory>     Add directory to QUOTE include search path
  -isysroot <dir>         Set the system root directory (usually /)
  -isystem-after <directory>
                          Add directory to end of the SYSTEM include search path
  -isystem <directory>    Add directory to SYSTEM include search path
  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system
  -ivfsstatcache <value>  Use the stat data cached in file instead of doing filesystem syscalls. See clang-stat-cache utility.
  -iwithprefixbefore <dir>
                          Set directory to include search path with prefix
  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix
  -iwithsysroot <directory>
                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot
  -I <dir>                Add directory to the end of the list of include search paths
  --libomptarget-amdgcn-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-amdgpu-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-nvptx-bc-path=<value>
                          Path to libomptarget-nvptx bitcode library
  -L <dir>                Add directory to library search path
  -mabi=quadword-atomics  Enable quadword atomics ABI on AIX (AIX PPC64 only). Uses lqarx/stqcx. instructions.
  -mabi=vec-default       Enable the default Altivec ABI on AIX (AIX only). Uses only volatile vector registers.
  -mabi=vec-extabi        Enable the extended Altivec ABI on AIX (AIX only). Uses volatile and nonvolatile vector registers
  -mabicalls              Enable SVR4-style position-independent code (Mips only)
  -maix-struct-return     Return all structs in memory (PPC32 only)
  -malign-branch-boundary=<value>
                          Specify the boundary's size to align branches
  -malign-branch=<value>  Specify types of branches to align
  -malign-double          Align doubles to two words in structs (x86 only)
  -mamdgpu-ieee           Sets the IEEE bit in the expected default floating point  mode register. Floating point opcodes that support exception flag gathering quiet and propagate signaling NaN inputs per IEEE 754-2008. This option changes the ABI. (AMDGPU only)
  -mbackchain             Link stack frames through backchain on System Z
  -mbranch-protection=<value>
                          Enforce targets of indirect branches and function returns
  -mbranches-within-32B-boundaries
                          Align selected branches (fused, jcc, jmp) within 32-byte boundary
  -mcmodel=medany         Equivalent to -mcmodel=medium, compatible with RISC-V gcc.
  -mcmodel=medlow         Equivalent to -mcmodel=small, compatible with RISC-V gcc.
  -mcmse                  Allow use of CMSE (Armv8-M Security Extensions)
  -mcode-object-v3        Legacy option to specify code object ABI V3 (AMDGPU only)
  -mcode-object-version=<value>
                          Specify code object ABI version. Defaults to 4. (AMDGPU only)
  -mcrc                   Allow use of CRC instructions (ARM/Mips only)
  -mcumode                Specify CU wavefront execution mode (AMDGPU only)
  -mdefault-visibility-export-mapping=<value>
                          Mapping between default visibility and export
  -mdouble=<n             Force double to be <n> bits
  -MD                     Write a depfile containing user and system headers
  -meabi <value>          Set EABI type. Default depends on triple)
  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)
  -menable-experimental-extensions
                          Enable use of experimental RISC-V extensions.
  -menable-unsafe-fp-math Allow unsafe floating-point math optimizations which may decrease precision
  -mexec-model=<value>    Execution model (WebAssembly only)
  -mexecute-only          Disallow generation of data access to code sections (ARM only)
  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mfentry                Insert calls to fentry at function entry (x86/SystemZ only)
  -mfix-cmse-cve-2021-35465
                          Work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mfix-cortex-a57-aes-1742098
                          Work around Cortex-A57 Erratum 1742098 (ARM only)
  -mfix-cortex-a72-aes-1655431
                          Work around Cortex-A72 Erratum 1655431 (ARM only)
  -mfp32                  Use 32-bit floating point registers (MIPS only)
  -mfp64                  Use 64-bit floating point registers (MIPS only)
  -mframe-chain=<value>   Select the frame chain model used to emit frame records (Arm only).
  -mfunction-return=<value>
                          Replace returns with jumps to ``__x86_return_thunk`` (x86 only, error otherwise)
  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>
  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64/x86 only)
  -mglobal-merge          Enable merging of globals
  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mguard=<value>         Enable or disable Control Flow Guard checks and guard tables emission
  -MG                     Add missing headers to depfile
  -mharden-sls=<value>    Select straight-line speculation hardening scope (ARM/AArch64/X86 only). <arg> must be: all, none, retbr(ARM/AArch64), blr(ARM/AArch64), comdat(ARM/AArch64), nocomdat(ARM/AArch64), return(X86), indirect-jmp(X86)
  -mhvx-ieee-fp           Enable Hexagon HVX IEEE floating-point
  -mhvx-length=<value>    Set Hexagon Vector Length
  -mhvx-qfloat            Enable Hexagon HVX QFloat instructions
  -mhvx=<value>           Enable Hexagon Vector eXtensions
  -mhvx                   Enable Hexagon Vector eXtensions
  -miamcu                 Use Intel MCU ABI
  -mibt-seal              Optimize fcf-protection=branch/full (requires LTO).
  -mignore-xcoff-visibility
                          Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspecified' visibility in XCOFF object file
  --migrate               Run the migrator
  -mincremental-linker-compatible
                          (integrated-as) Emit an object file which can be used with an incremental linker
  -mindirect-branch-cs-prefix
                          Add cs prefix to call and jmp to indirect thunk
  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation
  -mios-version-min=<value>
                          Set iOS deployment target
  -MJ <value>             Write a compilation database entry per input
  -mllvm <value>          Additional arguments to forward to LLVM's option processing
  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)
  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.
  -mlong-double-128       Force long double to be 128 bits
  -mlong-double-64        Force long double to be 64 bits
  -mlong-double-80        Force long double to be 80 bits, padded to 128 bits for storage
  -mlvi-cfi               Enable only control-flow mitigations for Load Value Injection (LVI)
  -mlvi-hardening         Enable all mitigations for Load Value Injection (LVI)
  -mmacos-version-min=<value>
                          Set macOS deployment target
  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.
  -mmark-bti-property     Add .note.gnu.property with BTI to assembly files (AArch64 only)
  -MMD                    Write a depfile containing user headers
  -mmemops                Enable generation of memop instructions
  -mmlir <value>          Additional arguments to forward to MLIR's option processing
  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard
  -mmsa                   Enable MSA ASE (MIPS only)
  -mmt                    Enable MT ASE (MIPS only)
  -MM                     Like -MMD, but also implies -E and writes to stdout by default
  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)
  -mno-bti-at-return-twice
                          Do not add a BTI instruction after a setjmp or other return-twice construct (Arm/AArch64 only)
  -mno-code-object-v3     Legacy option to specify code object ABI V2 (AMDGPU only)
  -mno-crc                Disallow use of CRC instructions (Mips only)
  -mno-cumode             Specify WGP wavefront execution mode (AMDGPU only)
  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)
  -mno-execute-only       Allow generation of data access to code sections (ARM only)
  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mno-fix-cmse-cve-2021-35465
                          Don't work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mno-fix-cortex-a53-835769
                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mno-fix-cortex-a57-aes-1742098
                          Don't work around Cortex-A57 Erratum 1742098 (ARM only)
  -mno-fix-cortex-a72-aes-1655431
                          Don't work around Cortex-A72 Erratum 1655431 (ARM only)
  -mno-global-merge       Disable merging of globals
  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mno-hvx-ieee-fp        Disable Hexagon HVX IEEE floating-point
  -mno-hvx-qfloat         Disable Hexagon HVX QFloat instructions
  -mno-hvx                Disable Hexagon Vector eXtensions
  -mno-implicit-float     Don't generate implicit floating point instructions
  -mno-implicit-sme       Don't generate implicit SME instructions or mode switches
  -mno-incremental-linker-compatible
                          (integrated-as) Emit an object file which cannot be used with an incremental linker
  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)
  -mno-long-calls         Restore the default behaviour of not generating long calls
  -mno-lvi-cfi            Disable control-flow mitigations for Load Value Injection (LVI)
  -mno-lvi-hardening      Disable mitigations for Load Value Injection (LVI)
  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.
  -mno-memops             Disable generation of memop instructions
  -mno-movt               Disallow use of movt/movw pairs (ARM only)
  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard
  -mno-msa                Disable MSA ASE (MIPS only)
  -mno-mt                 Disable MT ASE (MIPS only)
  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.
  -mno-nvj                Disable generation of new-value jumps
  -mno-nvs                Disable generation of new-value stores
  -mno-outline-atomics    Don't generate local calls to out-of-line atomic operations
  -mno-outline            Disable function outlining (AArch64 only)
  -mno-packets            Disable generation of instruction packets
  -mno-relax              Disable linker relaxation
  -mno-restrict-it        Allow generation of complex IT blocks.
  -mno-save-restore       Disable using library calls for save and restore
  -mno-seses              Disable speculative execution side effect suppression (SESES)
  -mno-stack-arg-probe    Disable stack probes which are enabled by default
  -mno-tgsplit            Disable threadgroup split execution mode (AMDGPU only)
  -mno-tls-direct-seg-refs
                          Disable direct TLS access through segment registers
  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)
  -mno-wavefrontsize64    Specify wavefront size 32 mode (AMDGPU only)
  -mnocrc                 Disallow use of CRC instructions (ARM only)
  -mnop-mcount            Generate mcount/__fentry__ calls as nops. To activate they need to be patched in.
  -mnvj                   Enable generation of new-value jumps
  -mnvs                   Enable generation of new-value stores
  -module-dependency-dir <value>
                          Directory to dump module dependencies to
  -module-file-info       Provide information about a particular module file
  -momit-leaf-frame-pointer
                          Omit frame pointer setup for leaf functions
  -moutline-atomics       Generate local calls to out-of-line atomic operations
  -moutline               Enable function outlining (AArch64 only)
  -mpacked-stack          Use packed stack layout (SystemZ only).
  -mpackets               Enable generation of instruction packets
  -mpad-max-prefix-size=<value>
                          Specify maximum number of prefixes to use for padding
  -mprefer-vector-width=<value>
                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.
  -MP                     Create phony target for each dependency (other than main file)
  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility
  -MQ <value>             Specify name of main file output to quote in depfile
  -mrecord-mcount         Generate a __mcount_loc section entry for each __fentry__ call.
  -mrelax-all             (integrated-as) Relax all machine instructions
  -mrelax                 Enable linker relaxation
  -mrestrict-it           Disallow generation of complex IT blocks.
  -mrtd                   Make StdCall calling convention the default
  -msave-restore          Enable using library calls for save and restore
  -mseses                 Enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations
  -msign-return-address=<value>
                          Select return address signing scope
  -mskip-rax-setup        Skip setting up RAX register when passing variable arguments (x86 only)
  -msmall-data-limit=<value>
                          Put global and static data smaller than the limit into a special section
  -msoft-float            Use software floating point
  -mstack-alignment=<value>
                          Set the stack alignment
  -mstack-arg-probe       Enable stack probes
  -mstack-probe-size=<value>
                          Set the stack probe size
  -mstack-protector-guard-offset=<value>
                          Use the given offset for addressing the stack-protector guard
  -mstack-protector-guard-reg=<value>
                          Use the given reg for addressing the stack-protector guard
  -mstack-protector-guard-symbol=<value>
                          Use the given symbol for addressing the stack-protector guard
  -mstack-protector-guard=<value>
                          Use the given guard (global, tls) for addressing the stack-protector guard
  -mstackrealign          Force realign the stack at entry to every function
  -msve-vector-bits=<value>
                          Specify the size in bits of an SVE vector register. Defaults to the vector length agnostic value of "scalable". (AArch64 only)
  -msvr4-struct-return    Return small structs in registers (PPC32 only)
  -mtargetos=<value>      Set the deployment target to be the specified OS and OS version
  -mtgsplit               Enable threadgroup split execution mode (AMDGPU only)
  -mthread-model <value>  The thread model to use. Defaults to 'posix')
  -mtls-direct-seg-refs   Enable direct TLS access through segment registers (default)
  -mtls-size=<value>      Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)
  -mtp=<value>            Thread pointer access method (AArch32/AArch64 only)
  -mtune=<value>          Only supported on AArch64, PowerPC, RISC-V, SystemZ, and X86
  -MT <value>             Specify name of main file output in depfile
  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)
  -munsafe-fp-atomics     Enable unsafe floating point atomic instructions (AMDGPU only)
  -mvscale-max=<value>    Specify the vscale maximum. Defaults to the vector length agnostic value of "0". (AArch64 only)
  -mvscale-min=<value>    Specify the vscale minimum. Defaults to "1". (AArch64 only)
  -MV                     Use NMake/Jom format for the depfile
  -mwavefrontsize64       Specify wavefront size 64 mode (AMDGPU only)
  -M                      Like -MD, but also implies -E and writes to stdout by default
  --no-cuda-include-ptx=<value>
                          Do not include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.
  --no-default-config     Disable loading default configuration files
  --no-gpu-bundle-output  Do not bundle output files of HIP device compilation
  -no-hip-rt              Do not link against HIP runtime libraries
  --no-offload-arch=<value>
                          Remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. 'all' resets the list to its default value.
  --no-offload-new-driver Don't Use the new driver for offloading compilation.
  --no-system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as not including a system header.
  -nobuiltininc           Disable builtin #include directories
  -nogpuinc               Do not add include paths for CUDA/HIP and do not include the default CUDA/HIP wrapper headers
  -nogpulib               Do not link device library for CUDA/HIP device compilation
  -nohipwrapperinc        Do not include the default HIP wrapper headers and include paths
  -nostdinc++             Disable standard #include directories for the C++ standard library
  -ObjC++                 Treat source input files as Objective-C++ inputs
  -objcmt-allowlist-dir-path=<value>
                          Only modify files with a filename contained in the provided directory path
  -objcmt-atomic-property Make migration to 'atomic' properties
  -objcmt-migrate-all     Enable migration to modern ObjC
  -objcmt-migrate-annotation
                          Enable migration to property and method annotations
  -objcmt-migrate-designated-init
                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods
  -objcmt-migrate-instancetype
                          Enable migration to infer instancetype for method result type
  -objcmt-migrate-literals
                          Enable migration to modern ObjC literals
  -objcmt-migrate-ns-macros
                          Enable migration to NS_ENUM/NS_OPTIONS macros
  -objcmt-migrate-property-dot-syntax
                          Enable migration of setter/getter messages to property-dot syntax
  -objcmt-migrate-property
                          Enable migration to modern ObjC property
  -objcmt-migrate-protocol-conformance
                          Enable migration to add protocol conformance on classes
  -objcmt-migrate-readonly-property
                          Enable migration to modern ObjC readonly property
  -objcmt-migrate-readwrite-property
                          Enable migration to modern ObjC readwrite property
  -objcmt-migrate-subscripting
                          Enable migration to modern ObjC subscripting
  -objcmt-ns-nonatomic-iosonly
                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute
  -objcmt-returns-innerpointer-property
                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER
  -objcmt-whitelist-dir-path=<value>
                          Alias for -objcmt-allowlist-dir-path
  -ObjC                   Treat source input files as Objective-C inputs
  -object-file-name=<file>
                          Set the output <file> for debug infos
  --offload-arch=<value>  CUDA offloading device architecture (e.g. sm_35), or HIP offloading target ID in the form of a device architecture followed by target ID features delimited by a colon. Each target ID feature is a pre-defined string followed by a plus or minus sign (e.g. gfx908:xnack+:sramecc-).  May be specified more than once.
  --offload-device-only   Only compile for the offloading device.
  --offload-host-device   Only compile for the offloading host.
  --offload-host-only     Only compile for the offloading host.
  --offload-link          Use the new offloading linker to perform the link job.
  --offload-new-driver    Use the new driver for offloading compilation.
  --offload=<value>       Specify comma-separated list of offloading target triples (CUDA and HIP only)
  -o <file>               Write output to <file>
  -pedantic               Warn on language extensions
  -pg                     Enable mcount instrumentation
  -pipe                   Use pipes between commands, when possible
  --precompile            Only precompile the input
  -print-diagnostic-options
                          Print all of Clang's warning options
  -print-effective-triple Print the effective target triple
  -print-file-name=<file> Print the full library path of <file>
  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace
  -print-libgcc-file-name Print the library path for the currently used compiler runtime library ("libgcc.a" or "libclang_rt.builtins.*.a")
  -print-prog-name=<name> Print the full program path of <name>
  -print-resource-dir     Print the resource directory pathname
  -print-rocm-search-dirs Print the paths used for finding ROCm installation
  -print-runtime-dir      Print the directory pathname containing clangs runtime libraries
  -print-search-dirs      Print the paths used for finding libraries and programs
  -print-supported-cpus   Print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)
  -print-target-triple    Print the normalized target triple
  -print-targets          Print the registered targets
  -pthread                Support POSIX threads in generated code
  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)
  -P                      Disable linemarker output in -E mode
  -Qn                     Do not emit metadata containing compiler name and version
  -Qunused-arguments      Don't emit warning for unused driver arguments
  -Qy                     Emit metadata containing compiler name and version
  -relocatable-pch        Whether to build a relocatable precompiled header
  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++
  -rewrite-objc           Rewrite Objective-C source to C++
  --rocm-device-lib-path=<value>
                          ROCm device library path. Alternative to rocm-path.
  --rocm-path=<value>     ROCm installation path, used for finding and automatically linking required bitcode libraries.
  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression
  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression
  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression
  -rtlib=<value>          Compiler runtime library to use
  -R<remark>              Enable the specified remark
  -save-stats=<value>     Save llvm statistics.
  -save-stats             Save llvm statistics.
  -save-temps=<value>     Save intermediate compilation results.
  -save-temps             Save intermediate compilation results
  -serialize-diagnostics <value>
                          Serialize compiler diagnostics to a file
  -shared-libsan          Dynamically link the sanitizer runtime
  --start-no-unused-arguments
                          Don't emit warnings about unused arguments for the following arguments
  -static-libsan          Statically link the sanitizer runtime
  -static-openmp          Use the static host OpenMP runtime while linking.
  -std=<value>            Language standard to compile for
  -stdlib++-isystem <directory>
                          Use directory as the C++ standard library include path
  -stdlib=<value>         C++ standard library to use
  -sycl-std=<value>       SYCL language standard to compile for.
  --system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as including a system header.
  -S                      Only run preprocess and compilation steps
  --target=<value>        Generate code for the given target
  -time                   Time individual commands
  -traditional-cpp        Enable some traditional CPP emulation
  -trigraphs              Process trigraph sequences
  -T <script>             Specify <script> as linker script
  -undef                  undef all system defines
  -unwindlib=<value>      Unwind library to use
  -U <macro>              Undefine macro <macro>
  --verify-debug-info     Verify the binary representation of debug output
  -verify-pch             Load and verify that a pre-compiled header file is not stale
  --version               Print version information
  -v                      Show commands to run and use verbose output
  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler
  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED
  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker
  -working-directory <value>
                          Resolve file paths relative to the specified directory
  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor
  -W<warning>             Enable the specified warning
  -w                      Suppress all warnings
  -Xanalyzer <arg>        Pass <arg> to the static analyzer
  -Xarch_device <arg>     Pass <arg> to the CUDA/HIP device compilation
  -Xarch_host <arg>       Pass <arg> to the CUDA/HIP host compilation
  -Xassembler <arg>       Pass <arg> to the assembler
  -Xclang=<arg>           Alias for -Xclang
  -Xclang <arg>           Pass <arg> to clang -cc1
  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation
  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler
  -Xlinker <arg>          Pass <arg> to the linker
  -Xoffload-linker<triple> <arg>
                          Pass <arg> to the offload linkers or the ones idenfied by -<triple>
  -Xopenmp-target=<triple> <arg>
                          Pass <arg> to the target offloading toolchain identified by <triple>.
  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.
  -Xpreprocessor <arg>    Pass <arg> to the preprocessor
  -x <language>           Treat subsequent input files as having type <language>
  -z <arg>                Pass -z <arg> to the linker
Executing: g++ --version
stdout:
Apple clang version 15.0.0 (clang-1500.3.9.4)
Target: arm64-apple-darwin23.4.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
Executing: g++ --help | head -n 500
Detected CLANG compiler
          Trying Cxx compiler flag -Wall
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -Wall 

Added Cxx compiler flag -Wall
          Trying Cxx compiler flag -Wwrite-strings
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -Wwrite-strings   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -Wall -Wwrite-strings 

Added Cxx compiler flag -Wwrite-strings
          Trying Cxx compiler flag -Wno-strict-aliasing
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -Wwrite-strings -Wno-strict-aliasing   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -Wall -Wwrite-strings -Wno-strict-aliasing 

Added Cxx compiler flag -Wno-strict-aliasing
          Trying Cxx compiler flag -Wno-unknown-pragmas
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas 

Added Cxx compiler flag -Wno-unknown-pragmas
          Trying Cxx compiler flag -Wno-lto-type-mismatch
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -Wno-lto-type-mismatch   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
stdout:
warning: unknown warning option '-Wno-lto-type-mismatch'; did you mean '-Wno-selector-type-mismatch'? [-Wunknown-warning-option]
1 warning generated.
Possible ERROR while running compiler:exit code 0
stderr:
warning: unknown warning option '-Wno-lto-type-mismatch'; did you mean '-Wno-selector-type-mismatch'? [-Wunknown-warning-option]
1 warning generated.
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -Wno-lto-type-mismatch 
warning: unknown warning option '-Wno-lto-type-mismatch'; did you mean '-Wno-selector-type-mismatch'? [-Wunknown-warning-option]
1 warning generated.
              Rejecting compiler flag -Wno-lto-type-mismatch  due to 
warning: unknown warning option '-Wno-lto-type-mismatch'; did you mean '-Wno-selector-type-mismatch'? [-Wunknown-warning-option]
1 warning generated.
          Rejected Cxx compiler flag -Wno-lto-type-mismatch
          Trying Cxx compiler flag -fstack-protector
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector 

Added Cxx compiler flag -fstack-protector
          Trying Cxx compiler flag -fno-stack-check
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check 

Added Cxx compiler flag -fno-stack-check
          Trying Cxx compiler flag -fvisibility=hidden
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden 

Added Cxx compiler flag -fvisibility=hidden
          Trying Cxx compiler flag -O3 -march=native -mtune=native
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -O3 -march=native -mtune=native   -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

              Output from compiling with  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -O3 -march=native -mtune=native 

Added Cxx compiler flag -O3 -march=native -mtune=native
Executing: gfortran-12 --version
stdout:
GNU Fortran (Homebrew GCC 12.4.0) 12.4.0
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
getCompilerVersion: gfortran-12 GNU Fortran (Homebrew GCC 12.4.0) 12.4.0
              Defined make macro "FC_VERSION" to "GNU Fortran (Homebrew GCC 12.4.0) 12.4.0"
                Defined make macro "MPIFC_SHOW" to "Unavailable"
Executing: gfortran-12 --help | head -n 20 
stdout:
Usage: gfortran-12 [options] file...
Options:
  -pass-exit-codes         Exit with highest error code from a phase.
  --help                   Display this information.
  --target-help            Display target specific command line options (including assembler and linker options).
  --help={common|optimizers|params|target|warnings|[^]{joined|separate|undocumented}}[,...].
                           Display specific types of command line options.
  (Use '-v --help' to display command line options of sub-processes).
  --version                Display compiler version information.
  -dumpspecs               Display all of the built in spec strings.
  -dumpversion             Display the version of the compiler.
  -dumpmachine             Display the compiler's target processor.
  -foffload=<targets>      Specify offloading targets.
  -print-search-dirs       Display the directories in the compiler's search path.
  -print-libgcc-file-name  Display the name of the compiler's companion library.
  -print-file-name=<lib>   Display the full path to library <lib>.
  -print-prog-name=<prog>  Display the full path to compiler component <prog>.
  -print-multiarch         Display the target's normalized GNU triplet, used as
                           a component in the library path.
  -print-multi-directory   Display the root directory for versions of libgcc.
Detected GNU compiler
Executing: gfortran-12 --version
stdout:
GNU Fortran (Homebrew GCC 12.4.0) 12.4.0
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
Detected GFortran46plus compiler
Executing: gfortran-12 --version
stdout:
GNU Fortran (Homebrew GCC 12.4.0) 12.4.0
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
Detected GFortran47plus compiler
Executing: gfortran-12 --version
stdout:
GNU Fortran (Homebrew GCC 12.4.0) 12.4.0
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
Executing: gfortran-12 -v
stdout:
Using built-in specs.
COLLECT_GCC=gfortran-12
COLLECT_LTO_WRAPPER=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/lto-wrapper
Target: aarch64-apple-darwin23
Configured with: ../configure --prefix=/opt/homebrew/opt/gcc@12 --libdir=/opt/homebrew/opt/gcc@12/lib/gcc/12 --disable-nls --enable-checking=release --with-gcc-major-version-only --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-12 --with-gmp=/opt/homebrew/opt/gmp --with-mpfr=/opt/homebrew/opt/mpfr --with-mpc=/opt/homebrew/opt/libmpc --with-isl=/opt/homebrew/opt/isl --with-zstd=/opt/homebrew/opt/zstd --with-pkgversion='Homebrew GCC 12.4.0' --with-bugurl=https://github.com/Homebrew/homebrew-core/issues --with-system-zlib --build=aarch64-apple-darwin23 --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk --with-ld=/Library/Developer/CommandLineTools/usr/bin/ld-classic
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 12.4.0 (Homebrew GCC 12.4.0)
          Trying FC compiler flag -Wall
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

              Output from compiling with  -Wall 

Added FC compiler flag -Wall
          Trying FC compiler flag -ffree-line-length-none
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -ffree-line-length-none   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

              Output from compiling with  -Wall -ffree-line-length-none 

Added FC compiler flag -ffree-line-length-none
          Trying FC compiler flag -ffree-line-length-0
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -ffree-line-length-none -ffree-line-length-0   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

              Output from compiling with  -Wall -ffree-line-length-none -ffree-line-length-0 

Added FC compiler flag -ffree-line-length-0
          Trying FC compiler flag -Wno-lto-type-mismatch
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

              Output from compiling with  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch 

Added FC compiler flag -Wno-lto-type-mismatch
          Trying FC compiler flag -Wno-unused-dummy-argument
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

              Output from compiling with  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument 

Added FC compiler flag -Wno-unused-dummy-argument
                Defined make macro "MPIFC_SHOW" to "Unavailable"
Executing: gfortran-12 --help | head -n 20 
stdout:
Usage: gfortran-12 [options] file...
Options:
  -pass-exit-codes         Exit with highest error code from a phase.
  --help                   Display this information.
  --target-help            Display target specific command line options (including assembler and linker options).
  --help={common|optimizers|params|target|warnings|[^]{joined|separate|undocumented}}[,...].
                           Display specific types of command line options.
  (Use '-v --help' to display command line options of sub-processes).
  --version                Display compiler version information.
  -dumpspecs               Display all of the built in spec strings.
  -dumpversion             Display the version of the compiler.
  -dumpmachine             Display the compiler's target processor.
  -foffload=<targets>      Specify offloading targets.
  -print-search-dirs       Display the directories in the compiler's search path.
  -print-libgcc-file-name  Display the name of the compiler's companion library.
  -print-file-name=<lib>   Display the full path to library <lib>.
  -print-prog-name=<prog>  Display the full path to compiler component <prog>.
  -print-multiarch         Display the target's normalized GNU triplet, used as
                           a component in the library path.
  -print-multi-directory   Display the root directory for versions of libgcc.
Detected GNU compiler
=============================================================================================
                                     ***** WARNING *****
  Using default FC optimization flags "-g -O". You might consider manually setting optimal
  optimization flags for your system with FOPTFLAGS="optimization flags" see
  config/examples/arch-*-opt.py for examples
=============================================================================================
          Trying FC compiler flag -g
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

              Output from compiling with  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g 

Added FC compiler flag -g
          Trying FC compiler flag -O
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

              Output from compiling with  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O 

Added FC compiler flag -O
=============================================================================================
TESTING: checkIntelHardwareSupport from config.compilerFlags(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilerFlags.py:168)
  Use Linux/MacOS commands to determine what operations the hardware supports
Executing: lscpu
stdout: /bin/sh: lscpu: command not found
Executing: sysctl -a
stdout:
user.cs_path: /usr/bin:/bin:/usr/sbin:/sbin
user.bc_base_max: 99
user.bc_dim_max: 2048
user.bc_scale_max: 99
user.bc_string_max: 1000
user.coll_weights_max: 2
user.expr_nest_max: 32
user.line_max: 2048
user.re_dup_max: 255
user.posix2_version: 200112
user.posix2_c_bind: 0
user.posix2_c_dev: 0
user.posix2_char_term: 0
user.posix2_fort_dev: 0
user.posix2_fort_run: 0
user.posix2_localedef: 0
user.posix2_sw_dev: 0
user.posix2_upe: 0
user.stream_max: 20
user.tzname_max: 255
kern.ostype: Darwin
kern.osrelease: 23.4.0
kern.osrevision: 199506
kern.version: Darwin Kernel Version 23.4.0: Fri Mar 15 00:12:49 PDT 2024; root:xnu-10063.101.17~1/RELEASE_ARM64_T6020
kern.maxvnodes: 263168
kern.maxproc: 16000
kern.maxfiles: 491520
kern.argmax: 1048576
kern.securelevel: 0
kern.hostname: dhcp-101-103.caltech.edu
kern.hostid: 0
kern.clockrate: { hz = 100, tick = 10000, tickadj = 0, profhz = 100, stathz = 100 }
kern.posix1version: 200112
kern.ngroups: 16
kern.job_control: 1
kern.saved_ids: 1
kern.boottime: { sec = 1748455753, usec = 874675 } Wed May 28 11:09:13 2025
kern.nisdomainname: 
kern.maxfilesperproc: 245760
kern.maxprocperuid: 10666
kern.ipc.maxsockbuf: 8388608
kern.ipc.sockbuf_waste_factor: 8
kern.ipc.somaxconn: 128
kern.ipc.nmbclusters: 262144
kern.ipc.soqlimitcompat: 1
kern.ipc.io_policy.log: 0
kern.ipc.io_policy.uuid: 1
kern.ipc.mb_memory_pressure_percentage: 80
kern.ipc.mb_uses_mcache: 0
kern.ipc.mb_tag_mbuf: 0
kern.ipc.socket_debug: 0
kern.ipc.sosend_assert_panic: 0
kern.ipc.sodefunct_calls: 0
kern.ipc.sosendminchain: 16384
kern.ipc.sorecvmincopy: 16384
kern.ipc.sosendjcl: 1
kern.ipc.sosendjcl_ignore_capab: 0
kern.ipc.sosendbigcl_ignore_capab: 0
kern.ipc.sodefunctlog: 0
kern.ipc.sothrottlelog: 0
kern.ipc.sorestrictrecv: 1
kern.ipc.sorestrictsend: 1
kern.ipc.soreserveheadroom: 1
kern.ipc.maxextbkidleperproc: 1
kern.ipc.extbkidletime: 600
kern.ipc.extbkidlercvhiwat: 131072
kern.ipc.sotcdb: 0
kern.ipc.throttle_best_effort: 0
kern.ipc.njcl: 87384
kern.ipc.njclbytes: 16384
kern.ipc.soqlencomp: 0
kern.ipc.maxsendmsgx: 256
kern.ipc.maxrecvmsgx: 256
kern.ipc.missingpktinfo: 0
kern.ipc.do_recvmsg_x_donttrunc: 0
kern.ipc.sendmsg_x_mode: 0
kern.usrstack: 1873461248
kern.netboot: 0
kern.sysv.shmmax: 4194304
kern.sysv.shmmin: 1
kern.sysv.shmmni: 32
kern.sysv.shmseg: 8
kern.sysv.shmall: 1024
kern.sysv.semmni: 87381
kern.sysv.semmns: 87381
kern.sysv.semmnu: 87381
kern.sysv.semmsl: 87381
kern.sysv.semume: 10
kern.aiomax: 90
kern.aioprocmax: 16
kern.aiothreads: 4
kern.corefile: /cores/core.%P
kern.coredump: 1
kern.sugid_coredump: 0
kern.delayterm: 0
kern.shreg_private: 0
kern.posix.sem.max: 10000
kern.usrstack64: 6168428544
kern.tfp.policy: 2
kern.procname: sysctl
kern.speculative_reads_disabled: 0
kern.osversion: 23E224
kern.safeboot: 0
kern.rage_vnode: 0
kern.tty.ptmx_max: 511
kern.check_openevt: 0
kern.threadname: 
kern.hv.supported: 1
kern.hv.max_address_spaces: 256
kern.hv.ipa_size_16k: 4398046511104
kern.hv.ipa_size_4k: 549755813888
kern.entropy.health.repetition_count_test.reset_count: 663593178
kern.entropy.health.repetition_count_test.failure_count: 0
kern.entropy.health.repetition_count_test.max_observation_count: 4
kern.entropy.health.adaptive_proportion_test.reset_count: 1300933
kern.entropy.health.adaptive_proportion_test.failure_count: 0
kern.entropy.health.adaptive_proportion_test.max_observation_count: 14
kern.entropy.health.startup_done: 1
kern.entropy.analysis.supported: 0
kern.entropy.filter.total_sample_count: 668227452
kern.entropy.filter.accepted_sample_count: 666042929
kern.entropy.filter.rejected_sample_count: 2184523
kern.timer.longterm.threshold: 0
kern.timer.longterm.scan_limit: 100000
kern.timer.longterm.scan_interval: 100000
kern.timer.longterm.qlen: 0
kern.timer.longterm.scan_pauses: 0
kern.timer.coalescing_enabled: 1
kern.timer.deadline_tracking_bin_1: 48000
kern.timer.deadline_tracking_bin_2: 120000
kern.timer.scan_limit: 400000
kern.timer.scan_interval: 40000
kern.timer.scan_pauses: 0
kern.timer.scan_postpones: 0
kern.kdbg.debug: 0
kern.kdbg.oldest_time: 0
kern.cpc.secure: 1
kern.skywalk.flowswitch.rx_agg_tcp: 16384
kern.skywalk.flowswitch.rx_agg_tcp_host: 2
kern.skywalk.flowswitch.gso_mtu: 16384
kern.skywalk.flowswitch.ip_reass: 2
kern.skywalk.flowswitch.ipfm_frag_ttl: 60
kern.skywalk.flowswitch.ipfm_timeout_tcall_ival: 1
kern.skywalk.flowswitch.flow_route_expire: 600
kern.skywalk.flowswitch.en6.ipfm.frag_limit: 512
kern.skywalk.flowswitch.en6.ipfm.frag_count: 0
kern.skywalk.flowswitch.en6.ipfm.queue_limit: 256
kern.skywalk.flowswitch.en6.ipfm.queue_count: 0
kern.skywalk.flowswitch.en7.ipfm.frag_limit: 512
kern.skywalk.flowswitch.en7.ipfm.frag_count: 0
kern.skywalk.flowswitch.en7.ipfm.queue_limit: 256
kern.skywalk.flowswitch.en7.ipfm.queue_count: 0
kern.skywalk.flowswitch.en8.ipfm.frag_limit: 512
kern.skywalk.flowswitch.en8.ipfm.frag_count: 0
kern.skywalk.flowswitch.en8.ipfm.queue_limit: 256
kern.skywalk.flowswitch.en8.ipfm.queue_count: 0
kern.skywalk.flowswitch.en9.ipfm.frag_limit: 512
kern.skywalk.flowswitch.en9.ipfm.frag_count: 0
kern.skywalk.flowswitch.en9.ipfm.queue_limit: 256
kern.skywalk.flowswitch.en9.ipfm.queue_count: 0
kern.skywalk.flowswitch.en1.ipfm.frag_limit: 5120
kern.skywalk.flowswitch.en1.ipfm.frag_count: 0
kern.skywalk.flowswitch.en1.ipfm.queue_limit: 1024
kern.skywalk.flowswitch.en1.ipfm.queue_count: 0
kern.skywalk.flowswitch.en0.ipfm.frag_limit: 1152
kern.skywalk.flowswitch.en0.ipfm.frag_count: 0
kern.skywalk.flowswitch.en0.ipfm.queue_limit: 576
kern.skywalk.flowswitch.en0.ipfm.queue_count: 0
kern.skywalk.flowswitch.awdl0.ipfm.frag_limit: 5120
kern.skywalk.flowswitch.awdl0.ipfm.frag_count: 0
kern.skywalk.flowswitch.awdl0.ipfm.queue_limit: 1024
kern.skywalk.flowswitch.awdl0.ipfm.queue_count: 0
kern.skywalk.netif.netif_queue_stat_enable: 0
kern.skywalk.netif.default_drop: 0
kern.skywalk.ring_stat_enable: 0
kern.monotonic.supported: 1
kern.monotonic.pmis: 139154 0
kern.monotonic.retrograde_updates: 0 0
kern.monotonic.task_thread_counting: 1
kern.dtrace.err_verbose: 0
kern.dtrace.buffer_memory_maxsize: 22906492245
kern.dtrace.buffer_memory_inuse: 0
kern.dtrace.difo_maxsize: 262144
kern.dtrace.dof_maxsize: 524288
kern.dtrace.global_maxsize: 16384
kern.dtrace.provide_private_probes: 1
kern.dtrace.dof_mode: 1
kern.dtrace.ignore_fbt_blacklist: 0
kern.eventhandler.debug: 0
kern.microstackshot.interrupt_sample_rate: 1
kern.microstackshot.pmi_sample_period: 12000000000
kern.microstackshot.pmi_sample_counter: 0
kern.proc_rsr_in_progress: 0
kern.hv_vmm_present: 0
kern.secure_kernel: 0
kern.willuserspacereboot: 0
kern.hibernatefile: 
kern.bootsignature: 
kern.hibernatemode: 0
kern.hibernategraphicsready: 0
kern.hibernatewakenotification: 0
kern.hibernatelockscreenready: 0
kern.hibernatehidready: 0
kern.hibernatecount: 0
kern.nbuf: 16384
kern.maxnbuf: 16384
kern.flush_cache_on_write: 0
kern.wq_stalled_window_usecs: 200
kern.wq_reduce_pool_window_usecs: 5000000
kern.wq_max_timer_interval_usecs: 50000
kern.wq_max_threads: 512
kern.wq_max_constrained_threads: 64
kern.ds_supgroups_supported: 1
kern.sugid_scripts: 0
kern.libmalloc_experiments: 0
kern.initproc_spawned: 1
kern.uuid: D3BBDD1F-7813-3F26-9F94-41BAABDA6E33
kern.system_version_compat: 0
kern.osproductversioncompat: 10.16
kern.osproductversion: 14.4.1
kern.osreleasetype: User
kern.iossupportversion: 17.4
kern.bootargs: 
kern.kernelcacheuuid: A5DBC301-1263-9C01-25B0-F8101083FBF5
kern.filesetuuid: A5DBC301-1263-9C01-25B0-F8101083FBF5
kern.num_files: 7438
kern.num_vnodes: 263168
kern.num_tasks: 16384
kern.num_threads: 81920
kern.num_taskthreads: 16384
kern.num_recycledvnodes: 4456941
kern.free_vnodes: 193754
kern.namecache_disabled: 0
kern.sched_enable_smt: 1
kern.sched_allow_NO_SMT_threads: 1
kern.sched_rt_avoid_cpu0: 0
kern.sched_recommended_cores: 4095
kern.suspend_cluster_powerdown: 0
kern.preheat_max_bytes: 1048576
kern.preheat_min_bytes: 32768
kern.speculative_prefetch_max: 201326592
kern.speculative_prefetch_max_iosize: 524288
kern.vm_page_free_target: 4000
kern.vm_page_free_min: 3500
kern.vm_page_free_reserved: 908
kern.vm_page_speculative_percentage: 5
kern.vm_page_speculative_q_age_ms: 500
kern.vm_max_delayed_work_limit: 32
kern.vm_max_batch: 256
kern.bootsessionuuid: 69A79335-3DBC-4422-A7C8-776C3CA6C12C
kern.bootuuid: 5DD84879-F1B7-486E-9BB0-573107EC342C
kern.apfsprebootuuid: 5DD84879-F1B7-486E-9BB0-573107EC342C
kern.bootobjectspath: /5DD84879-F1B7-486E-9BB0-573107EC342C/boot/D1071471629CEB6D22AC627CCCB379131FBCA7550B842FE02C591797E5BC90901F089F3D6789A980F42E91B91B86D1E8
kern.drivercorefile: /private/var/dextcores/%N.core
kern.vfsnspace: 0
kern.singleuser: 0
kern.minimalboot: 0
kern.affinity_sets_enabled: 1
kern.affinity_sets_mapping: 1
kern.slide: 1
kern.ipc_voucher_trace_contents: 0
kern.stack_size: 16384
kern.stack_depth_max: 0
kern.kern_feature_overrides: 0
kern.ipc_portbt: 0
kern.ikm_signature_failures: 0
kern.ikm_signature_failure_id: 0
kern.sched: edge
kern.cpu_checkin_interval: 5000
kern.precise_user_kernel_time: 1
kern.pervasive_energy: 1
kern.timer_coalesce_bg_scale: -5
kern.timer_resort_threshold_ns: 50000000
kern.timer_coalesce_bg_ns_max: 100000000
kern.timer_coalesce_kt_scale: 3
kern.timer_coalesce_kt_ns_max: 1000000
kern.timer_coalesce_fp_scale: 3
kern.timer_coalesce_fp_ns_max: 1000000
kern.timer_coalesce_ts_scale: 3
kern.timer_coalesce_ts_ns_max: 1000000
kern.timer_coalesce_tier0_scale: 3
kern.timer_coalesce_tier0_ns_max: 1000000
kern.timer_coalesce_tier1_scale: 2
kern.timer_coalesce_tier1_ns_max: 5000000
kern.timer_coalesce_tier2_scale: 1
kern.timer_coalesce_tier2_ns_max: 20000000
kern.timer_coalesce_tier3_scale: -2
kern.timer_coalesce_tier3_ns_max: 75000000
kern.timer_coalesce_tier4_scale: 3
kern.timer_coalesce_tier4_ns_max: 1000000
kern.timer_coalesce_tier5_scale: 3
kern.timer_coalesce_tier5_ns_max: 1000000
kern.hv_support: 1
kern.hv_disable: 0
kern.darkboot: 0
kern.link_time_optimized: 1
kern.thread_groups_supported: 1
kern.direct_handoff: 1
kern.num_static_scalable_counters: 56
kern.trial_treatment_id: 
kern.trial_experiment_id: 
kern.trial_deployment_id: -1
kern.page_protection_type: 1
kern.exclaves_status: 255
kern.exclaves_boot_stage: -1
kern.memorystatus_sysprocs_idle_delay_time: 10
kern.memorystatus_apps_idle_delay_time: 10
kern.jetsam_aging_policy: 2
kern.memorystatus_level: 96
kern.memorystatus_purge_on_warning: 2
kern.memorystatus_purge_on_urgent: 5
kern.memorystatus_purge_on_critical: 8
kern.vm_pressure_level_transition_threshold: 30
kern.stackshot_estimate_adj: 75
kern.msgbuf: 131072
kern.task_exc_guard_default: 153
kern.ulock_adaptive_spin_usecs: 20
kern.progressmeterenable: 0
kern.progressmeter: 223
kern.consoleoptions: 0
kern.shutdownreason:  wdog,reset_in1 ap_restart
kern.aotmodebits: 0
kern.aotmode: 0
kern.pmtimeout: 0
kern.pmcallouttimer: 2000
kern.iokittest: 0
kern.sleeptime: { sec = 0, usec = 0 } Wed Dec 31 16:00:00 1969
kern.waketime: { sec = 0, usec = 0 } Wed Dec 31 16:00:00 1969
kern.wake_abs_time: 0
kern.sleep_abs_time: 0
kern.useractive_abs_time: 119487551
kern.userinactive_abs_time: 0
kern.willshutdown: 0
kern.prng.scheduled_reseed_count: 20095
kern.prng.scheduled_reseed_max_sample_count: 40947143
kern.prng.entropy_max_sample_count: 11025
kern.prng.pool_0.sample_count: 0
kern.prng.pool_0.drain_count: 20095
kern.prng.pool_0.max_sample_count: 9957
kern.prng.pool_1.sample_count: 1227
kern.prng.pool_1.drain_count: 10047
kern.prng.pool_1.max_sample_count: 13541
kern.prng.pool_2.sample_count: 3459
kern.prng.pool_2.drain_count: 5023
kern.prng.pool_2.max_sample_count: 18454
kern.prng.pool_3.sample_count: 8488
kern.prng.pool_3.drain_count: 2511
kern.prng.pool_3.max_sample_count: 28546
kern.prng.pool_4.sample_count: 11102
kern.prng.pool_4.drain_count: 1255
kern.prng.pool_4.max_sample_count: 44662
kern.prng.pool_5.sample_count: 23517
kern.prng.pool_5.drain_count: 627
kern.prng.pool_5.max_sample_count: 77630
kern.prng.pool_6.sample_count: 49088
kern.prng.pool_6.drain_count: 313
kern.prng.pool_6.max_sample_count: 146052
kern.prng.pool_7.sample_count: 96934
kern.prng.pool_7.drain_count: 156
kern.prng.pool_7.max_sample_count: 274927
kern.prng.pool_8.sample_count: 94512
kern.prng.pool_8.drain_count: 78
kern.prng.pool_8.max_sample_count: 546779
kern.prng.pool_9.sample_count: 95264
kern.prng.pool_9.drain_count: 39
kern.prng.pool_9.max_sample_count: 1030311
kern.prng.pool_10.sample_count: 475006
kern.prng.pool_10.drain_count: 19
kern.prng.pool_10.max_sample_count: 1971360
kern.prng.pool_11.sample_count: 1248630
kern.prng.pool_11.drain_count: 9
kern.prng.pool_11.max_sample_count: 3455111
kern.prng.pool_12.sample_count: 3248565
kern.prng.pool_12.drain_count: 4
kern.prng.pool_12.max_sample_count: 6628045
kern.prng.pool_13.sample_count: 3297538
kern.prng.pool_13.drain_count: 2
kern.prng.pool_13.max_sample_count: 10831311
kern.prng.pool_14.sample_count: 3226845
kern.prng.pool_14.drain_count: 1
kern.prng.pool_14.max_sample_count: 17537280
kern.prng.pool_15.sample_count: 20734725
kern.prng.pool_15.drain_count: 0
kern.prng.pool_15.max_sample_count: 20734725
kern.prng.pool_16.sample_count: 20908348
kern.prng.pool_16.drain_count: 0
kern.prng.pool_16.max_sample_count: 20908348
kern.prng.pool_17.sample_count: 20937745
kern.prng.pool_17.drain_count: 0
kern.prng.pool_17.max_sample_count: 20937745
kern.prng.pool_18.sample_count: 20766833
kern.prng.pool_18.drain_count: 0
kern.prng.pool_18.max_sample_count: 20766833
kern.prng.pool_19.sample_count: 20965672
kern.prng.pool_19.drain_count: 0
kern.prng.pool_19.max_sample_count: 20965672
kern.prng.pool_20.sample_count: 20991864
kern.prng.pool_20.drain_count: 0
kern.prng.pool_20.max_sample_count: 20991864
kern.prng.pool_21.sample_count: 20788973
kern.prng.pool_21.drain_count: 0
kern.prng.pool_21.max_sample_count: 20788973
kern.prng.pool_22.sample_count: 20750082
kern.prng.pool_22.drain_count: 0
kern.prng.pool_22.max_sample_count: 20750082
kern.prng.pool_23.sample_count: 20695656
kern.prng.pool_23.drain_count: 0
kern.prng.pool_23.max_sample_count: 20695656
kern.prng.pool_24.sample_count: 20843192
kern.prng.pool_24.drain_count: 0
kern.prng.pool_24.max_sample_count: 20843192
kern.prng.pool_25.sample_count: 20677933
kern.prng.pool_25.drain_count: 0
kern.prng.pool_25.max_sample_count: 20677933
kern.prng.pool_26.sample_count: 20753893
kern.prng.pool_26.drain_count: 0
kern.prng.pool_26.max_sample_count: 20753893
kern.prng.pool_27.sample_count: 20588828
kern.prng.pool_27.drain_count: 0
kern.prng.pool_27.max_sample_count: 20588828
kern.prng.pool_28.sample_count: 20784194
kern.prng.pool_28.drain_count: 0
kern.prng.pool_28.max_sample_count: 20784194
kern.prng.pool_29.sample_count: 20852725
kern.prng.pool_29.drain_count: 0
kern.prng.pool_29.max_sample_count: 20852725
kern.prng.pool_30.sample_count: 20781162
kern.prng.pool_30.drain_count: 0
kern.prng.pool_30.max_sample_count: 20781162
kern.prng.pool_31.sample_count: 20781032
kern.prng.pool_31.drain_count: 0
kern.prng.pool_31.max_sample_count: 20781032
kern.crypto.sha1: SHA1_VNG_ARM
kern.crypto.sha256: SHA256_VNG_ARM
kern.crypto.sha384: SHA384_VNG_ARM
kern.crypto.sha512: SHA512_VNG_ARM
kern.crypto.aes.ecb.encrypt: AES_ECB_ARM
kern.crypto.aes.ecb.decrypt: AES_ECB_ARM
kern.crypto.aes.xts.encrypt: AES_XTS_ARM
kern.crypto.aes.xts.decrypt: AES_XTS_ARM
kern.monotonicclock: 37379704
kern.monotonicclock_usecs: 37379704427459 8819927585293
kern.monotonicclock_rate_usecs: 30
kern.monotoniclock_offset_usecs: 1711443540856170
kern.pthread_mutex_default_policy: 0
kern.amfm_log_ctl: 0
vm.loadavg: { 18.73 17.74 16.71 }
vm.swapusage: total = 0.00M  used = 0.00M  free = 0.00M  (encrypted)
vm.cs_executable_create_upl: 0
vm.cs_executable_wire: 0
vm.apple_protect_pager_count: 0
vm.apple_protect_pager_count_mapped: 0
vm.apple_protect_pager_cache_limit: 20
vm.vm_do_collapse_compressor: 0
vm.vm_do_collapse_compressor_pages: 0
vm.vm_do_collapse_terminate: 0
vm.vm_do_collapse_terminate_failure: 0
vm.vm_should_cow_but_wired: 0
vm.vm_create_upl_extra_cow: 16123
vm.vm_create_upl_extra_cow_pages: 3984179
vm.vm_create_upl_lookup_failure_write: 0
vm.vm_create_upl_lookup_failure_copy: 0
vm.vm_debug_events: 0
vm.shared_region_unnest_logging: 1
vm.shared_region_trace_level: 1
vm.shared_region_version: 3
vm.shared_region_persistence: 0
vm.pagesize: 16384
vm.vm_page_free_target: 4000
vm.memory_pressure: 0
vm.page_free_wanted: 0
vm.page_purgeable_count: 11645
vm.page_purgeable_wired_count: 0
vm.kern_lpage_count: 0
vm.madvise_free_debug: 0
vm.madvise_free_debug_sometimes: 0
vm.page_reusable_count: 966325
vm.reusable_success: 172772916
vm.reusable_failure: 374995
vm.reusable_pages_shared: 217821
vm.all_reusable_calls: 0
vm.partial_reusable_calls: 172907006
vm.reuse_success: 3354378
vm.reuse_failure: 0
vm.all_reuse_calls: 0
vm.partial_reuse_calls: 4031986
vm.can_reuse_success: 106042
vm.can_reuse_failure: 5355
vm.reusable_reclaimed: 0
vm.reusable_nonwritable: 372096
vm.reusable_shared: 908553
vm.free_shared: 2
vm.page_free_count: 107066
vm.page_speculative_count: 482244
vm.page_cleaned_count: 0
vm.page_pageable_internal_count: 2288510
vm.page_pageable_external_count: 1603900
vm.pageout_inactive_clean: 22592506
vm.pageout_inactive_used: 5663
vm.pageout_inactive_dirty_internal: 10390
vm.pageout_inactive_dirty_external: 8647
vm.pageout_speculative_clean: 22566299
vm.pageout_freed_external: 7874
vm.pageout_freed_speculative: 22566299
vm.pageout_freed_cleaned: 17055
vm.pageout_protected_sharedcache: 0
vm.pageout_forcereclaimed_sharedcache: 0
vm.pageout_protected_realtime: 0
vm.pageout_forcereclaimed_realtime: 0
vm.page_realtime_count: 227
vm.pageout_protect_realtime: 1
vm.prefault_nb_pages: 104004
vm.prefault_nb_bailout: 0
vm.vm_min_kernel_address: 18446741874686296064
vm.vm_max_kernel_address: 18446742493161586687
vm.pages: 4121982
vm.page_busy_absent_skipped: 0
vm.upl_pages_tainted: 0
vm.iopl_pages_tainted: 0
vm.corpse_footprint_count: 16
vm.corpse_footprint_size_avg: 128609
vm.corpse_footprint_size_max: 266780
vm.corpse_footprint_full: 0
vm.corpse_footprint_no_buf: 0
vm.cs_defer_to_csm: 0
vm.cs_defer_to_csm_not: 1002798
vm.shared_region_pager_copied: 0
vm.shared_region_pager_slid: 60265
vm.shared_region_pager_slid_error: 0
vm.shared_region_pager_reclaimed: 5738
vm.shared_region_destroy_delay: 120
vm.map_lookup_locked_copy_slowly_count: 0
vm.map_lookup_locked_copy_slowly_size: 0
vm.map_lookup_locked_copy_slowly_max: 0
vm.map_lookup_locked_copy_slowly_restart: 0
vm.map_lookup_locked_copy_slowly_error: 0
vm.map_lookup_locked_copy_strategically_count: 0
vm.map_lookup_locked_copy_strategically_size: 0
vm.map_lookup_locked_copy_strategically_max: 0
vm.map_lookup_locked_copy_strategically_restart: 0
vm.map_lookup_locked_copy_strategically_error: 0
vm.map_lookup_locked_copy_shadow_count: 413692
vm.map_lookup_locked_copy_shadow_size: 4163866820608
vm.map_lookup_locked_copy_shadow_max: 56508416
vm.protect_privileged_from_untrusted: 1
vm.copied_on_read: 0
vm.shared_region_count: 3
vm.shared_region_peak: 3
vm.map_set_size_limit_count: 0
vm.map_set_data_limit_count: 0
vm.map_enter_RLIMIT_AS_count: 0
vm.map_enter_RLIMIT_DATA_count: 0
vm.fault_resilient_media_initiate: 0
vm.fault_resilient_media_retry: 0
vm.fault_resilient_media_proceed: 0
vm.fault_resilient_media_release: 0
vm.fault_resilient_media_abort1: 0
vm.fault_resilient_media_abort2: 0
vm.pmap_query_page_info_retries: 0
vm.shared_region_pivot: 0
vm.object_shadow_forced: 435723
vm.object_shadow_skipped: 825543
vm.vmtc_total: 0
vm.retired_pages_count: 0
vm.vm_ecc_corrected_count: 0
vm.vm_ecc_uncorrected_count: 0
vm.vm_ecc_db_pages: 0
vm.vm_ecc_zero_pages: 0
vm.vm_ecc_panic_pages: 0
vm.vm_ecc_max_db_pages: 0
vm.map_range_overflows_count: 3
vm.map_range_oveflows_log: 0
vm.c_seg_filled_no_contention: 654
vm.c_seg_filled_contention: 0
vm.c_seg_filled_contention_sec_max: 0
vm.c_seg_filled_contention_nsec_max: 0
vm.c_process_major_report_over_ms: 9
vm.c_process_major_yield_after: 1000
vm.c_process_major_reports: 0
vm.c_process_major_max_sec: 0
vm.c_process_major_max_nsec: 0
vm.c_process_major_peak_segcount: 0
vm.panic_ws_crash: 0
vm.cs_force_kill: 0
vm.cs_force_hard: 0
vm.cs_debug: 0
vm.cs_debug_fail_on_unsigned_code: 0
vm.cs_debug_unsigned_exec_failures: 0
vm.cs_debug_unsigned_mmap_failures: 0
vm.cs_all_vnodes: 0
vm.cs_system_enforcement: 1
vm.cs_process_enforcement: 0
vm.cs_enforcement_panic: 0
vm.cs_library_validation: 0
vm.swap_enabled: 1
vm.global_user_wire_limit: 56349970923
vm.user_wire_limit: 56349970923
vm.global_no_user_wire_amount: 12369505813
vm.add_wire_count_over_global_limit: 0
vm.add_wire_count_over_user_limit: 0
vm.vm_copy_src_not_internal: 0
vm.vm_copy_src_not_symmetric: 0
vm.vm_copy_src_large: 1424
vm.vm_page_external_count: 1605258
vm.vm_page_filecache_min: 1481762
vm.vm_page_xpmapped_min: 441611
vm.compressor_input_bytes: 170229760
vm.compressor_compressed_bytes: 40510848
vm.compressor_bytes_used: 12028224
vm.compressor_mode: 4
vm.compressor_is_active: 1
vm.compressor_swapout_target_age: 0
vm.compressor_available: 1
vm.compressor_segment_buffer_size: 65536
vm.compressor_pool_size: 135831093248
vm.compressor_min_csegs_per_major_compaction: 30
vm.vm_ripe_target_age_in_secs: 172800
vm.compressor_eval_period_in_msecs: 250
vm.compressor_sample_min_in_msecs: 500
vm.compressor_sample_max_in_msecs: 10000
vm.compressor_thrashing_threshold_per_10msecs: 50
vm.compressor_thrashing_min_per_10msecs: 20
vm.compressor_swapouts_under_30s: 0
vm.compressor_swapouts_under_60s: 0
vm.compressor_swapouts_under_300s: 0
vm.compressor_swapper_reclaim_swapins: 0
vm.compressor_swapper_defrag_swapins: 0
vm.compressor_swapper_swapout_threshold_exceeded: 0
vm.compressor_swapper_swapout_fileq_throttled: 0
vm.compressor_swapper_swapout_free_count_low: 0
vm.compressor_swapper_swapout_thrashing_detected: 0
vm.compressor_swapper_swapout_fragmentation_detected: 0
vm.swapfileprefix: /System/Volumes/VM/swapfile
vm.compressor_timing_enabled: 0
vm.vm_page_donate_mode: 1
vm.vm_page_donate_target_high: 518154
vm.vm_page_donate_target_low: 100
vm.lz4_compressions: 0
vm.lz4_compression_failures: 0
vm.lz4_compressed_bytes: 0
vm.lz4_wk_compression_delta: 0
vm.lz4_wk_compression_negative_delta: 0
vm.lz4_decompressions: 0
vm.lz4_decompressed_bytes: 0
vm.uc_decompressions: 0
vm.wk_compressions: 0
vm.wk_catime: 0
vm.wkh_catime: 0
vm.wkh_compressions: 0
vm.wks_catime: 0
vm.wks_compressions: 0
vm.wk_compressions_exclusive: 0
vm.wk_sv_compressions: 0
vm.wk_mzv_compressions: 0
vm.wk_compression_failures: 0
vm.wk_compressed_bytes_exclusive: 0
vm.wk_compressed_bytes_total: 0
vm.wks_compressed_bytes: 0
vm.wks_compression_failures: 0
vm.wks_sv_compressions: 0
vm.wk_decompressions: 0
vm.wk_datime: 0
vm.wkh_datime: 0
vm.wkh_decompressions: 0
vm.wks_datime: 0
vm.wks_decompressions: 0
vm.wk_decompressed_bytes: 0
vm.wk_sv_decompressions: 0
vm.lz4_threshold: 12288
vm.wkdm_reeval_threshold: 1536
vm.lz4_max_failure_skips: 0
vm.lz4_max_failure_run_length: -1
vm.lz4_max_preselects: 0
vm.lz4_run_preselection_threshold: -1
vm.lz4_run_continue_bytes: 0
vm.lz4_profitable_bytes: 0
vm.vm_page_background_mode: 1
vm.vm_page_background_exclude_external: 0
vm.vm_page_background_target: 50000
vm.vm_page_background_count: 148243
vm.vm_page_background_internal_count: 79189
vm.vm_page_background_external_count: 69054
vm.vm_page_background_promoted_count: 942883
vm.vm_pageout_considered_bq_internal: 14979
vm.vm_pageout_considered_bq_external: 3905
vm.vm_pageout_rejected_bq_internal: 0
vm.vm_pageout_rejected_bq_external: 0
vm.darkwake_mode: 0
vm.cs_blob_count: 3636
vm.cs_blob_size: 165165757
vm.cs_blob_count_peak: 4735
vm.cs_blob_size_peak: 187518296
vm.cs_blob_size_max: 7544603
vfs.generic.maxtypenum: 31
vfs.generic.nfs.server.wg_delay: 1000
vfs.generic.nfs.server.wg_delay_v3: 0
vfs.generic.nfs.server.require_resv_port: 0
vfs.generic.nfs.server.async: 0
vfs.generic.nfs.server.export_hash_size: 64
vfs.generic.nfs.server.reqcache_size: 64
vfs.generic.nfs.server.request_queue_length: 128
vfs.generic.nfs.server.user_stats: 1
vfs.generic.nfs.server.gss_context_ttl: 28800
vfs.generic.nfs.server.debug_ctl: 0
vfs.generic.nfs.server.unprocessed_rpc_current: 0
vfs.generic.nfs.server.unprocessed_rpc_max: 67108864
vfs.generic.nfs.server.fsevents: 1
vfs.generic.nfs.server.nfsd_thread_max: 0
vfs.generic.nfs.server.nfsd_thread_count: 0
vfs.generic.nfs.server.nfsd_sock_idle_timeout: 3600
vfs.generic.nfs.server.nfsd_tcp_connections: 0
vfs.generic.nfs.server.use_upcall_svc: 1
vfs.generic.nfs.server.upcall_queue_limit: 0
vfs.generic.nfs.server.upcall_queue_max_seen: 0
vfs.generic.nfs.server.upcall_queue_count: 0
vfs.generic.nfs.client.uninterruptible_pagein: 0
vfs.generic.nfs.client.default_nfs4domain: 
vfs.generic.nfs.client.root_steals_gss_context: 0
vfs.generic.nfs.client.readlink_nocache: 0
vfs.generic.nfs.client.debug_ctl: 0
vfs.generic.nfs.client.tcp_sockbuf: 6291456
vfs.generic.nfs.client.split_open_owner: 0
vfs.generic.nfs.client.squishy_flags: 11
vfs.generic.nfs.client.is_mobile: 0
vfs.generic.nfs.client.callback_port: 0
vfs.generic.nfs.client.idmap_ctrl: 1
vfs.generic.nfs.client.access_for_getattr: 0
vfs.generic.nfs.client.access_dotzfs: 1
vfs.generic.nfs.client.access_delete: 1
vfs.generic.nfs.client.max_async_writes: 128
vfs.generic.nfs.client.lockd_mounts: 0
vfs.generic.nfs.client.nfsiod_thread_count: 0
vfs.generic.nfs.client.nfsiod_thread_max: 16
vfs.generic.nfs.client.statfs_rate_limit: 10
vfs.generic.nfs.client.allow_async: 0
vfs.generic.nfs.client.access_cache_timeout: 60
vfs.generic.nfs.client.iosize: 1048576
vfs.generic.nfs.client.nextdowndelay: 30
vfs.generic.nfs.client.initialdowndelay: 5
vfs.generic.sync_timeout: 5
vfs.generic.root_unmounted_cleanly: 1
vfs.generic.lifs.max_io_threads: 1
vfs.generic.lifs.max_inline_io_size: 262144
vfs.generic.lifs.max_read_size: 8388608
vfs.generic.lifs.max_write_size: 2097152
vfs.generic.lifs.max_ssd_read_size: 8388608
vfs.generic.lifs.max_ssd_write_size: 8388608
vfs.generic.lifs.max_dev_read_size: 4194304
vfs.generic.lifs.max_dev_write_size: 4194304
vfs.generic.lifs.max_read_blockmap_size: 1048576
vfs.generic.lifs.max_write_blockmap_size: 1048576
vfs.generic.lifs.max_ssd_read_blockmap_size: 262144
vfs.generic.lifs.max_ssd_write_blockmap_size: 262144
vfs.generic.lifs.read_meta_cache_hit: 0
vfs.generic.lifs.write_meta_cache_hit: 0
vfs.generic.hfs.kdebug.allocation: 0
vfs.generic.hfs.jnl.trim_flush: 240
vfs.generic.hfs.jnl.kdebug.trim: 0
vfs.generic.hfs.allocated: 13638
vfs.generic.always_do_fullfsync: 0
vfs.generic.apfs.fusion_rc_promotion_size_limit_mb: 4096
vfs.generic.apfs.fusion_rc_flags: 0
vfs.generic.apfs.fusion_w2rc_filled_ratio_threshold: 50
vfs.generic.apfs.fusion_lc_rc_promotion_threshold_mult: 8
vfs.generic.apfs.fusion_rc_promotion_threshold_mult: 4
vfs.generic.apfs.fusion_wbc_buffersize: 16777216
vfs.generic.apfs.fusion_verbosity_flags: 0
vfs.generic.apfs.fusion_paranoia_level: 0
vfs.generic.apfs.fusion_swapfile_backoff: 4
vfs.generic.apfs.fusion_slow_io_threshold: 10240
vfs.generic.apfs.fusion_elevator_throttle: 100
vfs.generic.apfs.fusion_promoter_throttle: 100
vfs.generic.apfs.fusion_promoter_queue_limit: 1000
vfs.generic.apfs.fusion_wbc_elevator_wmk: 0
vfs.generic.apfs.fusion_wbc_backoff_wmk_reenable: 25
vfs.generic.apfs.fusion_wbc_backoff_wmk_med: 95
vfs.generic.apfs.fusion_wbc_backoff_wmk_low: 60
vfs.generic.apfs.unwritten_freeze_threshold: 4294967296
vfs.generic.apfs.proc_free_blocks_threshold: 8096
vfs.generic.apfs.rangelist_verification_mode: 0
vfs.generic.apfs.allocated: 318034057
vfs.generic.autofs.vnode_recycle_on_inactive: 1
vfs.nummntops: 27
vfs.vnstats.vn_dealloc_level: 0
vfs.vnstats.desired_vnodes: 263168
vfs.vnstats.num_vnodes: 263168
vfs.vnstats.num_vnodes_min: 263168
vfs.vnstats.num_vnodes_max: 263168
vfs.vnstats.num_deallocable_vnodes: 0
vfs.vnstats.num_deallocable_busy_vnodes: 0
vfs.vnstats.num_dead_vnodes: 338
vfs.vnstats.num_dead_vnodes_to_dealloc: 0
vfs.vnstats.num_async_work_vnodes: 0
vfs.vnstats.num_rapid_aging_vnodes: 2570
vfs.vnstats.num_free_vnodes: 193754
vfs.vnstats.num_recycledvnodes: 4456941
vfs.vnstats.num_allocedvnodes: 0
vfs.vnstats.num_deallocedvnodes: 0
vfs.vnstats.num_newvnode_calls: 4719853
vfs.vnstats.num_newvnode_calls_nodead: 6464
vfs.ncstats.nc_smr_enabled: 1
vfs.nspace.resolver: 0
vfs.nspace.prevent_materialization: 0
vfs.nspace.thread_prevent_materialization: 0
vfs.purge_vm_pagers: 1
net.local.stream.sendspace: 8192
net.local.stream.recvspace: 8192
net.local.stream.tracemdns: 0
net.local.dgram.maxdgram: 2048
net.local.dgram.recvspace: 4096
net.local.inflight: 0
net.local.log: 0
net.inet.ip.portrange.lowfirst: 1023
net.inet.ip.portrange.lowlast: 600
net.inet.ip.portrange.first: 49152
net.inet.ip.portrange.last: 65535
net.inet.ip.portrange.hifirst: 49152
net.inet.ip.portrange.hilast: 65535
net.inet.ip.portrange.ipport_allow_udp_port_exhaustion: 0
net.inet.ip.forwarding: 0
net.inet.ip.redirect: 1
net.inet.ip.ttl: 64
net.inet.ip.rtexpire: 18
net.inet.ip.rtminexpire: 10
net.inet.ip.rtmaxcache: 128
net.inet.ip.sourceroute: 0
net.inet.ip.accept_sourceroute: 0
net.inet.ip.gifttl: 30
net.inet.ip.log.privacy: 1
net.inet.ip.linklocal.in.allowbadttl: 1
net.inet.ip.dummynet.hash_size: 64
net.inet.ip.dummynet.curr_time: 0
net.inet.ip.dummynet.ready_heap: 0
net.inet.ip.dummynet.extract_heap: 0
net.inet.ip.dummynet.searches: 0
net.inet.ip.dummynet.search_steps: 0
net.inet.ip.dummynet.expire: 1
net.inet.ip.dummynet.max_chain_len: 16
net.inet.ip.dummynet.red_lookup_depth: 256
net.inet.ip.dummynet.red_avg_pkt_size: 512
net.inet.ip.dummynet.red_max_pkt_size: 1500
net.inet.ip.dummynet.debug: 0
net.inet.ip.mcast.maxgrpsrc: 512
net.inet.ip.mcast.maxsocksrc: 128
net.inet.ip.mcast.loop: 1
net.inet.ip.subnets_are_local: 0
net.inet.ip.sendsourcequench: 0
net.inet.ip.maxfragpackets: 8192
net.inet.ip.fragpackets: 0
net.inet.ip.maxfragsperpacket: 128
net.inet.ip.adj_clear_hwcksum: 0
net.inet.ip.adj_partial_sum: 1
net.inet.ip.check_interface: 1
net.inet.ip.checkinterface_debug: 0
net.inet.ip.rx_chaining: 1
net.inet.ip.rx_chainsz: 6
net.inet.ip.maxchainsent: 49
net.inet.ip.force_ipsum: 0
net.inet.ip.select_srcif_debug: 0
net.inet.ip.output_perf: 0
net.inet.ip.output_perf_bins: 0
net.inet.ip.rfc6864: 1
net.inet.icmp.maskrepl: 0
net.inet.icmp.timestamp: 0
net.inet.icmp.drop_redirect: 1
net.inet.icmp.log_redirect: 0
net.inet.icmp.bmcastecho: 1
net.inet.icmp.suppress_icmp_port_unreach: 0
net.inet.igmp.recvifkludge: 1
net.inet.igmp.sendra: 1
net.inet.igmp.sendlocal: 1
net.inet.igmp.v1enable: 1
net.inet.igmp.v2enable: 1
net.inet.igmp.legacysupp: 0
net.inet.igmp.default_version: 3
net.inet.igmp.gsrdelay: 10
net.inet.igmp.debug: 0
net.inet.tcp.mssdflt: 512
net.inet.tcp.keepidle: 7200000
net.inet.tcp.keepintvl: 75000
net.inet.tcp.sendspace: 131072
net.inet.tcp.recvspace: 131072
net.inet.tcp.keepinit: 75000
net.inet.tcp.v6mssdflt: 1024
net.inet.tcp.log.enable: 0
net.inet.tcp.log.enable_usage: connection:0x00000001 rtt:0x00000002 ka:0x00000004 log:0x00000008 loop:0x00000010 local:0x00000020 gw:0x00000040 syn:0x00000100 fin:0x00000200 rst:0x00000400 dropnecp:0x00001000 droppcb:0x00002000 droppkt:0x00004000 fswflow:0x00008000 state:0x00010000 synrxmt:0x00020000 output:0x00040000 
net.inet.tcp.log.rtt_port: 0
net.inet.tcp.log.thflags_if_family: 0
net.inet.tcp.log.rate_limit: 1000
net.inet.tcp.log.rate_duration: 60
net.inet.tcp.log.rate_max: 0
net.inet.tcp.log.rate_exceeded_total: 0
net.inet.tcp.log.rate_current: 0
net.inet.tcp.reass.overflows: 0
net.inet.tcp.reass.qlen: 0
net.inet.tcp.backoff_maximum: 65536
net.inet.tcp.ecn_timeout: 60
net.inet.tcp.disable_tcp_heuristics: 0
net.inet.tcp.mptcp_version_timeout: 1440
net.inet.tcp.clear_tfocache: 0
net.inet.tcp.flow_control_response: 1
net.inet.tcp.log_in_vain: 0
net.inet.tcp.ack_strategy: 1
net.inet.tcp.blackhole: 0
net.inet.tcp.aggressive_rcvwnd_inc: 1
net.inet.tcp.delayed_ack: 3
net.inet.tcp.recvbg: 0
net.inet.tcp.drop_synfin: 1
net.inet.tcp.slowlink_wsize: 8192
net.inet.tcp.maxseg_unacked: 8
net.inet.tcp.rfc3465: 1
net.inet.tcp.rfc3465_lim2: 1
net.inet.tcp.recv_allowed_iaj: 5
net.inet.tcp.doautorcvbuf: 1
net.inet.tcp.autotunereorder: 1
net.inet.tcp.autorcvbufmax: 4194304
net.inet.tcp.disable_access_to_stats: 1
net.inet.tcp.challengeack_limit: 10
net.inet.tcp.do_rfc5961: 1
net.inet.tcp.do_better_lr: 1
net.inet.tcp.use_min_curr_rtt: 1
net.inet.tcp.awdl_rtobase: 100
net.inet.tcp.rcvsspktcnt: 512
net.inet.tcp.rexmt_thresh: 3
net.inet.tcp.path_mtu_discovery: 1
net.inet.tcp.local_slowstart_flightsize: 8
net.inet.tcp.tso: 1
net.inet.tcp.ecn_setup_percentage: 100
net.inet.tcp.accurate_ecn: 0
net.inet.tcp.do_ack_compression: 1
net.inet.tcp.ack_compression_rate: 5
net.inet.tcp.randomize_timestamps: 1
net.inet.tcp.ecn_initiate_out: 2
net.inet.tcp.ecn_negotiate_in: 2
net.inet.tcp.packetchain: 50
net.inet.tcp.socket_unlocked_on_output: 1
net.inet.tcp.min_iaj_win: 16
net.inet.tcp.acc_iaj_react_limit: 200
net.inet.tcp.autosndbufinc: 8192
net.inet.tcp.autosndbufmax: 4194304
net.inet.tcp.rtt_recvbg: 1
net.inet.tcp.recv_throttle_minwin: 16384
net.inet.tcp.enable_tlp: 1
net.inet.tcp.sack: 1
net.inet.tcp.sack_maxholes: 128
net.inet.tcp.sack_globalmaxholes: 65536
net.inet.tcp.sack_globalholes: 0
net.inet.tcp.fastopen_key: 
net.inet.tcp.fastopen_backlog: 10
net.inet.tcp.fastopen: 3
net.inet.tcp.now_init: 690264082
net.inet.tcp.microuptime_init: 5479745
net.inet.tcp.minmss: 216
net.inet.tcp.pcbcount: 51
net.inet.tcp.tw_pcbcount: 0
net.inet.tcp.icmp_may_rst: 1
net.inet.tcp.rtt_min: 100
net.inet.tcp.rexmt_slop: 200
net.inet.tcp.randomize_ports: 0
net.inet.tcp.win_scale_factor: 3
net.inet.tcp.init_rtt_from_cache: 1
net.inet.tcp.tso_debug: 0
net.inet.tcp.rxt_seg_max: 1024
net.inet.tcp.rxt_seg_drop: 0
net.inet.tcp.tcbhashsize: 4096
net.inet.tcp.keepcnt: 8
net.inet.tcp.msl: 15000
net.inet.tcp.fin_timeout: 60000
net.inet.tcp.max_persist_timeout: 0
net.inet.tcp.always_keepalive: 0
net.inet.tcp.timer_fastmode_idlemax: 10
net.inet.tcp.broken_peer_syn_rexmit_thres: 10
net.inet.tcp.tcp_timer_advanced: 3210
net.inet.tcp.tcp_resched_timerlist: 1080044
net.inet.tcp.pmtud_blackhole_detection: 1
net.inet.tcp.pmtud_blackhole_mss: 1200
net.inet.tcp.faster_mcopy: 1
net.inet.tcp.cubic_tcp_friendliness: 0
net.inet.tcp.cubic_fast_convergence: 0
net.inet.tcp.cubic_use_minrtt: 0
net.inet.tcp.cubic_minor_fixes: 1
net.inet.tcp.cubic_rfc_compliant: 1
net.inet.tcp.bg_target_qdelay: 40
net.inet.tcp.bg_allowed_increase: 8
net.inet.tcp.bg_tether_shift: 1
net.inet.tcp.bg_ss_fltsz: 2
net.inet.tcp.ledbat_plus_plus: 1
net.inet.tcp.rledbat: 1
net.inet.tcp.cc_debug: 0
net.inet.tcp.newreno_sockets: 0
net.inet.tcp.background_sockets: 0
net.inet.tcp.use_ledbat: 0
net.inet.tcp.cubic_sockets: 46
net.inet.tcp.use_newreno: 0
net.inet.tcp.mptcp_preferred_version: 1
net.inet.udp.checksum: 1
net.inet.udp.maxdgram: 9216
net.inet.udp.recvspace: 786896
net.inet.udp.log.enable: 0
net.inet.udp.log.enable_usage: bind:0x00000002 connection:0x00000001 log:0x00000008 loop:0x00000010 local:0x00000020 gw:0x00000040 dropnecp:0x00001000 droppcb:0x00002000 droppkt:0x00004000 
net.inet.udp.log.local_port_included: 0
net.inet.udp.log.remote_port_included: 0
net.inet.udp.log.local_port_excluded: 0
net.inet.udp.log.remote_port_excluded: 0
net.inet.udp.log.rate_limit: 1000
net.inet.udp.log.rate_duration: 60
net.inet.udp.log.rate_max: 0
net.inet.udp.log.rate_exceeded_total: 0
net.inet.udp.log.rate_current: 0
net.inet.udp.log_in_vain: 0
net.inet.udp.blackhole: 0
net.inet.udp.pcbcount: 67
net.inet.udp.randomize_ports: 1
net.inet.ipsec.def_policy: 1
net.inet.ipsec.esp_trans_deflev: 1
net.inet.ipsec.esp_net_deflev: 1
net.inet.ipsec.ah_trans_deflev: 1
net.inet.ipsec.ah_net_deflev: 1
net.inet.ipsec.ah_cleartos: 1
net.inet.ipsec.ah_offsetmask: 0
net.inet.ipsec.dfbit: 0
net.inet.ipsec.ecn: 0
net.inet.ipsec.debug: 0
net.inet.ipsec.esp_randpad: -1
net.inet.ipsec.bypass: 1
net.inet.ipsec.esp_port: 0
net.inet.mptcp.enable: 1
net.inet.mptcp.mptcp_cap_retr: 4
net.inet.mptcp.dss_csum: 0
net.inet.mptcp.fail: 1
net.inet.mptcp.keepalive: 840
net.inet.mptcp.rtthist_thresh: 600
net.inet.mptcp.rto_thresh: 1500
net.inet.mptcp.probeto: 1000
net.inet.mptcp.probecnt: 5
net.inet.mptcp.enable_v1: 1
net.inet.mptcp.reass_qlen: 0
net.inet.mptcp.pcbcount: 0
net.inet.mptcp.alternate_port: 0
net.inet.mptcp.allow_aggregate: 0
net.inet.mptcp.no_first_party: 0
net.inet.mptcp.expected_progress_headstart: 5000
net.inet.mptcp.rto: 3
net.inet.mptcp.nrto: 3
net.inet.mptcp.tw: 60
net.inet.raw.maxdgram: 8192
net.inet.raw.recvspace: 8192
net.inet.raw.pcbcount: 1
net.inet.log_restricted: 0
net.link.generic.system.ifcount: 29
net.link.generic.system.port_used.verbose: 0
net.link.generic.system.port_used.wakeuuid_not_set_last_time: { sec = 1748823245, usec = 399 } Sun Jun  1 17:14:05 2025
net.link.generic.system.port_used.wakeuuid_not_set_last_if: awdl0
net.link.generic.system.port_used.wakeuuid_last_update_time: { sec = 0, usec = 0 } Wed Dec 31 16:00:00 1969
net.link.generic.system.management.verbose: 0
net.link.generic.system.management.data_unrestricted: 0
net.link.generic.system.management.control_unrestricted: 0
net.link.generic.system.if_verbose: 0
net.link.generic.system.dlil_verbose: 0
net.link.generic.system.sndq_maxlen: 128
net.link.generic.system.rcvq_maxlen: 256
net.link.generic.system.rcvq_burst_limit: 8192
net.link.generic.system.rcvq_trim_pct: 8192
net.link.generic.system.rxpoll_decay: 2
net.link.generic.system.rxpoll_freeze_time: 1000000000
net.link.generic.system.rxpoll_sample_time: 10000000
net.link.generic.system.rxpoll_interval_time: 1000000
net.link.generic.system.rxpoll_interval_pkts: 0
net.link.generic.system.rxpoll_wakeups_lowat: 10
net.link.generic.system.rxpoll_wakeups_hiwat: 100
net.link.generic.system.rxpoll_max: 0
net.link.generic.system.rxpoll: 1
net.link.generic.system.dlil_input_threads: 29
net.link.generic.system.dlil_input_sanity_check: 0
net.link.generic.system.flow_advisory: 1
net.link.generic.system.delaybased_queue: 1
net.link.generic.system.hwcksum_in_invalidated: 0
net.link.generic.system.hwcksum_dbg: 0
net.link.generic.system.start_delayed: 0
net.link.generic.system.start_delay_disabled: 0
net.link.generic.system.hwcksum_dbg_mode: 0
net.link.generic.system.hwcksum_dbg_partial_forced: 0
net.link.generic.system.hwcksum_dbg_partial_forced_bytes: 0
net.link.generic.system.hwcksum_dbg_partial_rxoff_forced: 0
net.link.generic.system.hwcksum_dbg_partial_rxoff_adj: 0
net.link.generic.system.hwcksum_dbg_verified: 0
net.link.generic.system.hwcksum_dbg_bad_cksum: 0
net.link.generic.system.hwcksum_dbg_bad_rxoff: 0
net.link.generic.system.hwcksum_dbg_adjusted: 0
net.link.generic.system.hwcksum_dbg_finalized_hdr: 0
net.link.generic.system.hwcksum_dbg_finalized_data: 0
net.link.generic.system.hwcksum_tx: 1
net.link.generic.system.hwcksum_rx: 1
net.link.generic.system.tx_chain_len_count: 0
net.link.generic.system.threshold_notify: 1
net.link.generic.system.threshold_interval: 2
net.link.generic.system.wake_pkt_debug: 0
net.link.generic.system.enable_netagent: 1
net.link.ether.inet.prune_intvl: 300
net.link.ether.inet.probe_intvl: 7
net.link.ether.inet.max_age: 1200
net.link.ether.inet.host_down_time: 20
net.link.ether.inet.arp_llreach_base: 120
net.link.ether.inet.arp_unicast_lim: 3
net.link.ether.inet.maxtries: 5
net.link.ether.inet.maxhold: 16
net.link.ether.inet.useloopback: 1
net.link.ether.inet.proxyall: 0
net.link.ether.inet.sendllconflict: 0
net.link.ether.inet.log_arp_warnings: 0
net.link.ether.inet.keep_announcements: 1
net.link.ether.inet.send_conflicting_probes: 1
net.link.ether.inet.verbose: 0
net.link.ether.inet.maxhold_total: 1024
net.link.vlan.debug: 0
net.link.bridge.inherit_mac: 0
net.link.bridge.rtable_prune_period: 300
net.link.bridge.rtable_hash_size_max: 2048
net.link.bridge.txstart: 0
net.link.bridge.debug: 0
net.link.bridge.log_level: 5
net.link.bridge.segmentation: 1
net.link.bridge.vmnet_pf_tagging: 1
net.link.bridge.tso_reduce_mss_forwarding: 110
net.link.bridge.tso_reduce_mss_tx: 0
net.link.pktap.total_tap_count: 0
net.link.pktap.count_unknown_if_type: 0
net.link.pktap.log: 0
net.link.iptap.total_tap_count: 0
net.link.iptap.log: 0
net.link.bond.debug: 0
net.link.redirect.debug: 0
net.link.fake.txstart: 1
net.link.fake.hwcsum: 0
net.link.fake.nxattach: 0
net.link.fake.bsd_mode: 1
net.link.fake.debug: 0
net.link.fake.wmm_mode: 0
net.link.fake.multibuflet: 0
net.link.fake.low_latency: 0
net.link.fake.switch_combined_mode: 0
net.link.fake.switch_mode_frequency: 10
net.link.fake.tso_support: 0
net.link.fake.expiration_threshold: 500
net.link.fake.lro: 0
net.link.fake.pktpool_mode: 0
net.link.fake.link_layer_aggregation_factor: 96
net.link.fake.tx_headroom: 32
net.link.fake.fcs: 0
net.link.fake.trailer_length: 0
net.link.fake.tso_buf_size: 16384
net.link.fake.max_mtu: 2048
net.link.fake.buflet_size: 512
net.link.fake.user_access: 0
net.link.fake.if_adv_intvl: 0
net.link.fake.tx_drops: 0
net.link.fake.tx_exp_policy: 0
net.link.fake.tx_completion_mode: 0
net.link.fake.llink_cnt: 0
net.link.fake.qset_cnt: 4
net.link.fake.trace_tag: 0
net.link.loopback.max_dequeue: 256
net.link.loopback.sched_model: 0
net.link.loopback.dequeue_sc: 0
net.key.debug: 0
net.key.spi_trycnt: 1000
net.key.spi_minval: 256
net.key.spi_maxval: 268435455
net.key.int_random: 60
net.key.larval_lifetime: 30
net.key.blockacq_count: 10
net.key.blockacq_lifetime: 20
net.key.esp_keymin: 256
net.key.esp_auth: 0
net.key.ah_keymin: 128
net.key.prefered_oldsa: 0
net.key.natt_keepalive_interval: 20
net.inet6.ip6.forwarding: 0
net.inet6.ip6.redirect: 1
net.inet6.ip6.hlim: 64
net.inet6.ip6.maxfragpackets: 8192
net.inet6.ip6.accept_rtadv: 1
net.inet6.ip6.keepfaith: 0
net.inet6.ip6.log_interval: 5
net.inet6.ip6.hdrnestlimit: 15
net.inet6.ip6.dad_count: 1
net.inet6.ip6.auto_flowlabel: 1
net.inet6.ip6.defmcasthlim: 1
net.inet6.ip6.gifhlim: 0
net.inet6.ip6.kame_version: 2009/apple-darwin
net.inet6.ip6.use_deprecated: 1
net.inet6.ip6.rr_prune: 5
net.inet6.ip6.v6only: 0
net.inet6.ip6.rtexpire: 3600
net.inet6.ip6.rtminexpire: 10
net.inet6.ip6.rtmaxcache: 128
net.inet6.ip6.use_tempaddr: 1
net.inet6.ip6.temppltime: 86400
net.inet6.ip6.tempvltime: 604800
net.inet6.ip6.auto_linklocal: 1
net.inet6.ip6.prefer_tempaddr: 1
net.inet6.ip6.use_defaultzone: 0
net.inet6.ip6.maxfrags: 16384
net.inet6.ip6.mcast_pmtu: 0
net.inet6.ip6.neighborgcthresh: 1024
net.inet6.ip6.maxifprefixes: 16
net.inet6.ip6.maxifdefrouters: 64
net.inet6.ip6.maxdynroutes: 1024
net.inet6.ip6.ula_use_tempaddr: 0
net.inet6.ip6.mcast.maxgrpsrc: 512
net.inet6.ip6.mcast.maxsocksrc: 128
net.inet6.ip6.mcast.loop: 1
net.inet6.ip6.fragpackets: 0
net.inet6.ip6.adj_clear_hwcksum: 0
net.inet6.ip6.adj_partial_sum: 1
net.inet6.ip6.input_perf: 0
net.inet6.ip6.input_perf_bins: 0
net.inet6.ip6.check_interface: 1
net.inet6.ip6.checkinterface_debug: 0
net.inet6.ip6.output_perf: 0
net.inet6.ip6.output_perf_bins: 0
net.inet6.ip6.select_srcif_debug: 0
net.inet6.ip6.select_srcaddr_debug: 0
net.inet6.ip6.select_src_expensive_secondary_if: 0
net.inet6.ip6.select_src_strong_end: 1
net.inet6.ip6.only_allow_rfc4193_prefixes: 0
net.inet6.ip6.clat_debug: 0
net.inet6.ip6.cga_conflict_retries: 3
net.inet6.ip6.compliance_profile: 0
net.inet6.ip6.maxchainsent: 46
net.inet6.ip6.dad_enhanced: 1
net.inet6.ip6.nd6_dad_nonce_max_count: 3
net.inet6.ip6.in6_embedded_scope: 1
net.inet6.ip6.in6_embedded_scope_debug: 0
net.inet6.ipsec6.def_policy: 1
net.inet6.ipsec6.esp_trans_deflev: 1
net.inet6.ipsec6.esp_net_deflev: 1
net.inet6.ipsec6.ah_trans_deflev: 1
net.inet6.ipsec6.ah_net_deflev: 1
net.inet6.ipsec6.ecn: 0
net.inet6.ipsec6.debug: 0
net.inet6.ipsec6.esp_randpad: -1
net.inet6.icmp6.rediraccept: 1
net.inet6.icmp6.redirtimeout: 600
net.inet6.icmp6.nd6_prune: 1
net.inet6.icmp6.nd6_delay: 5
net.inet6.icmp6.nd6_umaxtries: 3
net.inet6.icmp6.nd6_mmaxtries: 3
net.inet6.icmp6.nd6_useloopback: 1
net.inet6.icmp6.nodeinfo: 0
net.inet6.icmp6.errppslimit: 581
net.inet6.icmp6.nd6_debug: 0
net.inet6.icmp6.nd6_accept_6to4: 1
net.inet6.icmp6.nd6_optimistic_dad: 63
net.inet6.icmp6.errppslimit_random_incr: 500
net.inet6.icmp6.nd6_onlink_ns_rfc4861: 0
net.inet6.icmp6.suppress_icmp6_port_unreach: 0
net.inet6.icmp6.nd6_prune_lazy: 5
net.inet6.icmp6.rappslimit: 10
net.inet6.icmp6.nd6_process_rti: 1
net.inet6.icmp6.nd6_llreach_base: 30
net.inet6.icmp6.nd6_maxsolstgt: 8
net.inet6.icmp6.nd6_maxproxiedsol: 4
net.inet6.icmp6.prproxy_cnt: 0
net.inet6.mld.gsrdelay: 10
net.inet6.mld.v1enable: 1
net.inet6.mld.v2enable: 1
net.inet6.mld.use_allow: 1
net.inet6.mld.debug: 0
net.inet6.send.opmode: 1
net.inet6.send.opstate: 1
net.systm.kctl.autorcvbufmax: 262144
net.systm.kctl.autorcvbufhigh: 0
net.systm.kctl.debug: 0
net.ppp.l2tp.nb_threads: 0
net.ppp.l2tp.thread_outq_size: 1024
net.pktsched.netem.sched_output_ival_ms: 1
net.pktsched.netem.heap_size: 2048
net.pktsched.verbose: 0
net.classq.fq_codel.fq_enable_pacing: 1
net.classq.verbose: 0
net.classq.def_c_target_qdelay: 0
net.classq.def_c_update_interval: 0
net.classq.def_l4s_target_qdelay: 0
net.classq.def_l4s_update_interval: 0
net.classq.ll_c_target_qdelay: 0
net.classq.ll_c_update_interval: 0
net.classq.ll_l4s_target_qdelay: 0
net.classq.ll_l4s_update_interval: 0
net.classq.enable_l4s: 1
net.restricted_port.enforced: 1
net.restricted_port.verbose: 0
net.cfil.log: 3
net.cfil.log_port: 0
net.cfil.log_pid: 0
net.cfil.log_proto: 0
net.cfil.log_data: 0
net.cfil.log_stats: 0
net.cfil.debug: 1
net.cfil.sock_attached_count: 0
net.cfil.active_count: 0
net.cfil.close_wait_timeout: 1000
net.cfil.behavior_flags: 0
net.cfil.sbtrim: 1
net.netagent.debug: 5
net.netagent.registered_count: 69
net.netagent.active_count: 67
net.mpklog.enabled: 1
net.mpklog.type: 0
net.mpklog.version: 1
net.necp.drop_all_level: 0
net.necp.debug: 0
net.necp.pass_loopback: 1
net.necp.pass_keepalives: 1
net.necp.socket_policy_count: 388
net.necp.socket_non_app_policy_count: 64
net.necp.ip_policy_count: 0
net.necp.session_count: 9
net.necp.client_fd_count: 133
net.necp.client_count: 201
net.necp.arena_count: 9
net.necp.nexus_flow_count: 39
net.necp.socket_flow_count: 1
net.necp.if_flow_count: 0
net.necp.observer_fd_count: 0
net.necp.observer_message_limit: 256
net.necp.sysctl_arena_count: 70
net.necp.drop_unentitled_level: 0
net.necp.pass_interpose: 1
net.necp.restrict_multicast: 1
net.necp.dedup_policies: 0
net.necp.necp_client_tracing_level: 0
net.necp.necp_client_tracing_pid: 0
net.necp.drop_management_level: 3
net.necp.drop_dest_debug: 0
net.necp.data_tracing_level: 0
net.necp.data_tracing_port: 0
net.necp.data_tracing_proto: 0
net.necp.data_tracing_pid: 0
net.necp.data_tracing_ifindex: 0
net.necp.data_tracing_match_all: 0
net.necp.data_tracing_session_order: 0
net.necp.data_tracing_policy_order: 0
net.ipsec.verify_interface_creation: 0
net.ipsec.max_pending_input: 512
net.ipsec.ring_size: 64
net.ipsec.tx_fsw_ring_size: 64
net.ipsec.rx_fsw_ring_size: 128
net.ipsec.debug: 0
net.utun.max_pending_input: 512
net.utun.ring_size: 64
net.utun.tx_fsw_ring_size: 64
net.utun.rx_fsw_ring_size: 128
net.stats.debug: 0
net.stats.debug_pid: 0
net.stats.sendspace: 2048
net.stats.recvspace: 8192
net.route.verbose: 0
net.soflow.log_level: 3
net.soflow.log_port: 0
net.soflow.log_pid: 0
net.soflow.log_proto: 0
net.soflow.nstat_disable: 0
net.soflow.disable: 0
net.soflow.count: 17
net.soflow.high_water_mark: 200
net.tracker.log: 3
net.tracker.idle_timeout: 10
net.vsock.sendspace: 524288
net.vsock.recvspace: 524288
net.qos.policy.restricted: 0
net.qos.policy.restrict_avapps: 0
net.qos.policy.wifi_enabled: 0
net.qos.policy.capable_enabled: 0
net.qos.reset_dscp_to_wifi_ac_map: 0
net.qos.verbose: 0
net.filter_state: 
net.ndrv_multi_max_count: 1024
net.statistics_privcheck: 0
net.alf.loglevel: 55
net.alf.perm: 0
net.alf.defaultaction: 1
net.alf.mqcount: 0
net.smb.fs.version: 501000
net.smb.fs.loglevel: 0
net.smb.fs.kern_deadtimer: 60
net.smb.fs.kern_hard_deadtimer: 600
net.smb.fs.kern_soft_deadtimer: 30
net.smb.fs.tcpsndbuf: 8388608
net.smb.fs.tcprcvbuf: 8388608
net.smb.fs.maxwrite: 8388608
net.smb.fs.maxread: 8388608
net.smb.fs.maxsegreadsize: 8388608
net.smb.fs.maxsegwritesize: 8388608
debug.kextlog: 4083
debug.lowpri_throttle_max_iosize: 131072
debug.lowpri_throttle_tier1_window_msecs: 25
debug.lowpri_throttle_tier2_window_msecs: 100
debug.lowpri_throttle_tier3_window_msecs: 500
debug.lowpri_throttle_tier1_io_period_msecs: 40
debug.lowpri_throttle_tier2_io_period_msecs: 85
debug.lowpri_throttle_tier3_io_period_msecs: 200
debug.lowpri_throttle_tier1_io_period_ssd_msecs: 5
debug.lowpri_throttle_tier2_io_period_ssd_msecs: 15
debug.lowpri_throttle_tier3_io_period_ssd_msecs: 25
debug.lowpri_throttle_enabled: 1
debug.bpf_bufsize: 4096
debug.bpf_maxbufsize: 524288
debug.bpf_bufsize_cap: 33554432
debug.bpf_maxdevices: 256
debug.bpf_wantpktap: 0
debug.bpf_debug: 0
debug.bpf_trunc_overflow: 0
debug.bpf_hdr_comp_enable: 1
debug.sched: 2
debug.toggle_address_reuse: 0
debug.noidle: 0
debug.swd_sleep_timeout: 0
debug.swd_wake_timeout: 0
debug.swd_timeout: 0
debug.swd_panic: 1
debug.iotrace: 0
debug.iokit: 8388608
debug.didevice_trace: 0
debug.didevice_bounce_count: 0
debug.didevice_no_bounce_count: 0
debug.didevice_cache_fully_satisfied: 34906
debug.didevice_cache_spared_bytes: 330242560
debug.didevice_thread_cache_reads: 0
debug.didevice_thread_mapped_buf_writes: 0
debug.didevice_queue_depth: 0
debug.didevice_cache_size_default: 33554432
debug.didevice_enable_cache: 1
debug.didevice_read_by_kernel_bytes: 0
debug.didevice_write_by_kernel_bytes: 0
debug.iogpu.wired_lwm_mb: 0
debug.iogpu.dynamic_lwm: 1
debug.iogpu.wired_limit: 0
debug.iogpu.rsrc_limit: 0
debug.mcc_debug: 2
debug.mcc_clampwaycount: -1
debug.batman: 3
debug.iosurface.iofence_ddd: 0
debug.iosa.idle_power_off_us: 1000
debug.iosa.power_down_hyst_us: 0
debug.iosa.disable_pg_in_intr_filter: 1
debug.iosa.panic_if_irqsts_zero: 0
debug.iosa.mapper_cache_policy: 1
hw.ncpu: 12
hw.byteorder: 1234
hw.memsize: 68719476736
hw.activecpu: 12
hw.features.allows_security_research: 0
hw.optional.arm.FEAT_FlagM: 1
hw.optional.arm.FEAT_FlagM2: 1
hw.optional.arm.FEAT_FHM: 1
hw.optional.arm.FEAT_DotProd: 1
hw.optional.arm.FEAT_SHA3: 1
hw.optional.arm.FEAT_RDM: 1
hw.optional.arm.FEAT_LSE: 1
hw.optional.arm.FEAT_SHA256: 1
hw.optional.arm.FEAT_SHA512: 1
hw.optional.arm.FEAT_SHA1: 1
hw.optional.arm.FEAT_AES: 1
hw.optional.arm.FEAT_PMULL: 1
hw.optional.arm.FEAT_SPECRES: 0
hw.optional.arm.FEAT_SB: 1
hw.optional.arm.FEAT_FRINTTS: 1
hw.optional.arm.FEAT_LRCPC: 1
hw.optional.arm.FEAT_LRCPC2: 1
hw.optional.arm.FEAT_FCMA: 1
hw.optional.arm.FEAT_JSCVT: 1
hw.optional.arm.FEAT_PAuth: 1
hw.optional.arm.FEAT_PAuth2: 1
hw.optional.arm.FEAT_FPAC: 1
hw.optional.arm.FEAT_DPB: 1
hw.optional.arm.FEAT_DPB2: 1
hw.optional.arm.FEAT_BF16: 1
hw.optional.arm.FEAT_I8MM: 1
hw.optional.arm.FEAT_ECV: 1
hw.optional.arm.FEAT_LSE2: 1
hw.optional.arm.FEAT_CSV2: 1
hw.optional.arm.FEAT_CSV3: 1
hw.optional.arm.FEAT_DIT: 1
hw.optional.arm.FEAT_FP16: 1
hw.optional.arm.FEAT_SSBS: 1
hw.optional.arm.FEAT_BTI: 1
hw.optional.arm.FP_SyncExceptions: 1
hw.optional.floatingpoint: 1
hw.optional.neon: 1
hw.optional.neon_hpfp: 1
hw.optional.neon_fp16: 1
hw.optional.armv8_1_atomics: 1
hw.optional.armv8_2_fhm: 1
hw.optional.armv8_2_sha512: 1
hw.optional.armv8_2_sha3: 1
hw.optional.armv8_3_compnum: 1
hw.optional.watchpoint: 4
hw.optional.breakpoint: 6
hw.optional.armv8_crc32: 1
hw.optional.armv8_gpi: 1
hw.optional.AdvSIMD: 1
hw.optional.AdvSIMD_HPFPCvt: 1
hw.optional.ucnormal_mem: 1
hw.optional.arm64: 1
hw.perflevel1.physicalcpu: 4
hw.perflevel1.physicalcpu_max: 4
hw.perflevel1.logicalcpu: 4
hw.perflevel1.logicalcpu_max: 4
hw.perflevel1.l1icachesize: 131072
hw.perflevel1.l1dcachesize: 65536
hw.perflevel1.l2cachesize: 4194304
hw.perflevel1.cpusperl2: 4
hw.perflevel1.name: Efficiency
hw.perflevel0.physicalcpu: 8
hw.perflevel0.physicalcpu_max: 8
hw.perflevel0.logicalcpu: 8
hw.perflevel0.logicalcpu_max: 8
hw.perflevel0.l1icachesize: 196608
hw.perflevel0.l1dcachesize: 131072
hw.perflevel0.l2cachesize: 16777216
hw.perflevel0.cpusperl2: 4
hw.perflevel0.name: Performance
hw.physicalcpu: 12
hw.physicalcpu_max: 12
hw.logicalcpu: 12
hw.logicalcpu_max: 12
hw.cputype: 16777228
hw.cpusubtype: 2
hw.cpu64bit_capable: 1
hw.cpufamily: -634136515
hw.cpusubfamily: 5
hw.cacheconfig: 12 1 4 0 0 0 0 0 0 0
hw.cachesize: 3491037184 65536 4194304 0 0 0 0 0 0 0
hw.pagesize: 16384
hw.pagesize32: 16384
hw.cachelinesize: 128
hw.l1icachesize: 131072
hw.l1dcachesize: 65536
hw.l2cachesize: 4194304
hw.tbfrequency: 24000000
hw.memsize_usable: 67915546624
hw.packages: 1
hw.osenvironment: 
hw.ephemeral_storage: 0
hw.use_recovery_securityd: 0
hw.use_kernelmanagerd: 1
hw.serialdebugmode: 0
hw.nperflevels: 2
hw.targettype: J475c
machdep.cpu.cores_per_package: 12
machdep.cpu.core_count: 12
machdep.cpu.logical_per_package: 12
machdep.cpu.thread_count: 12
machdep.cpu.brand_string: Apple M2 Max
machdep.wake_abstime: 0
machdep.time_since_reset: 8819815811734
machdep.wake_conttime: 0
machdep.deferred_ipi_timeout: 64000
machdep.virtual_address_size: 47
machdep.report_phy_read_delay: 0
machdep.report_phy_write_delay: 0
machdep.trace_phy_read_delay: 0
machdep.trace_phy_write_delay: 0
machdep.phy_read_delay_panic: 0
machdep.phy_write_delay_panic: 0
machdep.ptrauth_enabled: 1
machdep.user_idle_level: 0
ktrace.state: 0
ktrace.active_mask: 0
ktrace.owning_pid: 0
ktrace.background_pid: 0
ktrace.configured_by: 
kpc.pc_capture_supported: 1
kperf.limits.timer_min_period_ns: 50000
kperf.limits.timer_min_bg_period_ns: 1000000
kperf.limits.timer_min_pet_period_ns: 1000000
kperf.limits.timer_min_bg_pet_period_ns: 1000000
kperf.limits.max_action_count: 32
kperf.debug_level: 0
security.codesigning.monitor: 1
security.codesigning.config: 2080374784
security.mac.platform_exec_logging: 0
security.mac.lockdown_mode_state: 0
security.mac.max_slots: 7
security.mac.labelvnodes: 1
security.mac.vnode_label_count: 18395
security.mac.device_enforce: 1
security.mac.pipe_enforce: 1
security.mac.posixsem_enforce: 1
security.mac.posixshm_enforce: 1
security.mac.proc_enforce: 1
security.mac.socket_enforce: 1
security.mac.system_enforce: 1
security.mac.sysvmsg_enforce: 1
security.mac.sysvsem_enforce: 1
security.mac.sysvshm_enforce: 1
security.mac.vm_enforce: 1
security.mac.vnode_enforce: 1
security.mac.amfi.trust_cache_interface: 3
security.mac.amfi.developer_mode_status: 1
security.mac.amfi.developer_mode_resolved: 1
security.mac.amfi.launch_constraints_enforced: 1
security.mac.amfi.launch_constraints_3rd_party_allowed: 1
security.mac.amfi.launch_constraints_cc_types_enforced: 15
security.mac.amfi.launch_env_logging: 0
security.mac.amfi.force_policy: 0
security.mac.amfi.verbose_logging: 0
security.mac.amfi.hsp_enable: 1
security.mac.amfi.allow_only_platform_code: 0
security.mac.amfi.platform_policy: 1
security.mac.amfi.unsigned_code_policy: 1
security.mac.amfi.forced_cs_kill: 1
security.mac.amfi.recovery_on_as: 0
security.mac.amfi.platform_ident_for_hardened_proc: 15
security.mac.amfi.qa_root_certs_allowed: 0
security.mac.amfi.supplemental_key_reloads: 1
security.mac.endpointsecurity.log_level: 1
security.mac.endpointsecurity.panic_on_soft_fail: 0
security.mac.acm.root_pivot_occurred: 0
security.mac.sandbox.audio_active: 0
security.mac.sandbox.sentinel: .sb-c401d1d3
security.mac.qtn.sandbox_enforce: 1
security.mac.qtn.user_approved_exec: 1
security.mac.asp.active_rule_version: 13880906986333576701
security.mac.asp.bastion_profile_hash: 18058647211089025080
security.mac.asp.logging_mode: 0
security.mac.asp.policy.change_scans: 1
security.mac.asp.policy.gatekeeper_enabled: 1
security.mac.asp.policy.strict_sip: 0
security.mac.asp.stats.cache_entry_count: 7461
security.mac.asp.stats.cache_allocation_count: 10347
security.mac.asp.stats.cache_release_count: 2886
security.mac.asp.stats.exec_hook_work_time: 2370598
security.mac.asp.stats.exec_hook_sleep_time: 70385577
security.mac.asp.stats.exec_hook_count: 193606
security.mac.asp.stats.library_hook_time: 3121853
security.mac.asp.stats.library_sleep_time: 59256857
security.mac.asp.stats.library_hook_count: 3615381
security.mac.asp.stats.sandbox_upcall_time: 123505
security.mac.asp.stats.sandbox_upcall_count: 677
security.mac.asp.stats.pending_evaluation_count: 0
security.mac.asp.stats.bastion_upcall_count: 15
iogpu.wired_lwm_mb: 0
iogpu.dynamic_lwm: 1
iogpu.wired_limit_mb: 0
iogpu.rsrc_limit: 0
=============================================================================================
TESTING: checkCompilerMacros from config.compilerFlags(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilerFlags.py:159)
  Save the list of CPP macros defined by the C and C++ compiler, does not work for all compilers
Executing: gcc -c -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags/conftest.c  -E -dM 
stdout:
#define _LP64 1
#define __AARCH64EL__ 1
#define __AARCH64_CMODEL_SMALL__ 1
#define __AARCH64_SIMD__ 1
#define __APPLE_CC__ 6000
#define __APPLE__ 1
#define __ARM64_ARCH_8__ 1
#define __ARM_64BIT_STATE 1
#define __ARM_ACLE 200
#define __ARM_ALIGN_MAX_STACK_PWR 4
#define __ARM_ARCH 8
#define __ARM_ARCH_8_3__ 1
#define __ARM_ARCH_8_4__ 1
#define __ARM_ARCH_8_5__ 1
#define __ARM_ARCH_ISA_A64 1
#define __ARM_ARCH_PROFILE 'A'
#define __ARM_FEATURE_ATOMICS 1
#define __ARM_FEATURE_CLZ 1
#define __ARM_FEATURE_COMPLEX 1
#define __ARM_FEATURE_CRC32 1
#define __ARM_FEATURE_DIRECTED_ROUNDING 1
#define __ARM_FEATURE_DIV 1
#define __ARM_FEATURE_DOTPROD 1
#define __ARM_FEATURE_FMA 1
#define __ARM_FEATURE_FP16_FML 1
#define __ARM_FEATURE_FP16_SCALAR_ARITHMETIC 1
#define __ARM_FEATURE_FP16_VECTOR_ARITHMETIC 1
#define __ARM_FEATURE_FRINT 1
#define __ARM_FEATURE_IDIV 1
#define __ARM_FEATURE_JCVT 1
#define __ARM_FEATURE_LDREX 0xF
#define __ARM_FEATURE_NUMERIC_MAXMIN 1
#define __ARM_FEATURE_QRDMX 1
#define __ARM_FEATURE_RCPC 1
#define __ARM_FEATURE_SHA2 1
#define __ARM_FEATURE_SHA3 1
#define __ARM_FEATURE_SHA512 1
#define __ARM_FEATURE_UNALIGNED 1
#define __ARM_FP 0xE
#define __ARM_FP16_ARGS 1
#define __ARM_FP16_FORMAT_IEEE 1
#define __ARM_NEON 1
#define __ARM_NEON_FP 0xE
#define __ARM_NEON__ 1
#define __ARM_PCS_AAPCS64 1
#define __ARM_SIZEOF_MINIMAL_ENUM 4
#define __ARM_SIZEOF_WCHAR_T 4
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __ATOMIC_RELAXED 0
#define __ATOMIC_RELEASE 3
#define __ATOMIC_SEQ_CST 5
#define __BIGGEST_ALIGNMENT__ 8
#define __BITINT_MAXWIDTH__ 128
#define __BLOCKS__ 1
#define __BOOL_WIDTH__ 8
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __CHAR16_TYPE__ unsigned short
#define __CHAR32_TYPE__ unsigned int
#define __CHAR_BIT__ 8
#define __CLANG_ATOMIC_BOOL_LOCK_FREE 2
#define __CLANG_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __CLANG_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __CLANG_ATOMIC_CHAR_LOCK_FREE 2
#define __CLANG_ATOMIC_INT_LOCK_FREE 2
#define __CLANG_ATOMIC_LLONG_LOCK_FREE 2
#define __CLANG_ATOMIC_LONG_LOCK_FREE 2
#define __CLANG_ATOMIC_POINTER_LOCK_FREE 2
#define __CLANG_ATOMIC_SHORT_LOCK_FREE 2
#define __CLANG_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __CONSTANT_CFSTRINGS__ 1
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_DENORM_MIN__ 4.9406564584124654e-324
#define __DBL_DIG__ 15
#define __DBL_EPSILON__ 2.2204460492503131e-16
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_MAX_10_EXP__ 308
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX__ 1.7976931348623157e+308
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN__ 2.2250738585072014e-308
#define __DECIMAL_DIG__ __LDBL_DECIMAL_DIG__
#define __DYNAMIC__ 1
#define __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ 140000
#define __ENVIRONMENT_OS_VERSION_MIN_REQUIRED__ 140000
#define __FINITE_MATH_ONLY__ 0
#define __FLT16_DECIMAL_DIG__ 5
#define __FLT16_DENORM_MIN__ 5.9604644775390625e-8F16
#define __FLT16_DIG__ 3
#define __FLT16_EPSILON__ 9.765625e-4F16
#define __FLT16_HAS_DENORM__ 1
#define __FLT16_HAS_INFINITY__ 1
#define __FLT16_HAS_QUIET_NAN__ 1
#define __FLT16_MANT_DIG__ 11
#define __FLT16_MAX_10_EXP__ 4
#define __FLT16_MAX_EXP__ 16
#define __FLT16_MAX__ 6.5504e+4F16
#define __FLT16_MIN_10_EXP__ (-4)
#define __FLT16_MIN_EXP__ (-13)
#define __FLT16_MIN__ 6.103515625e-5F16
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_DENORM_MIN__ 1.40129846e-45F
#define __FLT_DIG__ 6
#define __FLT_EPSILON__ 1.19209290e-7F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __FLT_MANT_DIG__ 24
#define __FLT_MAX_10_EXP__ 38
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX__ 3.40282347e+38F
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN__ 1.17549435e-38F
#define __FLT_RADIX__ 2
#define __FP_FAST_FMA 1
#define __FP_FAST_FMAF 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 1
#define __GNUC_STDC_INLINE__ 1
#define __GNUC__ 4
#define __GXX_ABI_VERSION 1002
#define __INT16_C_SUFFIX__ 
#define __INT16_FMTd__ "hd"
#define __INT16_FMTi__ "hi"
#define __INT16_MAX__ 32767
#define __INT16_TYPE__ short
#define __INT32_C_SUFFIX__ 
#define __INT32_FMTd__ "d"
#define __INT32_FMTi__ "i"
#define __INT32_MAX__ 2147483647
#define __INT32_TYPE__ int
#define __INT64_C_SUFFIX__ LL
#define __INT64_FMTd__ "lld"
#define __INT64_FMTi__ "lli"
#define __INT64_MAX__ 9223372036854775807LL
#define __INT64_TYPE__ long long int
#define __INT8_C_SUFFIX__ 
#define __INT8_FMTd__ "hhd"
#define __INT8_FMTi__ "hhi"
#define __INT8_MAX__ 127
#define __INT8_TYPE__ signed char
#define __INTMAX_C_SUFFIX__ L
#define __INTMAX_FMTd__ "ld"
#define __INTMAX_FMTi__ "li"
#define __INTMAX_MAX__ 9223372036854775807L
#define __INTMAX_TYPE__ long int
#define __INTMAX_WIDTH__ 64
#define __INTPTR_FMTd__ "ld"
#define __INTPTR_FMTi__ "li"
#define __INTPTR_MAX__ 9223372036854775807L
#define __INTPTR_TYPE__ long int
#define __INTPTR_WIDTH__ 64
#define __INT_FAST16_FMTd__ "hd"
#define __INT_FAST16_FMTi__ "hi"
#define __INT_FAST16_MAX__ 32767
#define __INT_FAST16_TYPE__ short
#define __INT_FAST16_WIDTH__ 16
#define __INT_FAST32_FMTd__ "d"
#define __INT_FAST32_FMTi__ "i"
#define __INT_FAST32_MAX__ 2147483647
#define __INT_FAST32_TYPE__ int
#define __INT_FAST32_WIDTH__ 32
#define __INT_FAST64_FMTd__ "lld"
#define __INT_FAST64_FMTi__ "lli"
#define __INT_FAST64_MAX__ 9223372036854775807LL
#define __INT_FAST64_TYPE__ long long int
#define __INT_FAST64_WIDTH__ 64
#define __INT_FAST8_FMTd__ "hhd"
#define __INT_FAST8_FMTi__ "hhi"
#define __INT_FAST8_MAX__ 127
#define __INT_FAST8_TYPE__ signed char
#define __INT_FAST8_WIDTH__ 8
#define __INT_LEAST16_FMTd__ "hd"
#define __INT_LEAST16_FMTi__ "hi"
#define __INT_LEAST16_MAX__ 32767
#define __INT_LEAST16_TYPE__ short
#define __INT_LEAST16_WIDTH__ 16
#define __INT_LEAST32_FMTd__ "d"
#define __INT_LEAST32_FMTi__ "i"
#define __INT_LEAST32_MAX__ 2147483647
#define __INT_LEAST32_TYPE__ int
#define __INT_LEAST32_WIDTH__ 32
#define __INT_LEAST64_FMTd__ "lld"
#define __INT_LEAST64_FMTi__ "lli"
#define __INT_LEAST64_MAX__ 9223372036854775807LL
#define __INT_LEAST64_TYPE__ long long int
#define __INT_LEAST64_WIDTH__ 64
#define __INT_LEAST8_FMTd__ "hhd"
#define __INT_LEAST8_FMTi__ "hhi"
#define __INT_LEAST8_MAX__ 127
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST8_WIDTH__ 8
#define __INT_MAX__ 2147483647
#define __INT_WIDTH__ 32
#define __LDBL_DECIMAL_DIG__ 17
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
#define __LDBL_DIG__ 15
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 53
#define __LDBL_MAX_10_EXP__ 308
#define __LDBL_MAX_EXP__ 1024
#define __LDBL_MAX__ 1.7976931348623157e+308L
#define __LDBL_MIN_10_EXP__ (-307)
#define __LDBL_MIN_EXP__ (-1021)
#define __LDBL_MIN__ 2.2250738585072014e-308L
#define __LITTLE_ENDIAN__ 1
#define __LLONG_WIDTH__ 64
#define __LONG_LONG_MAX__ 9223372036854775807LL
#define __LONG_MAX__ 9223372036854775807L
#define __LONG_WIDTH__ 64
#define __LP64__ 1
#define __MACH__ 1
#define __NO_MATH_ERRNO__ 1
#define __OBJC_BOOL_IS_BOOL 1
#define __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES 3
#define __OPENCL_MEMORY_SCOPE_DEVICE 2
#define __OPENCL_MEMORY_SCOPE_SUB_GROUP 4
#define __OPENCL_MEMORY_SCOPE_WORK_GROUP 1
#define __OPENCL_MEMORY_SCOPE_WORK_ITEM 0
#define __OPTIMIZE__ 1
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_PDP_ENDIAN__ 3412
#define __PIC__ 2
#define __POINTER_WIDTH__ 64
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __PTRDIFF_FMTd__ "ld"
#define __PTRDIFF_FMTi__ "li"
#define __PTRDIFF_MAX__ 9223372036854775807L
#define __PTRDIFF_TYPE__ long int
#define __PTRDIFF_WIDTH__ 64
#define __REGISTER_PREFIX__ 
#define __SCHAR_MAX__ 127
#define __SHRT_MAX__ 32767
#define __SHRT_WIDTH__ 16
#define __SIG_ATOMIC_MAX__ 2147483647
#define __SIG_ATOMIC_WIDTH__ 32
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_INT128__ 16
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG_DOUBLE__ 8
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_LONG__ 8
#define __SIZEOF_POINTER__ 8
#define __SIZEOF_PTRDIFF_T__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_SIZE_T__ 8
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZE_FMTX__ "lX"
#define __SIZE_FMTo__ "lo"
#define __SIZE_FMTu__ "lu"
#define __SIZE_FMTx__ "lx"
#define __SIZE_MAX__ 18446744073709551615UL
#define __SIZE_TYPE__ long unsigned int
#define __SIZE_WIDTH__ 64
#define __SSP__ 1
#define __STDC_HOSTED__ 1
#define __STDC_NO_THREADS__ 1
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_VERSION__ 201710L
#define __STDC__ 1
#define __UINT16_C_SUFFIX__ 
#define __UINT16_FMTX__ "hX"
#define __UINT16_FMTo__ "ho"
#define __UINT16_FMTu__ "hu"
#define __UINT16_FMTx__ "hx"
#define __UINT16_MAX__ 65535
#define __UINT16_TYPE__ unsigned short
#define __UINT32_C_SUFFIX__ U
#define __UINT32_FMTX__ "X"
#define __UINT32_FMTo__ "o"
#define __UINT32_FMTu__ "u"
#define __UINT32_FMTx__ "x"
#define __UINT32_MAX__ 4294967295U
#define __UINT32_TYPE__ unsigned int
#define __UINT64_C_SUFFIX__ ULL
#define __UINT64_FMTX__ "llX"
#define __UINT64_FMTo__ "llo"
#define __UINT64_FMTu__ "llu"
#define __UINT64_FMTx__ "llx"
#define __UINT64_MAX__ 18446744073709551615ULL
#define __UINT64_TYPE__ long long unsigned int
#define __UINT8_C_SUFFIX__ 
#define __UINT8_FMTX__ "hhX"
#define __UINT8_FMTo__ "hho"
#define __UINT8_FMTu__ "hhu"
#define __UINT8_FMTx__ "hhx"
#define __UINT8_MAX__ 255
#define __UINT8_TYPE__ unsigned char
#define __UINTMAX_C_SUFFIX__ UL
#define __UINTMAX_FMTX__ "lX"
#define __UINTMAX_FMTo__ "lo"
#define __UINTMAX_FMTu__ "lu"
#define __UINTMAX_FMTx__ "lx"
#define __UINTMAX_MAX__ 18446744073709551615UL
#define __UINTMAX_TYPE__ long unsigned int
#define __UINTMAX_WIDTH__ 64
#define __UINTPTR_FMTX__ "lX"
#define __UINTPTR_FMTo__ "lo"
#define __UINTPTR_FMTu__ "lu"
#define __UINTPTR_FMTx__ "lx"
#define __UINTPTR_MAX__ 18446744073709551615UL
#define __UINTPTR_TYPE__ long unsigned int
#define __UINTPTR_WIDTH__ 64
#define __UINT_FAST16_FMTX__ "hX"
#define __UINT_FAST16_FMTo__ "ho"
#define __UINT_FAST16_FMTu__ "hu"
#define __UINT_FAST16_FMTx__ "hx"
#define __UINT_FAST16_MAX__ 65535
#define __UINT_FAST16_TYPE__ unsigned short
#define __UINT_FAST32_FMTX__ "X"
#define __UINT_FAST32_FMTo__ "o"
#define __UINT_FAST32_FMTu__ "u"
#define __UINT_FAST32_FMTx__ "x"
#define __UINT_FAST32_MAX__ 4294967295U
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_FMTX__ "llX"
#define __UINT_FAST64_FMTo__ "llo"
#define __UINT_FAST64_FMTu__ "llu"
#define __UINT_FAST64_FMTx__ "llx"
#define __UINT_FAST64_MAX__ 18446744073709551615ULL
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __UINT_FAST8_FMTX__ "hhX"
#define __UINT_FAST8_FMTo__ "hho"
#define __UINT_FAST8_FMTu__ "hhu"
#define __UINT_FAST8_FMTx__ "hhx"
#define __UINT_FAST8_MAX__ 255
#define __UINT_FAST8_TYPE__ unsigned char
#define __UINT_LEAST16_FMTX__ "hX"
#define __UINT_LEAST16_FMTo__ "ho"
#define __UINT_LEAST16_FMTu__ "hu"
#define __UINT_LEAST16_FMTx__ "hx"
#define __UINT_LEAST16_MAX__ 65535
#define __UINT_LEAST16_TYPE__ unsigned short
#define __UINT_LEAST32_FMTX__ "X"
#define __UINT_LEAST32_FMTo__ "o"
#define __UINT_LEAST32_FMTu__ "u"
#define __UINT_LEAST32_FMTx__ "x"
#define __UINT_LEAST32_MAX__ 4294967295U
#define __UINT_LEAST32_TYPE__ unsigned int
#define __UINT_LEAST64_FMTX__ "llX"
#define __UINT_LEAST64_FMTo__ "llo"
#define __UINT_LEAST64_FMTu__ "llu"
#define __UINT_LEAST64_FMTx__ "llx"
#define __UINT_LEAST64_MAX__ 18446744073709551615ULL
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __UINT_LEAST8_FMTX__ "hhX"
#define __UINT_LEAST8_FMTo__ "hho"
#define __UINT_LEAST8_FMTu__ "hhu"
#define __UINT_LEAST8_FMTx__ "hhx"
#define __UINT_LEAST8_MAX__ 255
#define __UINT_LEAST8_TYPE__ unsigned char
#define __USER_LABEL_PREFIX__ _
#define __VERSION__ "Apple LLVM 15.0.0 (clang-1500.3.9.4)"
#define __WCHAR_MAX__ 2147483647
#define __WCHAR_TYPE__ int
#define __WCHAR_WIDTH__ 32
#define __WINT_MAX__ 2147483647
#define __WINT_TYPE__ int
#define __WINT_WIDTH__ 32
#define __aarch64__ 1
#define __apple_build_version__ 15000309
#define __arm64 1
#define __arm64__ 1
#define __block __attribute__((__blocks__(byref)))
#define __clang__ 1
#define __clang_literal_encoding__ "UTF-8"
#define __clang_major__ 15
#define __clang_minor__ 0
#define __clang_patchlevel__ 0
#define __clang_version__ "15.0.0 (clang-1500.3.9.4)"
#define __clang_wide_literal_encoding__ "UTF-32"
#define __llvm__ 1
#define __nonnull _Nonnull
#define __null_unspecified _Null_unspecified
#define __nullable _Nullable
#define __pic__ 2
#define __strong 
#define __unsafe_unretained 
#define __weak __attribute__((objc_gc(weak)))
Executing: g++ -c -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -O3 -march=native -mtune=native  -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags/conftest.cc  -E -dM 
stdout:
#define _LP64 1
#define __AARCH64EL__ 1
#define __AARCH64_CMODEL_SMALL__ 1
#define __AARCH64_SIMD__ 1
#define __APPLE_CC__ 6000
#define __APPLE__ 1
#define __ARM64_ARCH_8__ 1
#define __ARM_64BIT_STATE 1
#define __ARM_ACLE 200
#define __ARM_ALIGN_MAX_STACK_PWR 4
#define __ARM_ARCH 8
#define __ARM_ARCH_8_3__ 1
#define __ARM_ARCH_8_4__ 1
#define __ARM_ARCH_8_5__ 1
#define __ARM_ARCH_ISA_A64 1
#define __ARM_ARCH_PROFILE 'A'
#define __ARM_FEATURE_ATOMICS 1
#define __ARM_FEATURE_CLZ 1
#define __ARM_FEATURE_COMPLEX 1
#define __ARM_FEATURE_CRC32 1
#define __ARM_FEATURE_DIRECTED_ROUNDING 1
#define __ARM_FEATURE_DIV 1
#define __ARM_FEATURE_DOTPROD 1
#define __ARM_FEATURE_FMA 1
#define __ARM_FEATURE_FP16_FML 1
#define __ARM_FEATURE_FP16_SCALAR_ARITHMETIC 1
#define __ARM_FEATURE_FP16_VECTOR_ARITHMETIC 1
#define __ARM_FEATURE_FRINT 1
#define __ARM_FEATURE_IDIV 1
#define __ARM_FEATURE_JCVT 1
#define __ARM_FEATURE_LDREX 0xF
#define __ARM_FEATURE_NUMERIC_MAXMIN 1
#define __ARM_FEATURE_QRDMX 1
#define __ARM_FEATURE_RCPC 1
#define __ARM_FEATURE_SHA2 1
#define __ARM_FEATURE_SHA3 1
#define __ARM_FEATURE_SHA512 1
#define __ARM_FEATURE_UNALIGNED 1
#define __ARM_FP 0xE
#define __ARM_FP16_ARGS 1
#define __ARM_FP16_FORMAT_IEEE 1
#define __ARM_NEON 1
#define __ARM_NEON_FP 0xE
#define __ARM_NEON__ 1
#define __ARM_PCS_AAPCS64 1
#define __ARM_SIZEOF_MINIMAL_ENUM 4
#define __ARM_SIZEOF_WCHAR_T 4
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __ATOMIC_RELAXED 0
#define __ATOMIC_RELEASE 3
#define __ATOMIC_SEQ_CST 5
#define __BIGGEST_ALIGNMENT__ 8
#define __BITINT_MAXWIDTH__ 128
#define __BLOCKS__ 1
#define __BOOL_WIDTH__ 8
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __CHAR16_TYPE__ unsigned short
#define __CHAR32_TYPE__ unsigned int
#define __CHAR_BIT__ 8
#define __CLANG_ATOMIC_BOOL_LOCK_FREE 2
#define __CLANG_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __CLANG_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __CLANG_ATOMIC_CHAR8_T_LOCK_FREE 2
#define __CLANG_ATOMIC_CHAR_LOCK_FREE 2
#define __CLANG_ATOMIC_INT_LOCK_FREE 2
#define __CLANG_ATOMIC_LLONG_LOCK_FREE 2
#define __CLANG_ATOMIC_LONG_LOCK_FREE 2
#define __CLANG_ATOMIC_POINTER_LOCK_FREE 2
#define __CLANG_ATOMIC_SHORT_LOCK_FREE 2
#define __CLANG_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __CONSTANT_CFSTRINGS__ 1
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_DENORM_MIN__ 4.9406564584124654e-324
#define __DBL_DIG__ 15
#define __DBL_EPSILON__ 2.2204460492503131e-16
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_MAX_10_EXP__ 308
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX__ 1.7976931348623157e+308
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN__ 2.2250738585072014e-308
#define __DECIMAL_DIG__ __LDBL_DECIMAL_DIG__
#define __DEPRECATED 1
#define __DYNAMIC__ 1
#define __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ 140000
#define __ENVIRONMENT_OS_VERSION_MIN_REQUIRED__ 140000
#define __EXCEPTIONS 1
#define __FINITE_MATH_ONLY__ 0
#define __FLT16_DECIMAL_DIG__ 5
#define __FLT16_DENORM_MIN__ 5.9604644775390625e-8F16
#define __FLT16_DIG__ 3
#define __FLT16_EPSILON__ 9.765625e-4F16
#define __FLT16_HAS_DENORM__ 1
#define __FLT16_HAS_INFINITY__ 1
#define __FLT16_HAS_QUIET_NAN__ 1
#define __FLT16_MANT_DIG__ 11
#define __FLT16_MAX_10_EXP__ 4
#define __FLT16_MAX_EXP__ 16
#define __FLT16_MAX__ 6.5504e+4F16
#define __FLT16_MIN_10_EXP__ (-4)
#define __FLT16_MIN_EXP__ (-13)
#define __FLT16_MIN__ 6.103515625e-5F16
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_DENORM_MIN__ 1.40129846e-45F
#define __FLT_DIG__ 6
#define __FLT_EPSILON__ 1.19209290e-7F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __FLT_MANT_DIG__ 24
#define __FLT_MAX_10_EXP__ 38
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX__ 3.40282347e+38F
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN__ 1.17549435e-38F
#define __FLT_RADIX__ 2
#define __FP_FAST_FMA 1
#define __FP_FAST_FMAF 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR8_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1
#define __GLIBCXX_BITSIZE_INT_N_0 128
#define __GLIBCXX_TYPE_INT_N_0 __int128
#define __GNUC_GNU_INLINE__ 1
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 1
#define __GNUC__ 4
#define __GNUG__ 4
#define __GXX_ABI_VERSION 1002
#define __GXX_EXPERIMENTAL_CXX0X__ 1
#define __GXX_RTTI 1
#define __GXX_WEAK__ 1
#define __INT16_C_SUFFIX__ 
#define __INT16_FMTd__ "hd"
#define __INT16_FMTi__ "hi"
#define __INT16_MAX__ 32767
#define __INT16_TYPE__ short
#define __INT32_C_SUFFIX__ 
#define __INT32_FMTd__ "d"
#define __INT32_FMTi__ "i"
#define __INT32_MAX__ 2147483647
#define __INT32_TYPE__ int
#define __INT64_C_SUFFIX__ LL
#define __INT64_FMTd__ "lld"
#define __INT64_FMTi__ "lli"
#define __INT64_MAX__ 9223372036854775807LL
#define __INT64_TYPE__ long long int
#define __INT8_C_SUFFIX__ 
#define __INT8_FMTd__ "hhd"
#define __INT8_FMTi__ "hhi"
#define __INT8_MAX__ 127
#define __INT8_TYPE__ signed char
#define __INTMAX_C_SUFFIX__ L
#define __INTMAX_FMTd__ "ld"
#define __INTMAX_FMTi__ "li"
#define __INTMAX_MAX__ 9223372036854775807L
#define __INTMAX_TYPE__ long int
#define __INTMAX_WIDTH__ 64
#define __INTPTR_FMTd__ "ld"
#define __INTPTR_FMTi__ "li"
#define __INTPTR_MAX__ 9223372036854775807L
#define __INTPTR_TYPE__ long int
#define __INTPTR_WIDTH__ 64
#define __INT_FAST16_FMTd__ "hd"
#define __INT_FAST16_FMTi__ "hi"
#define __INT_FAST16_MAX__ 32767
#define __INT_FAST16_TYPE__ short
#define __INT_FAST16_WIDTH__ 16
#define __INT_FAST32_FMTd__ "d"
#define __INT_FAST32_FMTi__ "i"
#define __INT_FAST32_MAX__ 2147483647
#define __INT_FAST32_TYPE__ int
#define __INT_FAST32_WIDTH__ 32
#define __INT_FAST64_FMTd__ "lld"
#define __INT_FAST64_FMTi__ "lli"
#define __INT_FAST64_MAX__ 9223372036854775807LL
#define __INT_FAST64_TYPE__ long long int
#define __INT_FAST64_WIDTH__ 64
#define __INT_FAST8_FMTd__ "hhd"
#define __INT_FAST8_FMTi__ "hhi"
#define __INT_FAST8_MAX__ 127
#define __INT_FAST8_TYPE__ signed char
#define __INT_FAST8_WIDTH__ 8
#define __INT_LEAST16_FMTd__ "hd"
#define __INT_LEAST16_FMTi__ "hi"
#define __INT_LEAST16_MAX__ 32767
#define __INT_LEAST16_TYPE__ short
#define __INT_LEAST16_WIDTH__ 16
#define __INT_LEAST32_FMTd__ "d"
#define __INT_LEAST32_FMTi__ "i"
#define __INT_LEAST32_MAX__ 2147483647
#define __INT_LEAST32_TYPE__ int
#define __INT_LEAST32_WIDTH__ 32
#define __INT_LEAST64_FMTd__ "lld"
#define __INT_LEAST64_FMTi__ "lli"
#define __INT_LEAST64_MAX__ 9223372036854775807LL
#define __INT_LEAST64_TYPE__ long long int
#define __INT_LEAST64_WIDTH__ 64
#define __INT_LEAST8_FMTd__ "hhd"
#define __INT_LEAST8_FMTi__ "hhi"
#define __INT_LEAST8_MAX__ 127
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST8_WIDTH__ 8
#define __INT_MAX__ 2147483647
#define __INT_WIDTH__ 32
#define __LDBL_DECIMAL_DIG__ 17
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
#define __LDBL_DIG__ 15
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 53
#define __LDBL_MAX_10_EXP__ 308
#define __LDBL_MAX_EXP__ 1024
#define __LDBL_MAX__ 1.7976931348623157e+308L
#define __LDBL_MIN_10_EXP__ (-307)
#define __LDBL_MIN_EXP__ (-1021)
#define __LDBL_MIN__ 2.2250738585072014e-308L
#define __LITTLE_ENDIAN__ 1
#define __LLONG_WIDTH__ 64
#define __LONG_LONG_MAX__ 9223372036854775807LL
#define __LONG_MAX__ 9223372036854775807L
#define __LONG_WIDTH__ 64
#define __LP64__ 1
#define __MACH__ 1
#define __NO_MATH_ERRNO__ 1
#define __OBJC_BOOL_IS_BOOL 1
#define __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES 3
#define __OPENCL_MEMORY_SCOPE_DEVICE 2
#define __OPENCL_MEMORY_SCOPE_SUB_GROUP 4
#define __OPENCL_MEMORY_SCOPE_WORK_GROUP 1
#define __OPENCL_MEMORY_SCOPE_WORK_ITEM 0
#define __OPTIMIZE__ 1
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_PDP_ENDIAN__ 3412
#define __PIC__ 2
#define __POINTER_WIDTH__ 64
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __PTRDIFF_FMTd__ "ld"
#define __PTRDIFF_FMTi__ "li"
#define __PTRDIFF_MAX__ 9223372036854775807L
#define __PTRDIFF_TYPE__ long int
#define __PTRDIFF_WIDTH__ 64
#define __REGISTER_PREFIX__ 
#define __SCHAR_MAX__ 127
#define __SHRT_MAX__ 32767
#define __SHRT_WIDTH__ 16
#define __SIG_ATOMIC_MAX__ 2147483647
#define __SIG_ATOMIC_WIDTH__ 32
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_INT128__ 16
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG_DOUBLE__ 8
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_LONG__ 8
#define __SIZEOF_POINTER__ 8
#define __SIZEOF_PTRDIFF_T__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_SIZE_T__ 8
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZE_FMTX__ "lX"
#define __SIZE_FMTo__ "lo"
#define __SIZE_FMTu__ "lu"
#define __SIZE_FMTx__ "lx"
#define __SIZE_MAX__ 18446744073709551615UL
#define __SIZE_TYPE__ long unsigned int
#define __SIZE_WIDTH__ 64
#define __SSP__ 1
#define __STDCPP_DEFAULT_NEW_ALIGNMENT__ 16UL
#define __STDCPP_THREADS__ 1
#define __STDC_HOSTED__ 1
#define __STDC_NO_THREADS__ 1
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC__ 1
#define __UINT16_C_SUFFIX__ 
#define __UINT16_FMTX__ "hX"
#define __UINT16_FMTo__ "ho"
#define __UINT16_FMTu__ "hu"
#define __UINT16_FMTx__ "hx"
#define __UINT16_MAX__ 65535
#define __UINT16_TYPE__ unsigned short
#define __UINT32_C_SUFFIX__ U
#define __UINT32_FMTX__ "X"
#define __UINT32_FMTo__ "o"
#define __UINT32_FMTu__ "u"
#define __UINT32_FMTx__ "x"
#define __UINT32_MAX__ 4294967295U
#define __UINT32_TYPE__ unsigned int
#define __UINT64_C_SUFFIX__ ULL
#define __UINT64_FMTX__ "llX"
#define __UINT64_FMTo__ "llo"
#define __UINT64_FMTu__ "llu"
#define __UINT64_FMTx__ "llx"
#define __UINT64_MAX__ 18446744073709551615ULL
#define __UINT64_TYPE__ long long unsigned int
#define __UINT8_C_SUFFIX__ 
#define __UINT8_FMTX__ "hhX"
#define __UINT8_FMTo__ "hho"
#define __UINT8_FMTu__ "hhu"
#define __UINT8_FMTx__ "hhx"
#define __UINT8_MAX__ 255
#define __UINT8_TYPE__ unsigned char
#define __UINTMAX_C_SUFFIX__ UL
#define __UINTMAX_FMTX__ "lX"
#define __UINTMAX_FMTo__ "lo"
#define __UINTMAX_FMTu__ "lu"
#define __UINTMAX_FMTx__ "lx"
#define __UINTMAX_MAX__ 18446744073709551615UL
#define __UINTMAX_TYPE__ long unsigned int
#define __UINTMAX_WIDTH__ 64
#define __UINTPTR_FMTX__ "lX"
#define __UINTPTR_FMTo__ "lo"
#define __UINTPTR_FMTu__ "lu"
#define __UINTPTR_FMTx__ "lx"
#define __UINTPTR_MAX__ 18446744073709551615UL
#define __UINTPTR_TYPE__ long unsigned int
#define __UINTPTR_WIDTH__ 64
#define __UINT_FAST16_FMTX__ "hX"
#define __UINT_FAST16_FMTo__ "ho"
#define __UINT_FAST16_FMTu__ "hu"
#define __UINT_FAST16_FMTx__ "hx"
#define __UINT_FAST16_MAX__ 65535
#define __UINT_FAST16_TYPE__ unsigned short
#define __UINT_FAST32_FMTX__ "X"
#define __UINT_FAST32_FMTo__ "o"
#define __UINT_FAST32_FMTu__ "u"
#define __UINT_FAST32_FMTx__ "x"
#define __UINT_FAST32_MAX__ 4294967295U
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_FMTX__ "llX"
#define __UINT_FAST64_FMTo__ "llo"
#define __UINT_FAST64_FMTu__ "llu"
#define __UINT_FAST64_FMTx__ "llx"
#define __UINT_FAST64_MAX__ 18446744073709551615ULL
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __UINT_FAST8_FMTX__ "hhX"
#define __UINT_FAST8_FMTo__ "hho"
#define __UINT_FAST8_FMTu__ "hhu"
#define __UINT_FAST8_FMTx__ "hhx"
#define __UINT_FAST8_MAX__ 255
#define __UINT_FAST8_TYPE__ unsigned char
#define __UINT_LEAST16_FMTX__ "hX"
#define __UINT_LEAST16_FMTo__ "ho"
#define __UINT_LEAST16_FMTu__ "hu"
#define __UINT_LEAST16_FMTx__ "hx"
#define __UINT_LEAST16_MAX__ 65535
#define __UINT_LEAST16_TYPE__ unsigned short
#define __UINT_LEAST32_FMTX__ "X"
#define __UINT_LEAST32_FMTo__ "o"
#define __UINT_LEAST32_FMTu__ "u"
#define __UINT_LEAST32_FMTx__ "x"
#define __UINT_LEAST32_MAX__ 4294967295U
#define __UINT_LEAST32_TYPE__ unsigned int
#define __UINT_LEAST64_FMTX__ "llX"
#define __UINT_LEAST64_FMTo__ "llo"
#define __UINT_LEAST64_FMTu__ "llu"
#define __UINT_LEAST64_FMTx__ "llx"
#define __UINT_LEAST64_MAX__ 18446744073709551615ULL
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __UINT_LEAST8_FMTX__ "hhX"
#define __UINT_LEAST8_FMTo__ "hho"
#define __UINT_LEAST8_FMTu__ "hhu"
#define __UINT_LEAST8_FMTx__ "hhx"
#define __UINT_LEAST8_MAX__ 255
#define __UINT_LEAST8_TYPE__ unsigned char
#define __USER_LABEL_PREFIX__ _
#define __VERSION__ "Apple LLVM 15.0.0 (clang-1500.3.9.4)"
#define __WCHAR_MAX__ 2147483647
#define __WCHAR_TYPE__ int
#define __WCHAR_WIDTH__ 32
#define __WINT_MAX__ 2147483647
#define __WINT_TYPE__ int
#define __WINT_WIDTH__ 32
#define __aarch64__ 1
#define __apple_build_version__ 15000309
#define __arm64 1
#define __arm64__ 1
#define __block __attribute__((__blocks__(byref)))
#define __clang__ 1
#define __clang_literal_encoding__ "UTF-8"
#define __clang_major__ 15
#define __clang_minor__ 0
#define __clang_patchlevel__ 0
#define __clang_version__ "15.0.0 (clang-1500.3.9.4)"
#define __clang_wide_literal_encoding__ "UTF-32"
#define __cplusplus 202002L
#define __cpp_aggregate_bases 201603L
#define __cpp_aggregate_nsdmi 201304L
#define __cpp_alias_templates 200704L
#define __cpp_aligned_new 201606L
#define __cpp_attributes 200809L
#define __cpp_binary_literals 201304L
#define __cpp_capture_star_this 201603L
#define __cpp_char8_t 201811L
#define __cpp_concepts 201907L
#define __cpp_conditional_explicit 201806L
#define __cpp_constexpr 201907L
#define __cpp_constexpr_dynamic_alloc 201907L
#define __cpp_constexpr_in_decltype 201711L
#define __cpp_constinit 201907L
#define __cpp_coroutines 201703L
#define __cpp_decltype 200707L
#define __cpp_decltype_auto 201304L
#define __cpp_deduction_guides 201703L
#define __cpp_delegating_constructors 200604L
#define __cpp_designated_initializers 201707L
#define __cpp_digit_separators 201309L
#define __cpp_enumerator_attributes 201411L
#define __cpp_exceptions 199711L
#define __cpp_fold_expressions 201603L
#define __cpp_generic_lambdas 201707L
#define __cpp_guaranteed_copy_elision 201606L
#define __cpp_hex_float 201603L
#define __cpp_if_constexpr 201606L
#define __cpp_impl_coroutine 201902L
#define __cpp_impl_destroying_delete 201806L
#define __cpp_impl_three_way_comparison 201907L
#define __cpp_inheriting_constructors 201511L
#define __cpp_init_captures 201803L
#define __cpp_initializer_lists 200806L
#define __cpp_inline_variables 201606L
#define __cpp_lambdas 200907L
#define __cpp_named_character_escapes 202207L
#define __cpp_namespace_attributes 201411L
#define __cpp_nested_namespace_definitions 201411L
#define __cpp_noexcept_function_type 201510L
#define __cpp_nontype_template_args 201411L
#define __cpp_nontype_template_parameter_auto 201606L
#define __cpp_nsdmi 200809L
#define __cpp_range_based_for 201603L
#define __cpp_raw_strings 200710L
#define __cpp_ref_qualifiers 200710L
#define __cpp_return_type_deduction 201304L
#define __cpp_rtti 199711L
#define __cpp_rvalue_references 200610L
#define __cpp_static_assert 201411L
#define __cpp_static_call_operator 202207L
#define __cpp_structured_bindings 201606L
#define __cpp_template_auto 201606L
#define __cpp_threadsafe_static_init 200806L
#define __cpp_unicode_characters 200704L
#define __cpp_unicode_literals 200710L
#define __cpp_user_defined_literals 200809L
#define __cpp_using_enum 201907L
#define __cpp_variable_templates 201304L
#define __cpp_variadic_templates 200704L
#define __cpp_variadic_using 201611L
#define __llvm__ 1
#define __nonnull _Nonnull
#define __null_unspecified _Null_unspecified
#define __nullable _Nullable
#define __pic__ 2
#define __private_extern__ extern
#define __strong 
#define __unsafe_unretained 
#define __weak __attribute__((objc_gc(weak)))
    child config.compilerFlags took 2.464723 seconds
Executing: gcc --help | head -n 20 
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
stdout: error: write on a pipe with no reader
Executing: gcc --help
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
  -cl-ext=<value>         OpenCL only. Enable or disable OpenCL extensions/optional features. The argument is a comma-separated sequence of one or more extension names, each prefixed by '+' or '-'.
  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.
  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.
  -cl-fp32-correctly-rounded-divide-sqrt
                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.
  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.
  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.
  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.
  -cl-no-stdinc           OpenCL only. Disables all standard includes containing non-native compiler types and functions.
  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.
  -cl-single-precision-constant
                          OpenCL only. Treat double precision floating-point constant as single precision constant.
  -cl-std=<value>         OpenCL language standard to compile for.
  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.
  -cl-uniform-work-group-size
                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel
  -cl-unsafe-math-optimizations
                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.
  --config=<file>         Specify configuration file
  --cuda-compile-host-device
                          Compile CUDA code for both host and device (default). Has no effect on non-CUDA compilations.
  --cuda-device-only      Compile CUDA code for device only
  --cuda-feature=<value>  Manually specify the CUDA feature to use
  --cuda-host-only        Compile CUDA code for host only. Has no effect on non-CUDA compilations.
  --cuda-include-ptx=<value>
                          Include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --cuda-noopt-device-debug
                          Enable device-side debug info generation. Disables ptxas optimizations.
  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation
  --cuda-path=<value>     CUDA installation path
  -cuid=<value>           An ID for compilation unit, which should be the same for the same compilation unit but different for different compilation units. It is used to externalize device-side static variables for single source offloading languages CUDA and HIP so that they can be accessed by the host code of the same compilation unit.
  -cxx-isystem <directory>
                          Add directory to the C++ SYSTEM include search path
  -C                      Include comments in preprocessed output
  -c                      Only run preprocess, compile, and assemble steps
  -darwin-target-variant-triple <value>
                          Specify the darwin target variant triple
  -darwin-target-variant <value>
                          Generate code for an additional runtime variant of the deployment target
  -dD                     Print macro definitions in -E mode in addition to normal output
  -dependency-dot <value> Filename to write DOT-formatted header dependencies to
  -dependency-file <value>
                          Filename (or -) to write dependency output to
  -dI                     Print include directives in -E mode in addition to normal output
  -dM                     Print macro definitions in -E mode instead of normal output
  -dsym-dir <dir>         Directory to output dSYM's (if any) to
  -dump-depscan-tree=<value>
                          emit the CAS identifier for the tree instead of the full -cc1
  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)
  -emit-ast               Emit Clang AST files for source inputs
  -emit-interface-stubs   Generate Interface Stub Files.
  -emit-llvm              Use the LLVM representation for assembler and object files
  -emit-merged-ifs        Generate Interface Stub Files, emit merged text not binary.
  --emit-static-lib       Enable linker job to emit a static library.
  --end-no-unused-arguments
                          Start emitting warnings for unused driver arguments
  --extract-api-ignores=<value>
                          Comma separated list of files containing a new line separated list of API symbols to ignore when extracting API information.
  -extract-api            Extract API information
  -E                      Only run the preprocessor
  -faapcs-bitfield-load   Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).
  -faapcs-bitfield-width  Follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -faddrsig               Emit an address-significance table
  -falign-loops=<N>       N must be a power of two. Align loops to the boundary
  -faligned-allocation    Enable C++17 aligned allocation functions
  -fallow-editor-placeholders
                          Treat editor placeholders as valid source code
  -faltivec-src-compat=<value>
                          Source-level compatibility for Altivec vectors (for PowerPC targets). This includes results of vector comparison (scalar for 'xl', vector for 'gcc') as well as behavior when initializing with a scalar (splatting for 'xl', element zero only for 'gcc'). For 'mixed', the compatibility is as 'gcc' for 'vector bool/vector pixel' and as 'xl' for other types. Current default is 'mixed'.
  -fansi-escape-codes     Use ANSI escape codes for diagnostics
  -fapinotes-cache-path=<directory>
                          Does nothing; API notes are no longer cached separately from modules
  -fapinotes-modules      Enable module-based external API notes support
  -fapinotes-swift-version=<version>
                          Specify the Swift version to use when filtering API notes
  -fapinotes              Enable external API notes support
  -fapple-kext            Use Apple's kernel extensions ABI
  -fapple-link-rtlib      Force linking the clang builtins runtime library
  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling
  -fapplication-extension Restrict code to those available for App Extensions
  -fapprox-func           Allow certain math function calls to be replaced with an approximately equivalent calculation
  -fasync-exceptions      Enable EH Asynchronous exceptions
  -fbasic-block-sections=<value>
                          Place each function's basic blocks in unique sections (ELF Only)
  -fbinutils-version=<major.minor>
                          Produced object files can use all ELF features supported by this binutils version and newer. If -fno-integrated-as is specified, the generated assembly will consider GNU as support. 'none' means that all ELF features can be used, regardless of binutils support. Defaults to 2.26.
  -fblocks                Enable the 'blocks' language feature
  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler
  -fbranch-target-identification
                          Emit branch target identification instructions for indirect branch destinations
  -fbuild-session-file=<file>
                          Use the last modification time of <file> as the build session timestamp
  -fbuild-session-timestamp=<time since Epoch in seconds>
                          Time when the current build session started
  -fbuiltin-module-map    Load the clang builtins module map file.
  -fc++-abi=<value>       C++ ABI to use. This will override the target C++ ABI.
  -fcall-saved-x10        Make the x10 register call-saved (AArch64 only)
  -fcall-saved-x11        Make the x11 register call-saved (AArch64 only)
  -fcall-saved-x12        Make the x12 register call-saved (AArch64 only)
  -fcall-saved-x13        Make the x13 register call-saved (AArch64 only)
  -fcall-saved-x14        Make the x14 register call-saved (AArch64 only)
  -fcall-saved-x15        Make the x15 register call-saved (AArch64 only)
  -fcall-saved-x18        Make the x18 register call-saved (AArch64 only)
  -fcall-saved-x8         Make the x8 register call-saved (AArch64 only)
  -fcall-saved-x9         Make the x9 register call-saved (AArch64 only)
  -fcf-protection=<value> Instrument control-flow architecture protection
  -fcf-protection         Enable cf-protection in 'full' mode
  -fchar8_t               Enable C++ builtin type char8_t
  -fclang-abi-compat=<version>
                          Attempt to match the ABI of Clang <version>
  -fcolor-diagnostics     Enable colors in diagnostics
  -fcomment-block-commands=<arg>
                          Treat each comma separated argument in <arg> as a documentation comment block command
  -fcommon                Place uninitialized global variables in a common block
  -fcomplete-member-pointers
                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fconvergent-functions  Assume functions may be convergent
  -fcoro-aligned-allocation
                          Prefer aligned allocation for C++ Coroutines
  -fcoroutines-ts         Enable support for the C++ Coroutines TS
  -fcoverage-compilation-dir=<value>
                          The compilation directory to embed in the coverage mapping.
  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis
  -fcoverage-prefix-map=<value>
                          remap file source paths in coverage mapping
  -fcrash-diagnostics-dir=<dir>
                          Put crash-report files in <dir>
  -fcrash-diagnostics=<value>
                          Set level of crash diagnostic reporting, (option: off, compiler, all)
  -fcrash-diagnostics     Enable crash diagnostic reporting (default)
  -fcs-profile-generate=<directory>
                          Generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcs-profile-generate   Generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcuda-approx-transcendentals
                          Use approximate transcendental functions
  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces
  -fcxx-exceptions        Enable C++ exceptions
  -fcxx-modules           Enable modules for C++
  -fdata-sections         Place each data in its own section
  -fdebug-compilation-dir=<value>
                          The compilation directory to embed in the debug info
  -fdebug-default-version=<value>
                          Default DWARF version to use, if a -g option caused DWARF debug info to be produced
  -fdebug-info-for-profiling
                          Emit extra debug info to make sample profile more accurate
  -fdebug-macro           Emit macro debug information
  -fdebug-prefix-map=<value>
                          remap file source paths in debug info
  -fdebug-ranges-base-address
                          Use DWARF base address selection entries in .debug_ranges
  -fdebug-types-section   Place debug types in their own section (ELF Only)
  -fdeclspec              Allow __declspec as a keyword
  -fdelayed-template-parsing
                          Parse templated function definitions at the end of the translation unit
  -fdelete-null-pointer-checks
                          Treat usage of null pointers as undefined behavior (default)
  -fdepscan-daemon=<value>
                          Specify the path to the daemon to be used. Clang will use the daemon specified, rather than try to spawn its own based on parent processes.
  -fdepscan-include-tree  Set dep-scanner to produce the include tree
  -fdepscan-prefix-map-sdk=<new>
                          With -fdepscan, auto-detect the SDK path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map-toolchain=<new>
                          With -fdepscan, auto-detect the toolchain path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map=<old>=<new>
                          With -fdepscan, seamlessly filter the CAS filesystem to apply the given prefix, updating the command-line to match.
  -fdepscan-share-identifier <value>
                          Share depscan daemon for Clang invocations using the same string identifier.
  -fdepscan-share-parent=<value>
                          Share state based on the PID of the parent command if the name matches. See also -fdepscan-share-stop.
  -fdepscan-share-parent  Share state based on the PID of the parent command. See also -fdepscan-share-stop.
  -fdepscan-share-stop=<value>
                          Stop looking for the command named by -fdepscan-share if a process with the name of the provided argument is found first. Also blocks -fdepscan-share=parent if the parent has this name. E.g., -fdepscan -fdepscan-share=ninja -fdepscan-share-stop=cmake looks for 'ninja' and 'cmake' in the process tree; if 'ninja' is found first, state is shared based on ninja's PID; if 'cmake' is found first, state is not shared.
  -fdepscan-share=<value> If the argument is the name of a command in the process tree, share state based on its PID. E.g., -fdepscan -fdepscan-share=ninja will search for 'ninja' in the process tree and share state based on its PID if found. See also -fdepscan-share-stop.
  -fdepscan=<value>       Scan for dependencies ahead of compiling, generating a pruned CAS tree to send to -fcas-fs. Values are 'auto', 'daemon' (see -fdepscan-share and -fdepscan-share-parent), 'inline', or 'off' (default).
  -fdepscan               Turn on -fdepscan=auto.
  -fdiagnostics-absolute-paths
                          Print absolute paths in diagnostics
  -fdiagnostics-hotness-threshold=<value>
                          Prevent optimization remarks from being output if they do not have at least this profile count. Use 'auto' to apply the threshold from profile summary
  -fdiagnostics-misexpect-tolerance=<value>
                          Prevent misexpect diagnostics from being output if the profile counts are within N% of the expected. 
  -fdiagnostics-parseable-fixits
                          Print fix-its in machine parseable form
  -fdiagnostics-print-source-range-info
                          Print source range spans in numeric form
  -fdiagnostics-show-hotness
                          Enable profile hotness information in diagnostic line
  -fdiagnostics-show-note-include-stack
                          Display include stacks for diagnostic notes
  -fdiagnostics-show-option
                          Print option name with mappable diagnostics
  -fdiagnostics-show-template-tree
                          Print a template comparison tree for differing templates
  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)
  -fdirect-access-external-data
                          Don't use GOT indirection to reference external data symbols
  -fdiscard-value-names   Discard value names in LLVM IR
  -fdollars-in-identifiers
                          Allow '$' in identifiers
  -fdouble-square-bracket-attributes
                          Enable '[[]]' attributes in all C and C++ language modes
  -fdriver-only           Only run the driver.
  -fdwarf-exceptions      Use DWARF style exceptions
  -feliminate-unused-debug-types
                          Do not emit  debug info for defined but unused types
  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker
  -fembed-bitcode=<option>
                          Embed LLVM bitcode
  -fembed-bitcode         Embed LLVM IR bitcode as data
  -fembed-offload-object=<value>
                          Embed Offloading device-side binary into host object file as a section.
  -femit-all-decls        Emit all declarations, even if unused
  -femit-dwarf-unwind=<value>
                          When to emit DWARF unwind (EH frame) info
  -femulated-tls          Use emutls functions to access thread_local variables
  -fenable-matrix         Enable matrix data type and related builtin functions
  -fexceptions            Enable support for exception handling
  -fexperimental-library  Control whether unstable and experimental library features are enabled. This option enables various library features that are either experimental (also known as TSes), or have been but are not stable yet in the selected Standard Library implementation. It is not recommended to use this option in production code, since neither ABI nor API stability are guaranteed. This is intended to provide a preview of features that will ship in the future for experimentation purposes
  -fexperimental-new-constant-interpreter
                          Enable the experimental new constant interpreter
  -fexperimental-relative-c++-abi-vtables
                          Use the experimental C++ class ABI for classes with virtual tables
  -fexperimental-sanitize-metadata=<value>
                          Specify the type of metadata to emit for binary analysis sanitizers
  -fexperimental-strict-floating-point
                          Enables experimental strict floating point in LLVM.
  -fextend-arguments=<value>
                          Controls how scalar integer arguments are extended in calls to unprototyped and varargs functions
  -ffast-math             Allow aggressive, lossy floating-point optimizations
  -ffile-compilation-dir=<value>
                          The compilation directory to embed in the debug info and coverage mapping.
  -ffile-prefix-map=<value>
                          remap file source paths in debug info, predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -ffile-reproducible     Use the target's platform-specific path separator character when expanding the __FILE__ macro
  -ffine-grained-bitfield-accesses
                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.
  -ffinite-loops          Assume all loops are finite.
  -ffixed-a0              Reserve the a0 register (M68k only)
  -ffixed-a1              Reserve the a1 register (M68k only)
  -ffixed-a2              Reserve the a2 register (M68k only)
  -ffixed-a3              Reserve the a3 register (M68k only)
  -ffixed-a4              Reserve the a4 register (M68k only)
  -ffixed-a5              Reserve the a5 register (M68k only)
  -ffixed-a6              Reserve the a6 register (M68k only)
  -ffixed-d0              Reserve the d0 register (M68k only)
  -ffixed-d1              Reserve the d1 register (M68k only)
  -ffixed-d2              Reserve the d2 register (M68k only)
  -ffixed-d3              Reserve the d3 register (M68k only)
  -ffixed-d4              Reserve the d4 register (M68k only)
  -ffixed-d5              Reserve the d5 register (M68k only)
  -ffixed-d6              Reserve the d6 register (M68k only)
  -ffixed-d7              Reserve the d7 register (M68k only)
  -ffixed-point           Enable fixed point types
  -ffixed-r19             Reserve register r19 (Hexagon only)
  -ffixed-r9              Reserve the r9 register (ARM only)
  -ffixed-x10             Reserve the x10 register (AArch64/RISC-V only)
  -ffixed-x11             Reserve the x11 register (AArch64/RISC-V only)
  -ffixed-x12             Reserve the x12 register (AArch64/RISC-V only)
  -ffixed-x13             Reserve the x13 register (AArch64/RISC-V only)
  -ffixed-x14             Reserve the x14 register (AArch64/RISC-V only)
  -ffixed-x15             Reserve the x15 register (AArch64/RISC-V only)
  -ffixed-x16             Reserve the x16 register (AArch64/RISC-V only)
  -ffixed-x17             Reserve the x17 register (AArch64/RISC-V only)
  -ffixed-x18             Reserve the x18 register (AArch64/RISC-V only)
  -ffixed-x19             Reserve the x19 register (AArch64/RISC-V only)
  -ffixed-x1              Reserve the x1 register (AArch64/RISC-V only)
  -ffixed-x20             Reserve the x20 register (AArch64/RISC-V only)
  -ffixed-x21             Reserve the x21 register (AArch64/RISC-V only)
  -ffixed-x22             Reserve the x22 register (AArch64/RISC-V only)
  -ffixed-x23             Reserve the x23 register (AArch64/RISC-V only)
  -ffixed-x24             Reserve the x24 register (AArch64/RISC-V only)
  -ffixed-x25             Reserve the x25 register (AArch64/RISC-V only)
  -ffixed-x26             Reserve the x26 register (AArch64/RISC-V only)
  -ffixed-x27             Reserve the x27 register (AArch64/RISC-V only)
  -ffixed-x28             Reserve the x28 register (AArch64/RISC-V only)
  -ffixed-x29             Reserve the x29 register (AArch64/RISC-V only)
  -ffixed-x2              Reserve the x2 register (AArch64/RISC-V only)
  -ffixed-x30             Reserve the x30 register (AArch64/RISC-V only)
  -ffixed-x31             Reserve the x31 register (AArch64/RISC-V only)
  -ffixed-x3              Reserve the x3 register (AArch64/RISC-V only)
  -ffixed-x4              Reserve the x4 register (AArch64/RISC-V only)
  -ffixed-x5              Reserve the x5 register (AArch64/RISC-V only)
  -ffixed-x6              Reserve the x6 register (AArch64/RISC-V only)
  -ffixed-x7              Reserve the x7 register (AArch64/RISC-V only)
  -ffixed-x8              Reserve the x8 register (AArch64/RISC-V only)
  -ffixed-x9              Reserve the x9 register (AArch64/RISC-V only)
  -fforce-dwarf-frame     Always emit a debug frame section
  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization
  -fforce-enable-int128   Enable support for int128_t type
  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (fuses across statements disregarding pragmas) | on (only fuses in the same statement unless dictated by pragmas) | off (never fuses) | fast-honor-pragmas (fuses across statements unless diectated by pragmas). Default is 'fast' for CUDA, 'fast-honor-pragmas' for HIP, and 'on' otherwise.
  -ffp-eval-method=<value>
                          Specifies the evaluation method to use for floating-point arithmetic.
  -ffp-exception-behavior=<value>
                          Specifies the exception behavior of floating-point operations.
  -ffp-model=<value>      Controls the semantics of floating-point calculations.
  -ffreestanding          Assert that the compilation takes place in a freestanding environment
  -ffuchsia-api-level=<value>
                          Set Fuchsia API level
  -ffunction-sections     Place each function in its own section
  -fgeneric-block-helpers Use generic block helpers for copying/destroying blocks
  -fglobal-isel           Enables the global instruction selector
  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard
  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime
  -fgnu89-inline          Use the gnu89 inline semantics
  -fgnuc-version=<value>  Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)
  -fgpu-allow-device-init Allow device side init function in HIP (experimental)
  -fgpu-default-stream=<value>
                          Specify default stream. The default value is 'legacy'. (HIP only)
  -fgpu-defer-diag        Defer host/device related diagnostic messages for CUDA/HIP
  -fgpu-flush-denormals-to-zero
                          Flush denormal floating point values to zero in CUDA/HIP device mode.
  -fgpu-rdc               Generate relocatable device code, also known as separate compilation mode
  -fgpu-sanitize          Enable sanitizer for AMDGPU target
  -fhip-fp32-correctly-rounded-divide-sqrt
                          Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fhip-kernel-arg-name   Specify that kernel argument names are preserved (HIP only)
  -fhip-new-launch-api    Use new kernel launching API for HIP
  -fignore-exceptions     Enable support for ignoring exception handling constructs
  -fimplicit-module-maps  Implicitly search the file system for module map files.
  -fin-descriptor-block-flags
                          Emit in-descriptor block flags
  -finline-functions      Inline suitable functions
  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline
  -finline-max-stacksize=<value>
                          Suppress inlining of functions whose stack size exceeds the given value
  -finput-charset=<value> Specify the default character set for source files
  -finstrument-function-entry-bare
                          Instrument function entry only, after inlining, without arguments to the instrumentation call
  -finstrument-functions-after-inlining
                          Like -finstrument-functions, but insert the calls after inlining
  -finstrument-functions  Generate calls to instrument function entry and exit
  -fintegrated-as         Enable the integrated assembler
  -fintegrated-cc1        Run cc1 in-process
  -fintegrated-objemitter Use internal machine object code emitter.
  -fjmc                   Enable just-my-code debugging
  -fjump-tables           Use jump tables for lowering switches
  -fkeep-static-consts    Keep static const variables if unused
  -flax-vector-conversions=<value>
                          Enable implicit vector bit-casts
  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)
  -flto=auto              Enable LTO in 'full' mode
  -flto=jobserver         Enable LTO in 'full' mode
  -flto=<value>           Set LTO mode
  -flto                   Enable LTO in 'full' mode
  -fmacro-prefix-map=<value>
                          remap file source paths in predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -fmath-errno            Require math functions to indicate errors by setting errno
  -fmax-tokens=<value>    Max total number of preprocessed tokens for -Wmax-tokens.
  -fmax-type-align=<value>
                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment
  -fmemory-profile=<directory>
                          Enable heap memory profiling and dump results into <directory>
  -fmemory-profile        Enable heap memory profiling
  -fmerge-all-constants   Allow merging of constants
  -fmessage-length=<value>
                          Format message diagnostics so that they fit within N columns
  -fminimize-whitespace   Minimize whitespace when emitting preprocessor output
  -fmodule-file=[<name>=]<file>
                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.
  -fmodule-header=<kind>  Build a C++20 Header Unit from a header that should be found in the user (fmodule-header=user) or system (fmodule-header=system) search path.
  -fmodule-header         Build a C++20 Header Unit from a header.
  -fmodule-map-file=<file>
                          Load this module map file
  -fmodule-name=<name>    Specify the name of the module to build
  -fmodule-related-to-pch Mark module as related to a PCH
  -fmodules-cache-path=<directory>
                          Specify the module cache path
  -fmodules-decluse       Require declaration of modules used within a module
  -fmodules-disable-diagnostic-validation
                          Disable validation of the diagnostic options when loading the module
  -fmodules-ignore-macro=<value>
                          Ignore the definition of the given macro when building and loading modules
  -fmodules-prune-after=<seconds>
                          Specify the interval (in seconds) after which a module file will be considered unused
  -fmodules-prune-interval=<seconds>
                          Specify the interval (in seconds) between attempts to prune the module cache
  -fmodules-search-all    Search even non-imported modules to resolve references
  -fmodules-strict-decluse
                          Like -fmodules-decluse but requires all headers to be in modules
  -fmodules-ts            Enable support for the C++ Modules TS
  -fmodules-user-build-path <directory>
                          Specify the module user build path
  -fmodules-validate-input-files-content
                          Validate PCM input files based on content if mtime differs
  -fmodules-validate-once-per-build-session
                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session
  -fmodules-validate-system-headers
                          Validate the system headers that a module depends on when loading the module
  -fmodules               Enable the 'modules' language feature
  -fms-compatibility-version=<value>
                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fms-compatibility      Enable full Microsoft Visual C++ compatibility
  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler
  -fms-hotpatch           Ensure that all functions can be hotpatched at runtime
  -fms-runtime-lib=<value>
                          Select Windows run-time library
  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'
  -fnew-infallible        Enable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-aapcs-bitfield-width
                          Do not follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -fno-access-control     Disable C++ access control
  -fno-addrsig            Don't emit an address-significance table
  -fno-apinotes-modules   Disable module-based external API notes support
  -fno-apinotes           Disable external API notes support
  -fno-assume-sane-operator-new
                          Don't assume that C++'s global operator new can't alias any pointer
  -fno-autolink           Disable generation of linker directives for automatic library linking
  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function
  -fno-builtin            Disable implicit builtin knowledge of functions
  -fno-c++-static-destructors
                          Disable C++ static destructor registration
  -fno-char8_t            Disable C++ builtin type char8_t
  -fno-color-diagnostics  Disable colors in diagnostics
  -fno-common             Compile common globals like normal definitions
  -fno-complete-member-pointers
                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings
  -fno-constant-nsarray-literals
                          Disable creation of CodeFoundation-type constant initializer `NSArray`s from array literals
  -fno-constant-nsdictionary-literals
                          Disable creation of CodeFoundation-type constant initializer `NSDictionary`s from dictionary literals
  -fno-constant-nsnumber-literals
                          Disable creation of CodeFoundation-type constant initializer `NSNumber`s from number literals
  -fno-coverage-mapping   Disable code coverage analysis
  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash
  -fno-cuda-approx-transcendentals
                          Don't use approximate transcendental functions
  -fno-cxx-modules        Disable modules for C++
  -fno-debug-macro        Do not emit macro debug information
  -fno-declspec           Disallow __declspec as a keyword
  -fno-delayed-template-parsing
                          Disable delayed template parsing
  -fno-delete-null-pointer-checks
                          Do not treat usage of null pointers as undefined behavior
  -fno-depscan-share      Turn off -fdepscan-share and -fdepscan-share-parent.
  -fno-diagnostics-fixit-info
                          Do not include fixit information in diagnostics
  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'
  -fno-direct-access-external-data
                          Use GOT indirection to reference external data symbols
  -fno-discard-value-names
                          Do not discard value names in LLVM IR
  -fno-dollars-in-identifiers
                          Disallow '$' in identifiers
  -fno-double-square-bracket-attributes
                          Disable '[[]]' attributes in all C and C++ language modes
  -fno-elide-constructors Disable C++ copy constructor elision
  -fno-elide-type         Do not elide types when printing diagnostics
  -fno-eliminate-unused-debug-types
                          Emit  debug info for defined but unused types
  -fno-exceptions         Disable support for exception handling
  -fno-experimental-relative-c++-abi-vtables
                          Do not use the experimental C++ class ABI for classes with virtual tables
  -fno-experimental-sanitize-metadata=<value>
                          Disable emitting metadata for binary analysis sanitizers
  -fno-file-reproducible  Use the host's platform-specific path separator character when expanding the __FILE__ macro
  -fno-fine-grained-bitfield-accesses
                          Use large-integer access for consecutive bitfield runs.
  -fno-finite-loops       Do not assume that any loop is finite.
  -fno-fixed-point        Disable fixed point types
  -fno-force-enable-int128
                          Disable support for int128_t type
  -fno-generic-block-helpers
                          Don't use generic block helpers for copying/destroying blocks
  -fno-global-isel        Disables the global instruction selector
  -fno-gnu-inline-asm     Disable GNU style inline asm
  -fno-gpu-allow-device-init
                          Don't allow device side init function in HIP (experimental)
  -fno-gpu-defer-diag     Don't defer host/device related diagnostic messages for CUDA/HIP
  -fno-hip-fp32-correctly-rounded-divide-sqrt
                          Don't specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fno-hip-kernel-arg-name
                          Don't specify that kernel argument names are preserved (HIP only)
  -fno-hip-new-launch-api Don't use new kernel launching API for HIP
  -fno-in-descriptor-block-flags
                          Don't emit in-descriptor block flags
  -fno-integrated-as      Disable the integrated assembler
  -fno-integrated-cc1     Spawn a separate process for each cc1
  -fno-integrated-objemitter
                          Use external machine object code emitter.
  -fno-jump-tables        Do not use jump tables for lowering switches
  -fno-keep-static-consts Don't keep static const variables if unused
  -fno-knr-functions      Disable support for K&R C function declarations
  -fno-lto                Disable LTO mode (default)
  -fno-memory-profile     Disable heap memory profiling
  -fno-merge-all-constants
                          Disallow merging of constants
  -fno-modules-check-relocated<value>
                          Skip checks for relocated modules when loading PCM files
  -fno-new-infallible     Disable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-objc-infer-related-result-type
                          do not infer Objective-C related result type based on method family
  -fno-offload-lto        Disable LTO mode (default) for offload compilation
  -fno-openmp-extensions  Disable all Clang extensions for OpenMP directives and clauses
  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators
  -fno-optimize-sibling-calls
                          Disable tail call optimization, keeping the call stack accurate
  -fno-pch-codegen        Do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fno-pch-debuginfo      Do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fno-plt                Use GOT indirection instead of PLT to make external function calls (x86 only)
  -fno-preserve-as-comments
                          Do not preserve comments in inline assembly
  -fno-profile-generate   Disable generation of profile instrumentation.
  -fno-profile-instr-generate
                          Disable generation of profile instrumentation.
  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization
  -fno-pseudo-probe-for-profiling
                          Do not emit pseudo probes for sample profiling
  -fno-ptrauth-abi-version
                          Disable Pointer Authentication ABI versioning
  -fno-ptrauth-kernel-abi-version
                          Disable Pointer Authentication kernel ABI versioning
  -fno-register-global-dtors-with-atexit
                          Don't use atexit or __cxa_atexit to register global destructors
  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags
  -fno-rtti-data          Disable generation of RTTI data
  -fno-rtti               Disable generation of rtti information
  -fno-sanitize-address-globals-dead-stripping
                          Disable linker dead stripping of globals in AddressSanitizer
  -fno-sanitize-address-outline-instrumentation
                          Use default code inlining logic for the address sanitizer
  -fno-sanitize-address-poison-custom-array-cookie
                          Disable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fno-sanitize-address-use-after-scope
                          Disable use-after-scope detection in AddressSanitizer
  -fno-sanitize-address-use-odr-indicator
                          Disable ODR indicator globals
  -fno-sanitize-cfi-canonical-jump-tables
                          Do not make the jump table addresses canonical in the symbol table
  -fno-sanitize-cfi-cross-dso
                          Disable control flow integrity (CFI) checks for cross-DSO calls.
  -fno-sanitize-coverage=<value>
                          Disable features of coverage instrumentation for Sanitizers
  -fno-sanitize-hwaddress-experimental-aliasing
                          Disable aliasing mode in HWAddressSanitizer
  -fno-sanitize-ignorelist
                          Don't use ignorelist file for sanitizers
  -fno-sanitize-memory-param-retval
                          Disable detection of uninitialized parameters and return values
  -fno-sanitize-memory-track-origins
                          Disable origins tracking in MemorySanitizer
  -fno-sanitize-memory-use-after-dtor
                          Disable use-after-destroy detection in MemorySanitizer
  -fno-sanitize-recover=<value>
                          Disable recovery for specified sanitizers
  -fno-sanitize-stable-abi
                          Conventional ABI instrumentation for sanitizer runtime. Default: Conventional
  -fno-sanitize-stats     Disable sanitizer statistics gathering.
  -fno-sanitize-thread-atomics
                          Disable atomic operations instrumentation in ThreadSanitizer
  -fno-sanitize-thread-func-entry-exit
                          Disable function entry/exit instrumentation in ThreadSanitizer
  -fno-sanitize-thread-memory-access
                          Disable memory access instrumentation in ThreadSanitizer
  -fno-sanitize-trap=<value>
                          Disable trapping for specified sanitizers
  -fno-sanitize-trap      Disable trapping for all sanitizers
  -fno-short-wchar        Force wchar_t to be an unsigned int
  -fno-show-column        Do not include column number on diagnostics
  -fno-show-source-location
                          Do not include source location information with diagnostics
  -fno-signed-char        char is unsigned
  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros
  -fno-spell-checking     Disable spell-checking
  -fno-split-machine-functions
                          Disable late function splitting using profile information (x86 ELF)
  -fno-split-stack        Wouldn't use segmented stack
  -fno-stack-check        Disable stack checking
  -fno-stack-clash-protection
                          Disable stack clash protection
  -fno-stack-protector    Disable the use of stack protectors
  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary
  -fno-strict-float-cast-overflow
                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions
  -fno-strict-return      Don't treat control flow paths that fall off the end of a non-void function as unreachable
  -fno-sycl               Disables SYCL kernels compilation for device
  -fno-temp-file          Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes
  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe
  -fno-trap-function-returns
                          The trap function specified by -ftrap-function never returns
  -fno-trigraphs          Do not process trigraph sequences
  -fno-typed-cxx-new-delete
                          Disable use of typed variants of C++ new() and delete()
  -fno-typed-memory-operations-experimental
                          Disable Typed Memory Operations call site rewriting
  -fno-unique-section-names
                          Don't use unique names for text and data sections
  -fno-unroll-loops       Turn off loop unroller
  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors
  -fno-use-init-array     Use .ctors/.dtors instead of .init_array/.fini_array
  -fno-visibility-inlines-hidden-static-local-var
                          Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)
  -fno-xray-function-index
                          Omit function index section at the expense of single-function patching performance
  -fno-zero-initialized-in-bss
                          Don't place zero initialized data in BSS
  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc
  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers
  -fobjc-disable-direct-methods-for-testing
                          Ignore attribute objc_direct so that direct methods can be tested
  -fobjc-encode-cxx-class-template-spec
                          Fully encode c++ class template specialization
  -fobjc-exceptions       Enable Objective-C exceptions
  -fobjc-relative-method-lists
                          Enable relative method lists
  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version
  -fobjc-weak             Enable ARC-style weak references in Objective-C
  -foffload-lto=<value>   Set LTO mode for offload compilation
  -foffload-lto           Enable LTO in 'full' mode for offload compilation
  -fopenmp-extensions     Enable all Clang extensions for OpenMP directives and clauses
  -fopenmp-implicit-rpath Set rpath on OpenMP executables
  -fopenmp-offload-mandatory
                          Do not create a host fallback if offloading to the device fails.
  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.
  -fopenmp-target-debug   Enable debugging in the OpenMP offloading device RTL
  -fopenmp-targets=<value>
                          Specify comma-separated list of triples OpenMP offloading targets to be supported
  -fopenmp-version=<value>
                          Set OpenMP version (e.g. 45 for OpenMP 4.5, 50 for OpenMP 5.0). Default value is 50.
  -fopenmp                Parse OpenMP pragmas and generate parallel code.
  -foptimization-record-file=<file>
                          Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.
  -foptimization-record-passes=<regex>
                          Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)
  -forder-file-instrumentation
                          Generate instrumented code to collect order file into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fpack-struct=<value>   Specify the default maximum struct packing alignment
  -fpascal-strings        Recognize and construct Pascal-style string literals
  -fpass-plugin=<dsopath> Load pass plugin from a dynamic shared object file (only with new pass manager).
  -fpatchable-function-entry=<N,M>
                          Generate M NOPs before function entry and N-M NOPs after function entry
  -fpcc-struct-return     Override the default ABI to return all structs on the stack
  -fpch-codegen           Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fpch-debuginfo         Generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fpch-instantiate-templates
                          Instantiate templates already while building a PCH
  -fpch-validate-input-files-content
                          Validate PCH input files based on content if mtime differs
  -fplugin-arg-<name>-<arg>
                          Pass <arg> to plugin <name>
  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)
  -fprebuilt-implicit-modules
                          Look up implicit modules in the prebuilt module path
  -fprebuilt-module-path=<directory>
                          Specify the prebuilt module path
  -fproc-stat-report=<value>
                          Save subprocess statistics to the given file
  -fproc-stat-report<value>
                          Print subprocess statistics
  -fprofile-exclude-files=<value>
                          Instrument only functions from files where names don't match all the regexes separated by a semi-colon
  -fprofile-filter-files=<value>
                          Instrument only functions from files where names match any regex separated by a semi-colon
  -fprofile-function-groups=<N>
                          Partition functions into N groups and select only functions in group i to be instrumented using -fprofile-selected-function-group
  -fprofile-generate=<directory>
                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate=<file>
                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate
                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fprofile-instr-use=<value>
                          Use instrumentation data for profile-guided optimization
  -fprofile-list=<value>  Filename defining the list of functions/files to instrument
  -fprofile-remapping-file=<file>
                          Use the remappings described in <file> to match the profile data against names in the program
  -fprofile-sample-accurate
                          Specifies that the sample profile is accurate
  -fprofile-sample-use=<value>
                          Enable sample-based profile guided optimizations
  -fprofile-selected-function-group=<i>
                          Partition functions into N groups using -fprofile-function-groups and select only functions in group i to be instrumented. The valid range is 0 to N-1 inclusive
  -fprofile-update=<method>
                          Set update method of profile counters
  -fprofile-use=<pathname>
                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.
  -fprotect-parens        Determines whether the optimizer honors parentheses when floating-point expressions are evaluated
  -fpseudo-probe-for-profiling
                          Emit pseudo probes for sample profiling
  -fptrauth-abi-version=<value>
                          Pointer Authentication ABI version
  -fptrauth-auth-traps    Enable traps on authentication failures
  -fptrauth-block-descriptor-pointers
                          enable signing block descriptors
  -fptrauth-calls         Enable signing and authentication of all indirect calls
  -fptrauth-function-pointer-type-discrimination
                          Enabling type discrimination on C function pointers
  -fptrauth-indirect-gotos
                          Enable signing and authentication of indirect goto targets
  -fptrauth-intrinsics    Enable pointer-authentication intrinsics
  -fptrauth-kernel-abi-version
                          Enable Pointer Authentication kernel ABI version
  -fptrauth-objc-class-ro Enable signing and authentication for ObjC class_ro pointers
  -fptrauth-objc-interface-sel
                          Enable signing and authentication of Objective-C object's 'SEL' fields
  -fptrauth-objc-isa-masking
                          pre- and post-authentication masking mode of objective-c isa pointers
  -fptrauth-objc-isa-mode=<value>
                          Authentication mode for ObjC isa field. Full auth if unspecified
  -fptrauth-objc-isa      Enable signing and authentication of Objective-C object's 'isa' field
  -fptrauth-returns       Enable signing and authentication of return addresses
  -fptrauth-soft          Enable software lowering of pointer authentication
  -fptrauth-vtable-pointer-address-discrimination
                          Enable address discrimination of vtable pointers
  -fptrauth-vtable-pointer-type-discrimination
                          Enable type discrimination of vtable pointers
  -frandomize-layout-seed-file=<file>
                          File holding the seed used by the randomize structure layout feature
  -frandomize-layout-seed=<seed>
                          The seed used by the randomize structure layout feature
  -freciprocal-math       Allow division operations to be reassociated
  -freg-struct-return     Override the default ABI to return small structs in registers
  -fregister-global-dtors-with-atexit
                          Use atexit or __cxa_atexit to register global destructors
  -frelaxed-template-template-args
                          Enable C++17 relaxed template template argument matching
  -freroll-loops          Turn on loop reroller
  -fropi                  Generate read-only position independent code (ARM only)
  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags
  -frwpi                  Generate read-write position independent code (ARM only)
  -fsafe-buffer-usage-suggestions
                          Display suggestions to update code associated with -Wunsafe-buffer-usage warnings
  -fsanitize-address-destructor=<value>
                          Set destructor type used in ASan instrumentation
  -fsanitize-address-field-padding=<value>
                          Level of field padding for AddressSanitizer
  -fsanitize-address-globals-dead-stripping
                          Enable linker dead stripping of globals in AddressSanitizer
  -fsanitize-address-outline-instrumentation
                          Always generate function calls for address sanitizer instrumentation
  -fsanitize-address-poison-custom-array-cookie
                          Enable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fsanitize-address-use-after-return=<mode>
                          Select the mode of detecting stack use-after-return in AddressSanitizer
  -fsanitize-address-use-after-scope
                          Enable use-after-scope detection in AddressSanitizer
  -fsanitize-address-use-odr-indicator
                          Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size
  -fsanitize-blacklist=<value>
                          Alias for -fsanitize-ignorelist=
  -fsanitize-cfi-canonical-jump-tables
                          Make the jump table addresses canonical in the symbol table
  -fsanitize-cfi-cross-dso
                          Enable control flow integrity (CFI) checks for cross-DSO calls.
  -fsanitize-cfi-icall-generalize-pointers
                          Generalize pointers in CFI indirect call type signature checks
  -fsanitize-coverage-allowlist=<value>
                          Restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones
  -fsanitize-coverage-ignorelist=<value>
                          Disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones
  -fsanitize-coverage=<value>
                          Specify the type of coverage instrumentation for Sanitizers
  -fsanitize-hwaddress-abi=<value>
                          Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.
  -fsanitize-hwaddress-experimental-aliasing
                          Enable aliasing mode in HWAddressSanitizer
  -fsanitize-ignorelist=<value>
                          Path to ignorelist file for sanitizers
  -fsanitize-memory-param-retval
                          Enable detection of uninitialized parameters and return values
  -fsanitize-memory-track-origins=<value>
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-track-origins
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-use-after-dtor
                          Enable use-after-destroy detection in MemorySanitizer
  -fsanitize-memtag-mode=<value>
                          Set default MTE mode to 'sync' (default) or 'async'
  -fsanitize-recover=<value>
                          Enable recovery for specified sanitizers
  -fsanitize-stable-abi   Stable  ABI instrumentation for sanitizer runtime. Default: Conventional
  -fsanitize-stats        Enable sanitizer statistics gathering.
  -fsanitize-system-blacklist=<value>
                          Alias for -fsanitize-system-ignorelist=
  -fsanitize-system-ignorelist=<value>
                          Path to system ignorelist file for sanitizers
  -fsanitize-thread-atomics
                          Enable atomic operations instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-func-entry-exit
                          Enable function entry/exit instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-memory-access
                          Enable memory access instrumentation in ThreadSanitizer (default)
  -fsanitize-trap=<value> Enable trapping for specified sanitizers
  -fsanitize-trap         Enable trapping for all sanitizers
  -fsanitize-undefined-strip-path-components=<number>
                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.
  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks
  -fsave-optimization-record=<format>
                          Generate an optimization record file in a specific format
  -fsave-optimization-record
                          Generate a YAML optimization record file
  -fseh-exceptions        Use SEH style exceptions
  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values
  -fshort-wchar           Force wchar_t to be a short unsigned int
  -fshow-overloads=<value>
                          Which overload candidates to show when overload resolution fails. Defaults to 'all'
  -fshow-skipped-includes Show skipped includes in -H output.
  -fsigned-char           char is signed
  -fsized-deallocation    Enable C++14 sized global deallocation functions
  -fsjlj-exceptions       Use SjLj style exceptions
  -fslp-vectorize         Enable the superword-level parallelism vectorization passes
  -fsmall-block-descriptors
                          Enable small block descriptors
  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF
  -fsplit-lto-unit        Enables splitting of the LTO unit
  -fsplit-machine-functions
                          Enable late function splitting using profile information (x86 ELF)
  -fsplit-stack           Use segmented stack
  -fstack-check           Enable stack checking
  -fstack-clash-protection
                          Enable stack clash protection
  -fstack-protector-all   Enable stack protectors for all functions
  -fstack-protector-strong
                          Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable
  -fstack-protector       Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca , which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable. A function with a stack protector has a guard value added to the stack frame that is checked on function exit. The guard value must be positioned in the stack frame such that a buffer overflow from a vulnerable variable will overwrite the guard value before overwriting the function's return address. The reference stack guard value is stored in a global variable.
  -fstack-size-section    Emit section containing metadata on function stack sizes
  -fstack-usage           Emit .su file containing information on function stack sizes
  -fstandalone-debug      Emit full debug info for all types used by the program
  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range
  -fstrict-flex-arrays=<n>
                          Enable optimizations based on the strict definition of flexible arrays
  -fstrict-float-cast-overflow
                          Assume that overflowing float-to-int casts are undefined (default)
  -fstrict-vtable-pointers
                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects
  -fsuppress-conflicting-types
                          Ignore errors from conflicting types in function declarations
  -fswift-async-fp=<option>
                          Control emission of Swift async extended frame info
  -fsycl                  Enables SYCL kernels compilation for device
  -fsyntax-only           Run the preprocessor, parser and semantic analysis stages
  -fsystem-module         Build this module as a system module. Only used with -emit-module
  -ftarget-variant-availability-checks
                          Enable availability checks for the target variant platform
  -fthin-link-bitcode=<value>
                          Write minimized bitcode to <file> for the ThinLTO thin link only
  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index
  -ftime-report=<value>   (For new pass manager) 'per-pass': one report for each pass; 'per-pass-run': one report for each pass invocation
  -ftime-trace-granularity=<value>
                          Minimum time granularity (in microseconds) traced by time profiler
  -ftime-trace=<value>    Similar to -ftime-trace. Specify the JSON file or a directory which will contain the JSON file
  -ftime-trace            Turn on time profiler. Generates JSON file based on output filename.
  -ftrap-function-returns The trap function specified by -ftrap-function may return normally
  -ftrap-function=<value> Issue call to specified function rather than a trap instruction
  -ftrapv-handler=<function name>
                          Specify the function to be called on overflow
  -ftrapv                 Trap on integer overflow
  -ftrigraphs             Process trigraph sequences
  -ftrivial-auto-var-init-skip-cpp-obj
                          do not auto-initialize objects initialized by a C++ constructor
  -ftrivial-auto-var-init-skip-non-pod
                          do not auto-initialize non-POD objects
  -ftrivial-auto-var-init-skip-non-ptr-array
                          do not auto-initialize arrays other than arrays of pointers
  -ftrivial-auto-var-init-skip-stl
                          do not auto-initialize variables in STL namespace
  -ftrivial-auto-var-init-stop-after=<value>
                          Stop initializing trivial automatic stack variables after the specified number of instances
  -ftrivial-auto-var-init=<value>
                          Initialize trivial automatic stack variables. Defaults to 'uninitialized'
  -ftrivial-auto-var-zero-init-max-size=<value>
                          Zero initialize only first N bytes of each stack variable; 0 value turns off the limit.
  -ftyped-cxx-new-delete  Enable use of typed variants of C++ new() and delete()
  -ftyped-memory-operations-experimental
                          Enable Typed Memory Operations call site rewriting
  -funique-basic-block-section-names
                          Use unique names for basic block sections (ELF Only)
  -funique-internal-linkage-names
                          Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path
  -funroll-loops          Turn on loop unroller
  -fuse-cuid=<value>      Method to generate ID's for compilation units for single source offloading languages CUDA and HIP: 'hash' (ID's generated by hashing file path and command line options) | 'random' (ID's generated as random numbers) | 'none' (disabled). Default is 'hash'. This option will be overridden by option '-cuid=[ID]' if it is specified.
  -fuse-line-directives   Use #line in preprocessed output
  -fvalidate-ast-input-files-content
                          Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical
  -fveclib=<value>        Use the given vector functions library
  -fvectorize             Enable the loop vectorization passes
  -fverbose-asm           Generate verbose assembly output
  -fvirtual-function-elimination
                          Enables dead virtual function elimination optimization. Requires -flto=full
  -fvisibility-dllexport=<value>
                          The visibility for dllexport definitions [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-dllimport=<value>
                          The visibility for dllimport external declarations [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-nodllstorageclass=<value>
                          The visibility for external declarations without an explicit DLL dllstorageclass [-fvisibility-from-dllstorageclass]
  -fvisibility-from-dllstorageclass
                          Set the visibility of symbols in the generated code from their DLL storage class
  -fvisibility-global-new-delete-hidden
                          Give global C++ operator new and delete declarations hidden visibility
  -fvisibility-inlines-hidden-static-local-var
                          When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default
  -fvisibility-inlines-hidden
                          Give inline C++ member functions hidden visibility by default
  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default
  -fvisibility-nodllstorageclass=<value>
                          The visibility for definitions without an explicit DLL export class [-fvisibility-from-dllstorageclass]
  -fvisibility=<value>    Set the default symbol visibility for all global definitions
  -fwasm-exceptions       Use WebAssembly style exceptions
  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto
  -fwrapv                 Treat signed integer overflow as two's complement
  -fwritable-strings      Store string literals as writable data
  -fxl-pragma-pack        Enable IBM XL #pragma pack handling
  -fxray-always-emit-customevents
                          Always emit __xray_customevent(...) calls even if the containing function is not always instrumented
  -fxray-always-emit-typedevents
                          Always emit __xray_typedevent(...) calls even if the containing function is not always instrumented
  -fxray-always-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.
  -fxray-attr-list=<value>
                          Filename defining the list of functions/types for imbuing XRay attributes.
  -fxray-function-groups=<value>
                          Only instrument 1 of N groups
  -fxray-ignore-loops     Don't instrument functions with loops unless they also meet the minimum function size
  -fxray-instruction-threshold=<value>
                          Sets the minimum function size to instrument with XRay
  -fxray-instrumentation-bundle=<value>
                          Select which XRay instrumentation points to emit. Options: all, none, function-entry, function-exit, function, custom. Default is 'all'.  'function' includes both 'function-entry' and 'function-exit'.
  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit
  -fxray-link-deps        Tells clang to add the link dependencies for XRay.
  -fxray-modes=<value>    List of modes to link in by default into XRay instrumented binaries.
  -fxray-never-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.
  -fxray-selected-function-group=<value>
                          When using -fxray-function-groups, select which group of functions to instrument. Valid range is 0 to fxray-function-groups - 1
  -fzero-call-used-regs=<value>
                          Clear call-used registers upon function return (AArch64/x86 only)
  -fzvector               Enable System z vector language extension
  -F <value>              Add directory to framework include search path
  --gcc-install-dir=<value>
                          Use GCC installation in the specified directory. The directory ends with path components like 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Note: executables (e.g. ld) used by the compiler are not overridden by the selected GCC installation
  --gcc-toolchain=<value> Specify a directory where Clang can find 'include' and 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Clang will use the GCC installation with the largest version
  -gcodeview-ghash        Emit type record hashes in a .debug$H section
  -gcodeview              Generate CodeView debug information
  -gdwarf-2               Generate source-level debug information with dwarf version 2
  -gdwarf-3               Generate source-level debug information with dwarf version 3
  -gdwarf-4               Generate source-level debug information with dwarf version 4
  -gdwarf-5               Generate source-level debug information with dwarf version 5
  -gdwarf32               Enables DWARF32 format for ELF binaries, if debug information emission is enabled.
  -gdwarf64               Enables DWARF64 format for ELF binaries, if debug information emission is enabled.
  -gdwarf                 Generate source-level debug information with the default dwarf version
  -gembed-source          Embed source text in DWARF debug sections
  -gen-reproducer=<value> Emit reproducer on (option: off, crash (default), error, always)
  -gline-directives-only  Emit debug line info directives only
  -gline-tables-only      Emit debug line number tables only
  -gmodules               Generate debug info with external references to clang modules or precompiled headers
  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections
  -gno-inline-line-tables Don't emit inline line tables.
  --gpu-bundle-output     Bundle output files of HIP device compilation
  --gpu-instrument-lib=<value>
                          Instrument device library for HIP, which is a LLVM bitcode containing __cyg_profile_func_enter and __cyg_profile_func_exit
  --gpu-max-threads-per-block=<value>
                          Default max threads per block for kernel launch bounds for HIP
  -greproducible          Tune debug info to be reproducible.
  -gsplit-dwarf=<value>   Set DWARF fission mode
  -gz=<value>             DWARF debug sections compression type
  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)
  -g                      Generate source-level debug information
  --help-hidden           Display help for hidden options
  -help                   Display available options
  --hip-device-lib=<value>
                          HIP device library
  --hip-link              Link clang-offload-bundler bundles for HIP
  --hip-path=<value>      HIP runtime installation path, used for finding HIP version and adding HIP include path.
  --hip-version=<value>   HIP version in the format of major.minor.patch
  --hipspv-pass-plugin=<dsopath>
                          path to a pass plugin for HIP to SPIR-V passes.
  -H                      Show header includes and nesting depth
  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path
  -iapinotes-modules <directory>
                          Add directory to the API notes search path referenced by module name
  -iapinotes-path <file>  Include API notes file
  -ibuiltininc            Enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it
  -idirafter <value>      Add directory to AFTER include search path
  -iframeworkwithsysroot <directory>
                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot
  -iframework <value>     Add directory to SYSTEM framework search path
  -imacros <file>         Include macros from file before parsing
  -include-pch <file>     Include precompiled header file
  -include <file>         Include file before parsing
  -index-header-map       Make the next included directory (-I or -F) an indexer header map
  -index-ignore-macros    Ignore macros during indexing
  -index-ignore-pcms      Ignore symbols from imported pcm modules
  -index-ignore-system-symbols
                          Ignore symbols from system headers
  -index-record-codegen-name
                          Record the codegen name for symbols
  -index-store-path <value>
                          Enable indexing with the specified data store path
  -index-unit-output-path <path>
                          Use <path> as the output path for this compilation unit in the index unit file
  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix
  -iquote <directory>     Add directory to QUOTE include search path
  -isysroot <dir>         Set the system root directory (usually /)
  -isystem-after <directory>
                          Add directory to end of the SYSTEM include search path
  -isystem <directory>    Add directory to SYSTEM include search path
  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system
  -ivfsstatcache <value>  Use the stat data cached in file instead of doing filesystem syscalls. See clang-stat-cache utility.
  -iwithprefixbefore <dir>
                          Set directory to include search path with prefix
  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix
  -iwithsysroot <directory>
                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot
  -I <dir>                Add directory to the end of the list of include search paths
  --libomptarget-amdgcn-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-amdgpu-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-nvptx-bc-path=<value>
                          Path to libomptarget-nvptx bitcode library
  -L <dir>                Add directory to library search path
  -mabi=quadword-atomics  Enable quadword atomics ABI on AIX (AIX PPC64 only). Uses lqarx/stqcx. instructions.
  -mabi=vec-default       Enable the default Altivec ABI on AIX (AIX only). Uses only volatile vector registers.
  -mabi=vec-extabi        Enable the extended Altivec ABI on AIX (AIX only). Uses volatile and nonvolatile vector registers
  -mabicalls              Enable SVR4-style position-independent code (Mips only)
  -maix-struct-return     Return all structs in memory (PPC32 only)
  -malign-branch-boundary=<value>
                          Specify the boundary's size to align branches
  -malign-branch=<value>  Specify types of branches to align
  -malign-double          Align doubles to two words in structs (x86 only)
  -mamdgpu-ieee           Sets the IEEE bit in the expected default floating point  mode register. Floating point opcodes that support exception flag gathering quiet and propagate signaling NaN inputs per IEEE 754-2008. This option changes the ABI. (AMDGPU only)
  -mbackchain             Link stack frames through backchain on System Z
  -mbranch-protection=<value>
                          Enforce targets of indirect branches and function returns
  -mbranches-within-32B-boundaries
                          Align selected branches (fused, jcc, jmp) within 32-byte boundary
  -mcmodel=medany         Equivalent to -mcmodel=medium, compatible with RISC-V gcc.
  -mcmodel=medlow         Equivalent to -mcmodel=small, compatible with RISC-V gcc.
  -mcmse                  Allow use of CMSE (Armv8-M Security Extensions)
  -mcode-object-v3        Legacy option to specify code object ABI V3 (AMDGPU only)
  -mcode-object-version=<value>
                          Specify code object ABI version. Defaults to 4. (AMDGPU only)
  -mcrc                   Allow use of CRC instructions (ARM/Mips only)
  -mcumode                Specify CU wavefront execution mode (AMDGPU only)
  -mdefault-visibility-export-mapping=<value>
                          Mapping between default visibility and export
  -mdouble=<n             Force double to be <n> bits
  -MD                     Write a depfile containing user and system headers
  -meabi <value>          Set EABI type. Default depends on triple)
  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)
  -menable-experimental-extensions
                          Enable use of experimental RISC-V extensions.
  -menable-unsafe-fp-math Allow unsafe floating-point math optimizations which may decrease precision
  -mexec-model=<value>    Execution model (WebAssembly only)
  -mexecute-only          Disallow generation of data access to code sections (ARM only)
  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mfentry                Insert calls to fentry at function entry (x86/SystemZ only)
  -mfix-cmse-cve-2021-35465
                          Work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mfix-cortex-a57-aes-1742098
                          Work around Cortex-A57 Erratum 1742098 (ARM only)
  -mfix-cortex-a72-aes-1655431
                          Work around Cortex-A72 Erratum 1655431 (ARM only)
  -mfp32                  Use 32-bit floating point registers (MIPS only)
  -mfp64                  Use 64-bit floating point registers (MIPS only)
  -mframe-chain=<value>   Select the frame chain model used to emit frame records (Arm only).
  -mfunction-return=<value>
                          Replace returns with jumps to ``__x86_return_thunk`` (x86 only, error otherwise)
  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>
  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64/x86 only)
  -mglobal-merge          Enable merging of globals
  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mguard=<value>         Enable or disable Control Flow Guard checks and guard tables emission
  -MG                     Add missing headers to depfile
  -mharden-sls=<value>    Select straight-line speculation hardening scope (ARM/AArch64/X86 only). <arg> must be: all, none, retbr(ARM/AArch64), blr(ARM/AArch64), comdat(ARM/AArch64), nocomdat(ARM/AArch64), return(X86), indirect-jmp(X86)
  -mhvx-ieee-fp           Enable Hexagon HVX IEEE floating-point
  -mhvx-length=<value>    Set Hexagon Vector Length
  -mhvx-qfloat            Enable Hexagon HVX QFloat instructions
  -mhvx=<value>           Enable Hexagon Vector eXtensions
  -mhvx                   Enable Hexagon Vector eXtensions
  -miamcu                 Use Intel MCU ABI
  -mibt-seal              Optimize fcf-protection=branch/full (requires LTO).
  -mignore-xcoff-visibility
                          Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspecified' visibility in XCOFF object file
  --migrate               Run the migrator
  -mincremental-linker-compatible
                          (integrated-as) Emit an object file which can be used with an incremental linker
  -mindirect-branch-cs-prefix
                          Add cs prefix to call and jmp to indirect thunk
  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation
  -mios-version-min=<value>
                          Set iOS deployment target
  -MJ <value>             Write a compilation database entry per input
  -mllvm <value>          Additional arguments to forward to LLVM's option processing
  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)
  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.
  -mlong-double-128       Force long double to be 128 bits
  -mlong-double-64        Force long double to be 64 bits
  -mlong-double-80        Force long double to be 80 bits, padded to 128 bits for storage
  -mlvi-cfi               Enable only control-flow mitigations for Load Value Injection (LVI)
  -mlvi-hardening         Enable all mitigations for Load Value Injection (LVI)
  -mmacos-version-min=<value>
                          Set macOS deployment target
  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.
  -mmark-bti-property     Add .note.gnu.property with BTI to assembly files (AArch64 only)
  -MMD                    Write a depfile containing user headers
  -mmemops                Enable generation of memop instructions
  -mmlir <value>          Additional arguments to forward to MLIR's option processing
  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard
  -mmsa                   Enable MSA ASE (MIPS only)
  -mmt                    Enable MT ASE (MIPS only)
  -MM                     Like -MMD, but also implies -E and writes to stdout by default
  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)
  -mno-bti-at-return-twice
                          Do not add a BTI instruction after a setjmp or other return-twice construct (Arm/AArch64 only)
  -mno-code-object-v3     Legacy option to specify code object ABI V2 (AMDGPU only)
  -mno-crc                Disallow use of CRC instructions (Mips only)
  -mno-cumode             Specify WGP wavefront execution mode (AMDGPU only)
  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)
  -mno-execute-only       Allow generation of data access to code sections (ARM only)
  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mno-fix-cmse-cve-2021-35465
                          Don't work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mno-fix-cortex-a53-835769
                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mno-fix-cortex-a57-aes-1742098
                          Don't work around Cortex-A57 Erratum 1742098 (ARM only)
  -mno-fix-cortex-a72-aes-1655431
                          Don't work around Cortex-A72 Erratum 1655431 (ARM only)
  -mno-global-merge       Disable merging of globals
  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mno-hvx-ieee-fp        Disable Hexagon HVX IEEE floating-point
  -mno-hvx-qfloat         Disable Hexagon HVX QFloat instructions
  -mno-hvx                Disable Hexagon Vector eXtensions
  -mno-implicit-float     Don't generate implicit floating point instructions
  -mno-implicit-sme       Don't generate implicit SME instructions or mode switches
  -mno-incremental-linker-compatible
                          (integrated-as) Emit an object file which cannot be used with an incremental linker
  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)
  -mno-long-calls         Restore the default behaviour of not generating long calls
  -mno-lvi-cfi            Disable control-flow mitigations for Load Value Injection (LVI)
  -mno-lvi-hardening      Disable mitigations for Load Value Injection (LVI)
  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.
  -mno-memops             Disable generation of memop instructions
  -mno-movt               Disallow use of movt/movw pairs (ARM only)
  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard
  -mno-msa                Disable MSA ASE (MIPS only)
  -mno-mt                 Disable MT ASE (MIPS only)
  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.
  -mno-nvj                Disable generation of new-value jumps
  -mno-nvs                Disable generation of new-value stores
  -mno-outline-atomics    Don't generate local calls to out-of-line atomic operations
  -mno-outline            Disable function outlining (AArch64 only)
  -mno-packets            Disable generation of instruction packets
  -mno-relax              Disable linker relaxation
  -mno-restrict-it        Allow generation of complex IT blocks.
  -mno-save-restore       Disable using library calls for save and restore
  -mno-seses              Disable speculative execution side effect suppression (SESES)
  -mno-stack-arg-probe    Disable stack probes which are enabled by default
  -mno-tgsplit            Disable threadgroup split execution mode (AMDGPU only)
  -mno-tls-direct-seg-refs
                          Disable direct TLS access through segment registers
  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)
  -mno-wavefrontsize64    Specify wavefront size 32 mode (AMDGPU only)
  -mnocrc                 Disallow use of CRC instructions (ARM only)
  -mnop-mcount            Generate mcount/__fentry__ calls as nops. To activate they need to be patched in.
  -mnvj                   Enable generation of new-value jumps
  -mnvs                   Enable generation of new-value stores
  -module-dependency-dir <value>
                          Directory to dump module dependencies to
  -module-file-info       Provide information about a particular module file
  -momit-leaf-frame-pointer
                          Omit frame pointer setup for leaf functions
  -moutline-atomics       Generate local calls to out-of-line atomic operations
  -moutline               Enable function outlining (AArch64 only)
  -mpacked-stack          Use packed stack layout (SystemZ only).
  -mpackets               Enable generation of instruction packets
  -mpad-max-prefix-size=<value>
                          Specify maximum number of prefixes to use for padding
  -mprefer-vector-width=<value>
                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.
  -MP                     Create phony target for each dependency (other than main file)
  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility
  -MQ <value>             Specify name of main file output to quote in depfile
  -mrecord-mcount         Generate a __mcount_loc section entry for each __fentry__ call.
  -mrelax-all             (integrated-as) Relax all machine instructions
  -mrelax                 Enable linker relaxation
  -mrestrict-it           Disallow generation of complex IT blocks.
  -mrtd                   Make StdCall calling convention the default
  -msave-restore          Enable using library calls for save and restore
  -mseses                 Enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations
  -msign-return-address=<value>
                          Select return address signing scope
  -mskip-rax-setup        Skip setting up RAX register when passing variable arguments (x86 only)
  -msmall-data-limit=<value>
                          Put global and static data smaller than the limit into a special section
  -msoft-float            Use software floating point
  -mstack-alignment=<value>
                          Set the stack alignment
  -mstack-arg-probe       Enable stack probes
  -mstack-probe-size=<value>
                          Set the stack probe size
  -mstack-protector-guard-offset=<value>
                          Use the given offset for addressing the stack-protector guard
  -mstack-protector-guard-reg=<value>
                          Use the given reg for addressing the stack-protector guard
  -mstack-protector-guard-symbol=<value>
                          Use the given symbol for addressing the stack-protector guard
  -mstack-protector-guard=<value>
                          Use the given guard (global, tls) for addressing the stack-protector guard
  -mstackrealign          Force realign the stack at entry to every function
  -msve-vector-bits=<value>
                          Specify the size in bits of an SVE vector register. Defaults to the vector length agnostic value of "scalable". (AArch64 only)
  -msvr4-struct-return    Return small structs in registers (PPC32 only)
  -mtargetos=<value>      Set the deployment target to be the specified OS and OS version
  -mtgsplit               Enable threadgroup split execution mode (AMDGPU only)
  -mthread-model <value>  The thread model to use. Defaults to 'posix')
  -mtls-direct-seg-refs   Enable direct TLS access through segment registers (default)
  -mtls-size=<value>      Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)
  -mtp=<value>            Thread pointer access method (AArch32/AArch64 only)
  -mtune=<value>          Only supported on AArch64, PowerPC, RISC-V, SystemZ, and X86
  -MT <value>             Specify name of main file output in depfile
  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)
  -munsafe-fp-atomics     Enable unsafe floating point atomic instructions (AMDGPU only)
  -mvscale-max=<value>    Specify the vscale maximum. Defaults to the vector length agnostic value of "0". (AArch64 only)
  -mvscale-min=<value>    Specify the vscale minimum. Defaults to "1". (AArch64 only)
  -MV                     Use NMake/Jom format for the depfile
  -mwavefrontsize64       Specify wavefront size 64 mode (AMDGPU only)
  -M                      Like -MD, but also implies -E and writes to stdout by default
  --no-cuda-include-ptx=<value>
                          Do not include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.
  --no-default-config     Disable loading default configuration files
  --no-gpu-bundle-output  Do not bundle output files of HIP device compilation
  -no-hip-rt              Do not link against HIP runtime libraries
  --no-offload-arch=<value>
                          Remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. 'all' resets the list to its default value.
  --no-offload-new-driver Don't Use the new driver for offloading compilation.
  --no-system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as not including a system header.
  -nobuiltininc           Disable builtin #include directories
  -nogpuinc               Do not add include paths for CUDA/HIP and do not include the default CUDA/HIP wrapper headers
  -nogpulib               Do not link device library for CUDA/HIP device compilation
  -nohipwrapperinc        Do not include the default HIP wrapper headers and include paths
  -nostdinc++             Disable standard #include directories for the C++ standard library
  -ObjC++                 Treat source input files as Objective-C++ inputs
  -objcmt-allowlist-dir-path=<value>
                          Only modify files with a filename contained in the provided directory path
  -objcmt-atomic-property Make migration to 'atomic' properties
  -objcmt-migrate-all     Enable migration to modern ObjC
  -objcmt-migrate-annotation
                          Enable migration to property and method annotations
  -objcmt-migrate-designated-init
                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods
  -objcmt-migrate-instancetype
                          Enable migration to infer instancetype for method result type
  -objcmt-migrate-literals
                          Enable migration to modern ObjC literals
  -objcmt-migrate-ns-macros
                          Enable migration to NS_ENUM/NS_OPTIONS macros
  -objcmt-migrate-property-dot-syntax
                          Enable migration of setter/getter messages to property-dot syntax
  -objcmt-migrate-property
                          Enable migration to modern ObjC property
  -objcmt-migrate-protocol-conformance
                          Enable migration to add protocol conformance on classes
  -objcmt-migrate-readonly-property
                          Enable migration to modern ObjC readonly property
  -objcmt-migrate-readwrite-property
                          Enable migration to modern ObjC readwrite property
  -objcmt-migrate-subscripting
                          Enable migration to modern ObjC subscripting
  -objcmt-ns-nonatomic-iosonly
                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute
  -objcmt-returns-innerpointer-property
                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER
  -objcmt-whitelist-dir-path=<value>
                          Alias for -objcmt-allowlist-dir-path
  -ObjC                   Treat source input files as Objective-C inputs
  -object-file-name=<file>
                          Set the output <file> for debug infos
  --offload-arch=<value>  CUDA offloading device architecture (e.g. sm_35), or HIP offloading target ID in the form of a device architecture followed by target ID features delimited by a colon. Each target ID feature is a pre-defined string followed by a plus or minus sign (e.g. gfx908:xnack+:sramecc-).  May be specified more than once.
  --offload-device-only   Only compile for the offloading device.
  --offload-host-device   Only compile for the offloading host.
  --offload-host-only     Only compile for the offloading host.
  --offload-link          Use the new offloading linker to perform the link job.
  --offload-new-driver    Use the new driver for offloading compilation.
  --offload=<value>       Specify comma-separated list of offloading target triples (CUDA and HIP only)
  -o <file>               Write output to <file>
  -pedantic               Warn on language extensions
  -pg                     Enable mcount instrumentation
  -pipe                   Use pipes between commands, when possible
  --precompile            Only precompile the input
  -print-diagnostic-options
                          Print all of Clang's warning options
  -print-effective-triple Print the effective target triple
  -print-file-name=<file> Print the full library path of <file>
  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace
  -print-libgcc-file-name Print the library path for the currently used compiler runtime library ("libgcc.a" or "libclang_rt.builtins.*.a")
  -print-prog-name=<name> Print the full program path of <name>
  -print-resource-dir     Print the resource directory pathname
  -print-rocm-search-dirs Print the paths used for finding ROCm installation
  -print-runtime-dir      Print the directory pathname containing clangs runtime libraries
  -print-search-dirs      Print the paths used for finding libraries and programs
  -print-supported-cpus   Print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)
  -print-target-triple    Print the normalized target triple
  -print-targets          Print the registered targets
  -pthread                Support POSIX threads in generated code
  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)
  -P                      Disable linemarker output in -E mode
  -Qn                     Do not emit metadata containing compiler name and version
  -Qunused-arguments      Don't emit warning for unused driver arguments
  -Qy                     Emit metadata containing compiler name and version
  -relocatable-pch        Whether to build a relocatable precompiled header
  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++
  -rewrite-objc           Rewrite Objective-C source to C++
  --rocm-device-lib-path=<value>
                          ROCm device library path. Alternative to rocm-path.
  --rocm-path=<value>     ROCm installation path, used for finding and automatically linking required bitcode libraries.
  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression
  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression
  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression
  -rtlib=<value>          Compiler runtime library to use
  -R<remark>              Enable the specified remark
  -save-stats=<value>     Save llvm statistics.
  -save-stats             Save llvm statistics.
  -save-temps=<value>     Save intermediate compilation results.
  -save-temps             Save intermediate compilation results
  -serialize-diagnostics <value>
                          Serialize compiler diagnostics to a file
  -shared-libsan          Dynamically link the sanitizer runtime
  --start-no-unused-arguments
                          Don't emit warnings about unused arguments for the following arguments
  -static-libsan          Statically link the sanitizer runtime
  -static-openmp          Use the static host OpenMP runtime while linking.
  -std=<value>            Language standard to compile for
  -stdlib++-isystem <directory>
                          Use directory as the C++ standard library include path
  -stdlib=<value>         C++ standard library to use
  -sycl-std=<value>       SYCL language standard to compile for.
  --system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as including a system header.
  -S                      Only run preprocess and compilation steps
  --target=<value>        Generate code for the given target
  -time                   Time individual commands
  -traditional-cpp        Enable some traditional CPP emulation
  -trigraphs              Process trigraph sequences
  -T <script>             Specify <script> as linker script
  -undef                  undef all system defines
  -unwindlib=<value>      Unwind library to use
  -U <macro>              Undefine macro <macro>
  --verify-debug-info     Verify the binary representation of debug output
  -verify-pch             Load and verify that a pre-compiled header file is not stale
  --version               Print version information
  -v                      Show commands to run and use verbose output
  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler
  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED
  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker
  -working-directory <value>
                          Resolve file paths relative to the specified directory
  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor
  -W<warning>             Enable the specified warning
  -w                      Suppress all warnings
  -Xanalyzer <arg>        Pass <arg> to the static analyzer
  -Xarch_device <arg>     Pass <arg> to the CUDA/HIP device compilation
  -Xarch_host <arg>       Pass <arg> to the CUDA/HIP host compilation
  -Xassembler <arg>       Pass <arg> to the assembler
  -Xclang=<arg>           Alias for -Xclang
  -Xclang <arg>           Pass <arg> to clang -cc1
  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation
  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler
  -Xlinker <arg>          Pass <arg> to the linker
  -Xoffload-linker<triple> <arg>
                          Pass <arg> to the offload linkers or the ones idenfied by -<triple>
  -Xopenmp-target=<triple> <arg>
                          Pass <arg> to the target offloading toolchain identified by <triple>.
  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.
  -Xpreprocessor <arg>    Pass <arg> to the preprocessor
  -x <language>           Treat subsequent input files as having type <language>
  -z <arg>                Pass -z <arg> to the linker
=============================================================================================
TESTING: checkLinux from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:1385)
  Check for __linux__
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c 
stdout:
/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c:5:6: error: "__linux__ not defined"
    #error "__linux__ not defined"
     ^
1 error generated.
Possible ERROR while running compiler: exit code 1
stderr:
/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c:5:6: error: "__linux__ not defined"
    #error "__linux__ not defined"
     ^
1 error generated.
Source:
#include "confdefs.h"
#include "conffix.h"

    #if !defined(__linux__)
    #error "__linux__ not defined"
    #endif
    

int main(void) {
  return 0;
}

=============================================================================================
TESTING: checkC99Flag from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:1396)
  Check for -std=c99 or equivalent flag
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native   /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
#include <float.h>

int main(void) {

    float x[2],y;
    float *restrict z = &y;
    y = FLT_ROUNDS;
    // c++ comment
    int j = 2;
    for (int i=0; i<2; i++){
      x[i] = i*j*(*z);
    }
    (void)x;
  return 0;
}

            Output from compiling with  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native 

          Accepted C99 compile flag: 
=============================================================================================
TESTING: checkCFormatting from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:364)
  Activate format string checking if using the GNU compilers
=============================================================================================
TESTING: checkDynamicLoadFlag from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:375)
  Checks that dlopen() takes RTLD_XXX, and defines PETSC_HAVE_RTLD_XXX if it does
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
#include <dlfcn.h>
char *libname;

int main(void) {
dlopen(libname, RTLD_LAZY);dlopen(libname, RTLD_NOW);dlopen(libname, RTLD_LOCAL);dlopen(libname, RTLD_GLOBAL);
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
            Defined "HAVE_RTLD_LAZY" to "1"
            Defined "HAVE_RTLD_NOW" to "1"
            Defined "HAVE_RTLD_LOCAL" to "1"
            Defined "HAVE_RTLD_GLOBAL" to "1"
=============================================================================================
TESTING: checkStdAtomic from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:1429)
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

    #if defined(__cplusplus)
    #include <atomic>
    using namespace std;
    #else
    #include <stdatomic.h>
    #endif
    double dcount = 0;
    atomic_flag cat = ATOMIC_FLAG_INIT;
    

int main(void) {

    do {} while (atomic_flag_test_and_set(&cat));
    dcount++;
    atomic_flag_clear(&cat);
    
  return 0;
}

            Defined "HAVE_STDATOMIC_H" to "1"
=============================================================================================
TESTING: checkCLibraries from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:167)
  Determines the libraries needed to link using the C++ or Fortran compiler C source code compiled with C. Result is stored in clibs
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
#include <stdio.h>
void asub(void)
{char s[16];printf("testing %s",s);}

Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90 
Successful compile:
Source:
      program main
      print*,'testing'
      stop
      end
 
Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/confc.o 
          C libraries are not needed when using Fortran linker
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
#include <stdio.h>
void asub(void)
{char s[16];printf("testing %s",s);}

Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -O3 -march=native -mtune=native  -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
 int main(int argc,char **args)
{return 0;}
 
Executing: g++  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -O3 -march=native -mtune=native /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/confc.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
          C libraries are not needed when using C++ linker
=============================================================================================
TESTING: checkDependencyGenerationFlag from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:1336)
  Check if -MMD works for dependency generation, and add it if it does
          Trying C compiler flag -MMD -MP
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native -MMD -MP  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

            Output from compiling with  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native -MMD -MP

            Defined make macro "C_DEPFLAGS" to "-MMD -MP"
          Trying Cxx compiler flag -MMD -MP
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -O3 -march=native -mtune=native  -std=gnu++20 -MMD -MP  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

            Output from compiling with  -std=gnu++20 -MMD -MP

            Defined make macro "CXX_DEPFLAGS" to "-MMD -MP"
Executing: g++ --help | head -n 20 
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
stdout: error: write on a pipe with no reader
Executing: g++ --help
stdout:
OVERVIEW: clang LLVM compiler
USAGE: clang [options] file...
OPTIONS:
  -###                    Print (but do not run) the commands to run for this compilation
  --amdgpu-arch-tool=<value>
                          Tool used for detecting AMD GPU arch in the system.
  --analyzer-output <value>
                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).
  --analyze               Run the static analyzer
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -B <prefix>             Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file
  -b <arg>                Pass -b <arg> to the linker on AIX
  -cc1-args <value>       pass cc1 options to depscan afterwards
  -CC                     Include comments from within macros in preprocessed output
  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.
  -cl-ext=<value>         OpenCL only. Enable or disable OpenCL extensions/optional features. The argument is a comma-separated sequence of one or more extension names, each prefixed by '+' or '-'.
  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.
  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.
  -cl-fp32-correctly-rounded-divide-sqrt
                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.
  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.
  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.
  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.
  -cl-no-stdinc           OpenCL only. Disables all standard includes containing non-native compiler types and functions.
  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.
  -cl-single-precision-constant
                          OpenCL only. Treat double precision floating-point constant as single precision constant.
  -cl-std=<value>         OpenCL language standard to compile for.
  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.
  -cl-uniform-work-group-size
                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel
  -cl-unsafe-math-optimizations
                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.
  --config=<file>         Specify configuration file
  --cuda-compile-host-device
                          Compile CUDA code for both host and device (default). Has no effect on non-CUDA compilations.
  --cuda-device-only      Compile CUDA code for device only
  --cuda-feature=<value>  Manually specify the CUDA feature to use
  --cuda-host-only        Compile CUDA code for host only. Has no effect on non-CUDA compilations.
  --cuda-include-ptx=<value>
                          Include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --cuda-noopt-device-debug
                          Enable device-side debug info generation. Disables ptxas optimizations.
  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation
  --cuda-path=<value>     CUDA installation path
  -cuid=<value>           An ID for compilation unit, which should be the same for the same compilation unit but different for different compilation units. It is used to externalize device-side static variables for single source offloading languages CUDA and HIP so that they can be accessed by the host code of the same compilation unit.
  -cxx-isystem <directory>
                          Add directory to the C++ SYSTEM include search path
  -C                      Include comments in preprocessed output
  -c                      Only run preprocess, compile, and assemble steps
  -darwin-target-variant-triple <value>
                          Specify the darwin target variant triple
  -darwin-target-variant <value>
                          Generate code for an additional runtime variant of the deployment target
  -dD                     Print macro definitions in -E mode in addition to normal output
  -dependency-dot <value> Filename to write DOT-formatted header dependencies to
  -dependency-file <value>
                          Filename (or -) to write dependency output to
  -dI                     Print include directives in -E mode in addition to normal output
  -dM                     Print macro definitions in -E mode instead of normal output
  -dsym-dir <dir>         Directory to output dSYM's (if any) to
  -dump-depscan-tree=<value>
                          emit the CAS identifier for the tree instead of the full -cc1
  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)
  -emit-ast               Emit Clang AST files for source inputs
  -emit-interface-stubs   Generate Interface Stub Files.
  -emit-llvm              Use the LLVM representation for assembler and object files
  -emit-merged-ifs        Generate Interface Stub Files, emit merged text not binary.
  --emit-static-lib       Enable linker job to emit a static library.
  --end-no-unused-arguments
                          Start emitting warnings for unused driver arguments
  --extract-api-ignores=<value>
                          Comma separated list of files containing a new line separated list of API symbols to ignore when extracting API information.
  -extract-api            Extract API information
  -E                      Only run the preprocessor
  -faapcs-bitfield-load   Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).
  -faapcs-bitfield-width  Follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -faddrsig               Emit an address-significance table
  -falign-loops=<N>       N must be a power of two. Align loops to the boundary
  -faligned-allocation    Enable C++17 aligned allocation functions
  -fallow-editor-placeholders
                          Treat editor placeholders as valid source code
  -faltivec-src-compat=<value>
                          Source-level compatibility for Altivec vectors (for PowerPC targets). This includes results of vector comparison (scalar for 'xl', vector for 'gcc') as well as behavior when initializing with a scalar (splatting for 'xl', element zero only for 'gcc'). For 'mixed', the compatibility is as 'gcc' for 'vector bool/vector pixel' and as 'xl' for other types. Current default is 'mixed'.
  -fansi-escape-codes     Use ANSI escape codes for diagnostics
  -fapinotes-cache-path=<directory>
                          Does nothing; API notes are no longer cached separately from modules
  -fapinotes-modules      Enable module-based external API notes support
  -fapinotes-swift-version=<version>
                          Specify the Swift version to use when filtering API notes
  -fapinotes              Enable external API notes support
  -fapple-kext            Use Apple's kernel extensions ABI
  -fapple-link-rtlib      Force linking the clang builtins runtime library
  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling
  -fapplication-extension Restrict code to those available for App Extensions
  -fapprox-func           Allow certain math function calls to be replaced with an approximately equivalent calculation
  -fasync-exceptions      Enable EH Asynchronous exceptions
  -fbasic-block-sections=<value>
                          Place each function's basic blocks in unique sections (ELF Only)
  -fbinutils-version=<major.minor>
                          Produced object files can use all ELF features supported by this binutils version and newer. If -fno-integrated-as is specified, the generated assembly will consider GNU as support. 'none' means that all ELF features can be used, regardless of binutils support. Defaults to 2.26.
  -fblocks                Enable the 'blocks' language feature
  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler
  -fbranch-target-identification
                          Emit branch target identification instructions for indirect branch destinations
  -fbuild-session-file=<file>
                          Use the last modification time of <file> as the build session timestamp
  -fbuild-session-timestamp=<time since Epoch in seconds>
                          Time when the current build session started
  -fbuiltin-module-map    Load the clang builtins module map file.
  -fc++-abi=<value>       C++ ABI to use. This will override the target C++ ABI.
  -fcall-saved-x10        Make the x10 register call-saved (AArch64 only)
  -fcall-saved-x11        Make the x11 register call-saved (AArch64 only)
  -fcall-saved-x12        Make the x12 register call-saved (AArch64 only)
  -fcall-saved-x13        Make the x13 register call-saved (AArch64 only)
  -fcall-saved-x14        Make the x14 register call-saved (AArch64 only)
  -fcall-saved-x15        Make the x15 register call-saved (AArch64 only)
  -fcall-saved-x18        Make the x18 register call-saved (AArch64 only)
  -fcall-saved-x8         Make the x8 register call-saved (AArch64 only)
  -fcall-saved-x9         Make the x9 register call-saved (AArch64 only)
  -fcf-protection=<value> Instrument control-flow architecture protection
  -fcf-protection         Enable cf-protection in 'full' mode
  -fchar8_t               Enable C++ builtin type char8_t
  -fclang-abi-compat=<version>
                          Attempt to match the ABI of Clang <version>
  -fcolor-diagnostics     Enable colors in diagnostics
  -fcomment-block-commands=<arg>
                          Treat each comma separated argument in <arg> as a documentation comment block command
  -fcommon                Place uninitialized global variables in a common block
  -fcomplete-member-pointers
                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fconvergent-functions  Assume functions may be convergent
  -fcoro-aligned-allocation
                          Prefer aligned allocation for C++ Coroutines
  -fcoroutines-ts         Enable support for the C++ Coroutines TS
  -fcoverage-compilation-dir=<value>
                          The compilation directory to embed in the coverage mapping.
  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis
  -fcoverage-prefix-map=<value>
                          remap file source paths in coverage mapping
  -fcrash-diagnostics-dir=<dir>
                          Put crash-report files in <dir>
  -fcrash-diagnostics=<value>
                          Set level of crash diagnostic reporting, (option: off, compiler, all)
  -fcrash-diagnostics     Enable crash diagnostic reporting (default)
  -fcs-profile-generate=<directory>
                          Generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcs-profile-generate   Generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fcuda-approx-transcendentals
                          Use approximate transcendental functions
  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces
  -fcxx-exceptions        Enable C++ exceptions
  -fcxx-modules           Enable modules for C++
  -fdata-sections         Place each data in its own section
  -fdebug-compilation-dir=<value>
                          The compilation directory to embed in the debug info
  -fdebug-default-version=<value>
                          Default DWARF version to use, if a -g option caused DWARF debug info to be produced
  -fdebug-info-for-profiling
                          Emit extra debug info to make sample profile more accurate
  -fdebug-macro           Emit macro debug information
  -fdebug-prefix-map=<value>
                          remap file source paths in debug info
  -fdebug-ranges-base-address
                          Use DWARF base address selection entries in .debug_ranges
  -fdebug-types-section   Place debug types in their own section (ELF Only)
  -fdeclspec              Allow __declspec as a keyword
  -fdelayed-template-parsing
                          Parse templated function definitions at the end of the translation unit
  -fdelete-null-pointer-checks
                          Treat usage of null pointers as undefined behavior (default)
  -fdepscan-daemon=<value>
                          Specify the path to the daemon to be used. Clang will use the daemon specified, rather than try to spawn its own based on parent processes.
  -fdepscan-include-tree  Set dep-scanner to produce the include tree
  -fdepscan-prefix-map-sdk=<new>
                          With -fdepscan, auto-detect the SDK path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map-toolchain=<new>
                          With -fdepscan, auto-detect the toolchain path on-disk and remap it to the given path (see -fdepscan-prefix-map=).
  -fdepscan-prefix-map=<old>=<new>
                          With -fdepscan, seamlessly filter the CAS filesystem to apply the given prefix, updating the command-line to match.
  -fdepscan-share-identifier <value>
                          Share depscan daemon for Clang invocations using the same string identifier.
  -fdepscan-share-parent=<value>
                          Share state based on the PID of the parent command if the name matches. See also -fdepscan-share-stop.
  -fdepscan-share-parent  Share state based on the PID of the parent command. See also -fdepscan-share-stop.
  -fdepscan-share-stop=<value>
                          Stop looking for the command named by -fdepscan-share if a process with the name of the provided argument is found first. Also blocks -fdepscan-share=parent if the parent has this name. E.g., -fdepscan -fdepscan-share=ninja -fdepscan-share-stop=cmake looks for 'ninja' and 'cmake' in the process tree; if 'ninja' is found first, state is shared based on ninja's PID; if 'cmake' is found first, state is not shared.
  -fdepscan-share=<value> If the argument is the name of a command in the process tree, share state based on its PID. E.g., -fdepscan -fdepscan-share=ninja will search for 'ninja' in the process tree and share state based on its PID if found. See also -fdepscan-share-stop.
  -fdepscan=<value>       Scan for dependencies ahead of compiling, generating a pruned CAS tree to send to -fcas-fs. Values are 'auto', 'daemon' (see -fdepscan-share and -fdepscan-share-parent), 'inline', or 'off' (default).
  -fdepscan               Turn on -fdepscan=auto.
  -fdiagnostics-absolute-paths
                          Print absolute paths in diagnostics
  -fdiagnostics-hotness-threshold=<value>
                          Prevent optimization remarks from being output if they do not have at least this profile count. Use 'auto' to apply the threshold from profile summary
  -fdiagnostics-misexpect-tolerance=<value>
                          Prevent misexpect diagnostics from being output if the profile counts are within N% of the expected. 
  -fdiagnostics-parseable-fixits
                          Print fix-its in machine parseable form
  -fdiagnostics-print-source-range-info
                          Print source range spans in numeric form
  -fdiagnostics-show-hotness
                          Enable profile hotness information in diagnostic line
  -fdiagnostics-show-note-include-stack
                          Display include stacks for diagnostic notes
  -fdiagnostics-show-option
                          Print option name with mappable diagnostics
  -fdiagnostics-show-template-tree
                          Print a template comparison tree for differing templates
  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)
  -fdirect-access-external-data
                          Don't use GOT indirection to reference external data symbols
  -fdiscard-value-names   Discard value names in LLVM IR
  -fdollars-in-identifiers
                          Allow '$' in identifiers
  -fdouble-square-bracket-attributes
                          Enable '[[]]' attributes in all C and C++ language modes
  -fdriver-only           Only run the driver.
  -fdwarf-exceptions      Use DWARF style exceptions
  -feliminate-unused-debug-types
                          Do not emit  debug info for defined but unused types
  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker
  -fembed-bitcode=<option>
                          Embed LLVM bitcode
  -fembed-bitcode         Embed LLVM IR bitcode as data
  -fembed-offload-object=<value>
                          Embed Offloading device-side binary into host object file as a section.
  -femit-all-decls        Emit all declarations, even if unused
  -femit-dwarf-unwind=<value>
                          When to emit DWARF unwind (EH frame) info
  -femulated-tls          Use emutls functions to access thread_local variables
  -fenable-matrix         Enable matrix data type and related builtin functions
  -fexceptions            Enable support for exception handling
  -fexperimental-library  Control whether unstable and experimental library features are enabled. This option enables various library features that are either experimental (also known as TSes), or have been but are not stable yet in the selected Standard Library implementation. It is not recommended to use this option in production code, since neither ABI nor API stability are guaranteed. This is intended to provide a preview of features that will ship in the future for experimentation purposes
  -fexperimental-new-constant-interpreter
                          Enable the experimental new constant interpreter
  -fexperimental-relative-c++-abi-vtables
                          Use the experimental C++ class ABI for classes with virtual tables
  -fexperimental-sanitize-metadata=<value>
                          Specify the type of metadata to emit for binary analysis sanitizers
  -fexperimental-strict-floating-point
                          Enables experimental strict floating point in LLVM.
  -fextend-arguments=<value>
                          Controls how scalar integer arguments are extended in calls to unprototyped and varargs functions
  -ffast-math             Allow aggressive, lossy floating-point optimizations
  -ffile-compilation-dir=<value>
                          The compilation directory to embed in the debug info and coverage mapping.
  -ffile-prefix-map=<value>
                          remap file source paths in debug info, predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -ffile-reproducible     Use the target's platform-specific path separator character when expanding the __FILE__ macro
  -ffine-grained-bitfield-accesses
                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.
  -ffinite-loops          Assume all loops are finite.
  -ffixed-a0              Reserve the a0 register (M68k only)
  -ffixed-a1              Reserve the a1 register (M68k only)
  -ffixed-a2              Reserve the a2 register (M68k only)
  -ffixed-a3              Reserve the a3 register (M68k only)
  -ffixed-a4              Reserve the a4 register (M68k only)
  -ffixed-a5              Reserve the a5 register (M68k only)
  -ffixed-a6              Reserve the a6 register (M68k only)
  -ffixed-d0              Reserve the d0 register (M68k only)
  -ffixed-d1              Reserve the d1 register (M68k only)
  -ffixed-d2              Reserve the d2 register (M68k only)
  -ffixed-d3              Reserve the d3 register (M68k only)
  -ffixed-d4              Reserve the d4 register (M68k only)
  -ffixed-d5              Reserve the d5 register (M68k only)
  -ffixed-d6              Reserve the d6 register (M68k only)
  -ffixed-d7              Reserve the d7 register (M68k only)
  -ffixed-point           Enable fixed point types
  -ffixed-r19             Reserve register r19 (Hexagon only)
  -ffixed-r9              Reserve the r9 register (ARM only)
  -ffixed-x10             Reserve the x10 register (AArch64/RISC-V only)
  -ffixed-x11             Reserve the x11 register (AArch64/RISC-V only)
  -ffixed-x12             Reserve the x12 register (AArch64/RISC-V only)
  -ffixed-x13             Reserve the x13 register (AArch64/RISC-V only)
  -ffixed-x14             Reserve the x14 register (AArch64/RISC-V only)
  -ffixed-x15             Reserve the x15 register (AArch64/RISC-V only)
  -ffixed-x16             Reserve the x16 register (AArch64/RISC-V only)
  -ffixed-x17             Reserve the x17 register (AArch64/RISC-V only)
  -ffixed-x18             Reserve the x18 register (AArch64/RISC-V only)
  -ffixed-x19             Reserve the x19 register (AArch64/RISC-V only)
  -ffixed-x1              Reserve the x1 register (AArch64/RISC-V only)
  -ffixed-x20             Reserve the x20 register (AArch64/RISC-V only)
  -ffixed-x21             Reserve the x21 register (AArch64/RISC-V only)
  -ffixed-x22             Reserve the x22 register (AArch64/RISC-V only)
  -ffixed-x23             Reserve the x23 register (AArch64/RISC-V only)
  -ffixed-x24             Reserve the x24 register (AArch64/RISC-V only)
  -ffixed-x25             Reserve the x25 register (AArch64/RISC-V only)
  -ffixed-x26             Reserve the x26 register (AArch64/RISC-V only)
  -ffixed-x27             Reserve the x27 register (AArch64/RISC-V only)
  -ffixed-x28             Reserve the x28 register (AArch64/RISC-V only)
  -ffixed-x29             Reserve the x29 register (AArch64/RISC-V only)
  -ffixed-x2              Reserve the x2 register (AArch64/RISC-V only)
  -ffixed-x30             Reserve the x30 register (AArch64/RISC-V only)
  -ffixed-x31             Reserve the x31 register (AArch64/RISC-V only)
  -ffixed-x3              Reserve the x3 register (AArch64/RISC-V only)
  -ffixed-x4              Reserve the x4 register (AArch64/RISC-V only)
  -ffixed-x5              Reserve the x5 register (AArch64/RISC-V only)
  -ffixed-x6              Reserve the x6 register (AArch64/RISC-V only)
  -ffixed-x7              Reserve the x7 register (AArch64/RISC-V only)
  -ffixed-x8              Reserve the x8 register (AArch64/RISC-V only)
  -ffixed-x9              Reserve the x9 register (AArch64/RISC-V only)
  -fforce-dwarf-frame     Always emit a debug frame section
  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization
  -fforce-enable-int128   Enable support for int128_t type
  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (fuses across statements disregarding pragmas) | on (only fuses in the same statement unless dictated by pragmas) | off (never fuses) | fast-honor-pragmas (fuses across statements unless diectated by pragmas). Default is 'fast' for CUDA, 'fast-honor-pragmas' for HIP, and 'on' otherwise.
  -ffp-eval-method=<value>
                          Specifies the evaluation method to use for floating-point arithmetic.
  -ffp-exception-behavior=<value>
                          Specifies the exception behavior of floating-point operations.
  -ffp-model=<value>      Controls the semantics of floating-point calculations.
  -ffreestanding          Assert that the compilation takes place in a freestanding environment
  -ffuchsia-api-level=<value>
                          Set Fuchsia API level
  -ffunction-sections     Place each function in its own section
  -fgeneric-block-helpers Use generic block helpers for copying/destroying blocks
  -fglobal-isel           Enables the global instruction selector
  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard
  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime
  -fgnu89-inline          Use the gnu89 inline semantics
  -fgnuc-version=<value>  Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)
  -fgpu-allow-device-init Allow device side init function in HIP (experimental)
  -fgpu-default-stream=<value>
                          Specify default stream. The default value is 'legacy'. (HIP only)
  -fgpu-defer-diag        Defer host/device related diagnostic messages for CUDA/HIP
  -fgpu-flush-denormals-to-zero
                          Flush denormal floating point values to zero in CUDA/HIP device mode.
  -fgpu-rdc               Generate relocatable device code, also known as separate compilation mode
  -fgpu-sanitize          Enable sanitizer for AMDGPU target
  -fhip-fp32-correctly-rounded-divide-sqrt
                          Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fhip-kernel-arg-name   Specify that kernel argument names are preserved (HIP only)
  -fhip-new-launch-api    Use new kernel launching API for HIP
  -fignore-exceptions     Enable support for ignoring exception handling constructs
  -fimplicit-module-maps  Implicitly search the file system for module map files.
  -fin-descriptor-block-flags
                          Emit in-descriptor block flags
  -finline-functions      Inline suitable functions
  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline
  -finline-max-stacksize=<value>
                          Suppress inlining of functions whose stack size exceeds the given value
  -finput-charset=<value> Specify the default character set for source files
  -finstrument-function-entry-bare
                          Instrument function entry only, after inlining, without arguments to the instrumentation call
  -finstrument-functions-after-inlining
                          Like -finstrument-functions, but insert the calls after inlining
  -finstrument-functions  Generate calls to instrument function entry and exit
  -fintegrated-as         Enable the integrated assembler
  -fintegrated-cc1        Run cc1 in-process
  -fintegrated-objemitter Use internal machine object code emitter.
  -fjmc                   Enable just-my-code debugging
  -fjump-tables           Use jump tables for lowering switches
  -fkeep-static-consts    Keep static const variables if unused
  -flax-vector-conversions=<value>
                          Enable implicit vector bit-casts
  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)
  -flto=auto              Enable LTO in 'full' mode
  -flto=jobserver         Enable LTO in 'full' mode
  -flto=<value>           Set LTO mode
  -flto                   Enable LTO in 'full' mode
  -fmacro-prefix-map=<value>
                          remap file source paths in predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.
  -fmath-errno            Require math functions to indicate errors by setting errno
  -fmax-tokens=<value>    Max total number of preprocessed tokens for -Wmax-tokens.
  -fmax-type-align=<value>
                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment
  -fmemory-profile=<directory>
                          Enable heap memory profiling and dump results into <directory>
  -fmemory-profile        Enable heap memory profiling
  -fmerge-all-constants   Allow merging of constants
  -fmessage-length=<value>
                          Format message diagnostics so that they fit within N columns
  -fminimize-whitespace   Minimize whitespace when emitting preprocessor output
  -fmodule-file=[<name>=]<file>
                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.
  -fmodule-header=<kind>  Build a C++20 Header Unit from a header that should be found in the user (fmodule-header=user) or system (fmodule-header=system) search path.
  -fmodule-header         Build a C++20 Header Unit from a header.
  -fmodule-map-file=<file>
                          Load this module map file
  -fmodule-name=<name>    Specify the name of the module to build
  -fmodule-related-to-pch Mark module as related to a PCH
  -fmodules-cache-path=<directory>
                          Specify the module cache path
  -fmodules-decluse       Require declaration of modules used within a module
  -fmodules-disable-diagnostic-validation
                          Disable validation of the diagnostic options when loading the module
  -fmodules-ignore-macro=<value>
                          Ignore the definition of the given macro when building and loading modules
  -fmodules-prune-after=<seconds>
                          Specify the interval (in seconds) after which a module file will be considered unused
  -fmodules-prune-interval=<seconds>
                          Specify the interval (in seconds) between attempts to prune the module cache
  -fmodules-search-all    Search even non-imported modules to resolve references
  -fmodules-strict-decluse
                          Like -fmodules-decluse but requires all headers to be in modules
  -fmodules-ts            Enable support for the C++ Modules TS
  -fmodules-user-build-path <directory>
                          Specify the module user build path
  -fmodules-validate-input-files-content
                          Validate PCM input files based on content if mtime differs
  -fmodules-validate-once-per-build-session
                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session
  -fmodules-validate-system-headers
                          Validate the system headers that a module depends on when loading the module
  -fmodules               Enable the 'modules' language feature
  -fms-compatibility-version=<value>
                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fms-compatibility      Enable full Microsoft Visual C++ compatibility
  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler
  -fms-hotpatch           Ensure that all functions can be hotpatched at runtime
  -fms-runtime-lib=<value>
                          Select Windows run-time library
  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'
  -fnew-infallible        Enable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-aapcs-bitfield-width
                          Do not follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -fno-access-control     Disable C++ access control
  -fno-addrsig            Don't emit an address-significance table
  -fno-apinotes-modules   Disable module-based external API notes support
  -fno-apinotes           Disable external API notes support
  -fno-assume-sane-operator-new
                          Don't assume that C++'s global operator new can't alias any pointer
  -fno-autolink           Disable generation of linker directives for automatic library linking
  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function
  -fno-builtin            Disable implicit builtin knowledge of functions
  -fno-c++-static-destructors
                          Disable C++ static destructor registration
  -fno-char8_t            Disable C++ builtin type char8_t
  -fno-color-diagnostics  Disable colors in diagnostics
  -fno-common             Compile common globals like normal definitions
  -fno-complete-member-pointers
                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings
  -fno-constant-nsarray-literals
                          Disable creation of CodeFoundation-type constant initializer `NSArray`s from array literals
  -fno-constant-nsdictionary-literals
                          Disable creation of CodeFoundation-type constant initializer `NSDictionary`s from dictionary literals
  -fno-constant-nsnumber-literals
                          Disable creation of CodeFoundation-type constant initializer `NSNumber`s from number literals
  -fno-coverage-mapping   Disable code coverage analysis
  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash
  -fno-cuda-approx-transcendentals
                          Don't use approximate transcendental functions
  -fno-cxx-modules        Disable modules for C++
  -fno-debug-macro        Do not emit macro debug information
  -fno-declspec           Disallow __declspec as a keyword
  -fno-delayed-template-parsing
                          Disable delayed template parsing
  -fno-delete-null-pointer-checks
                          Do not treat usage of null pointers as undefined behavior
  -fno-depscan-share      Turn off -fdepscan-share and -fdepscan-share-parent.
  -fno-diagnostics-fixit-info
                          Do not include fixit information in diagnostics
  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'
  -fno-direct-access-external-data
                          Use GOT indirection to reference external data symbols
  -fno-discard-value-names
                          Do not discard value names in LLVM IR
  -fno-dollars-in-identifiers
                          Disallow '$' in identifiers
  -fno-double-square-bracket-attributes
                          Disable '[[]]' attributes in all C and C++ language modes
  -fno-elide-constructors Disable C++ copy constructor elision
  -fno-elide-type         Do not elide types when printing diagnostics
  -fno-eliminate-unused-debug-types
                          Emit  debug info for defined but unused types
  -fno-exceptions         Disable support for exception handling
  -fno-experimental-relative-c++-abi-vtables
                          Do not use the experimental C++ class ABI for classes with virtual tables
  -fno-experimental-sanitize-metadata=<value>
                          Disable emitting metadata for binary analysis sanitizers
  -fno-file-reproducible  Use the host's platform-specific path separator character when expanding the __FILE__ macro
  -fno-fine-grained-bitfield-accesses
                          Use large-integer access for consecutive bitfield runs.
  -fno-finite-loops       Do not assume that any loop is finite.
  -fno-fixed-point        Disable fixed point types
  -fno-force-enable-int128
                          Disable support for int128_t type
  -fno-generic-block-helpers
                          Don't use generic block helpers for copying/destroying blocks
  -fno-global-isel        Disables the global instruction selector
  -fno-gnu-inline-asm     Disable GNU style inline asm
  -fno-gpu-allow-device-init
                          Don't allow device side init function in HIP (experimental)
  -fno-gpu-defer-diag     Don't defer host/device related diagnostic messages for CUDA/HIP
  -fno-hip-fp32-correctly-rounded-divide-sqrt
                          Don't specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)
  -fno-hip-kernel-arg-name
                          Don't specify that kernel argument names are preserved (HIP only)
  -fno-hip-new-launch-api Don't use new kernel launching API for HIP
  -fno-in-descriptor-block-flags
                          Don't emit in-descriptor block flags
  -fno-integrated-as      Disable the integrated assembler
  -fno-integrated-cc1     Spawn a separate process for each cc1
  -fno-integrated-objemitter
                          Use external machine object code emitter.
  -fno-jump-tables        Do not use jump tables for lowering switches
  -fno-keep-static-consts Don't keep static const variables if unused
  -fno-knr-functions      Disable support for K&R C function declarations
  -fno-lto                Disable LTO mode (default)
  -fno-memory-profile     Disable heap memory profiling
  -fno-merge-all-constants
                          Disallow merging of constants
  -fno-modules-check-relocated<value>
                          Skip checks for relocated modules when loading PCM files
  -fno-new-infallible     Disable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.
  -fno-objc-infer-related-result-type
                          do not infer Objective-C related result type based on method family
  -fno-offload-lto        Disable LTO mode (default) for offload compilation
  -fno-openmp-extensions  Disable all Clang extensions for OpenMP directives and clauses
  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators
  -fno-optimize-sibling-calls
                          Disable tail call optimization, keeping the call stack accurate
  -fno-pch-codegen        Do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fno-pch-debuginfo      Do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fno-plt                Use GOT indirection instead of PLT to make external function calls (x86 only)
  -fno-preserve-as-comments
                          Do not preserve comments in inline assembly
  -fno-profile-generate   Disable generation of profile instrumentation.
  -fno-profile-instr-generate
                          Disable generation of profile instrumentation.
  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization
  -fno-pseudo-probe-for-profiling
                          Do not emit pseudo probes for sample profiling
  -fno-ptrauth-abi-version
                          Disable Pointer Authentication ABI versioning
  -fno-ptrauth-kernel-abi-version
                          Disable Pointer Authentication kernel ABI versioning
  -fno-register-global-dtors-with-atexit
                          Don't use atexit or __cxa_atexit to register global destructors
  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags
  -fno-rtti-data          Disable generation of RTTI data
  -fno-rtti               Disable generation of rtti information
  -fno-sanitize-address-globals-dead-stripping
                          Disable linker dead stripping of globals in AddressSanitizer
  -fno-sanitize-address-outline-instrumentation
                          Use default code inlining logic for the address sanitizer
  -fno-sanitize-address-poison-custom-array-cookie
                          Disable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fno-sanitize-address-use-after-scope
                          Disable use-after-scope detection in AddressSanitizer
  -fno-sanitize-address-use-odr-indicator
                          Disable ODR indicator globals
  -fno-sanitize-cfi-canonical-jump-tables
                          Do not make the jump table addresses canonical in the symbol table
  -fno-sanitize-cfi-cross-dso
                          Disable control flow integrity (CFI) checks for cross-DSO calls.
  -fno-sanitize-coverage=<value>
                          Disable features of coverage instrumentation for Sanitizers
  -fno-sanitize-hwaddress-experimental-aliasing
                          Disable aliasing mode in HWAddressSanitizer
  -fno-sanitize-ignorelist
                          Don't use ignorelist file for sanitizers
  -fno-sanitize-memory-param-retval
                          Disable detection of uninitialized parameters and return values
  -fno-sanitize-memory-track-origins
                          Disable origins tracking in MemorySanitizer
  -fno-sanitize-memory-use-after-dtor
                          Disable use-after-destroy detection in MemorySanitizer
  -fno-sanitize-recover=<value>
                          Disable recovery for specified sanitizers
  -fno-sanitize-stable-abi
                          Conventional ABI instrumentation for sanitizer runtime. Default: Conventional
  -fno-sanitize-stats     Disable sanitizer statistics gathering.
  -fno-sanitize-thread-atomics
                          Disable atomic operations instrumentation in ThreadSanitizer
  -fno-sanitize-thread-func-entry-exit
                          Disable function entry/exit instrumentation in ThreadSanitizer
  -fno-sanitize-thread-memory-access
                          Disable memory access instrumentation in ThreadSanitizer
  -fno-sanitize-trap=<value>
                          Disable trapping for specified sanitizers
  -fno-sanitize-trap      Disable trapping for all sanitizers
  -fno-short-wchar        Force wchar_t to be an unsigned int
  -fno-show-column        Do not include column number on diagnostics
  -fno-show-source-location
                          Do not include source location information with diagnostics
  -fno-signed-char        char is unsigned
  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros
  -fno-spell-checking     Disable spell-checking
  -fno-split-machine-functions
                          Disable late function splitting using profile information (x86 ELF)
  -fno-split-stack        Wouldn't use segmented stack
  -fno-stack-check        Disable stack checking
  -fno-stack-clash-protection
                          Disable stack clash protection
  -fno-stack-protector    Disable the use of stack protectors
  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary
  -fno-strict-float-cast-overflow
                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions
  -fno-strict-return      Don't treat control flow paths that fall off the end of a non-void function as unreachable
  -fno-sycl               Disables SYCL kernels compilation for device
  -fno-temp-file          Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes
  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe
  -fno-trap-function-returns
                          The trap function specified by -ftrap-function never returns
  -fno-trigraphs          Do not process trigraph sequences
  -fno-typed-cxx-new-delete
                          Disable use of typed variants of C++ new() and delete()
  -fno-typed-memory-operations-experimental
                          Disable Typed Memory Operations call site rewriting
  -fno-unique-section-names
                          Don't use unique names for text and data sections
  -fno-unroll-loops       Turn off loop unroller
  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors
  -fno-use-init-array     Use .ctors/.dtors instead of .init_array/.fini_array
  -fno-visibility-inlines-hidden-static-local-var
                          Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)
  -fno-xray-function-index
                          Omit function index section at the expense of single-function patching performance
  -fno-zero-initialized-in-bss
                          Don't place zero initialized data in BSS
  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc
  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers
  -fobjc-disable-direct-methods-for-testing
                          Ignore attribute objc_direct so that direct methods can be tested
  -fobjc-encode-cxx-class-template-spec
                          Fully encode c++ class template specialization
  -fobjc-exceptions       Enable Objective-C exceptions
  -fobjc-relative-method-lists
                          Enable relative method lists
  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version
  -fobjc-weak             Enable ARC-style weak references in Objective-C
  -foffload-lto=<value>   Set LTO mode for offload compilation
  -foffload-lto           Enable LTO in 'full' mode for offload compilation
  -fopenmp-extensions     Enable all Clang extensions for OpenMP directives and clauses
  -fopenmp-implicit-rpath Set rpath on OpenMP executables
  -fopenmp-offload-mandatory
                          Do not create a host fallback if offloading to the device fails.
  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.
  -fopenmp-target-debug   Enable debugging in the OpenMP offloading device RTL
  -fopenmp-targets=<value>
                          Specify comma-separated list of triples OpenMP offloading targets to be supported
  -fopenmp-version=<value>
                          Set OpenMP version (e.g. 45 for OpenMP 4.5, 50 for OpenMP 5.0). Default value is 50.
  -fopenmp                Parse OpenMP pragmas and generate parallel code.
  -foptimization-record-file=<file>
                          Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.
  -foptimization-record-passes=<regex>
                          Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)
  -forder-file-instrumentation
                          Generate instrumented code to collect order file into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fpack-struct=<value>   Specify the default maximum struct packing alignment
  -fpascal-strings        Recognize and construct Pascal-style string literals
  -fpass-plugin=<dsopath> Load pass plugin from a dynamic shared object file (only with new pass manager).
  -fpatchable-function-entry=<N,M>
                          Generate M NOPs before function entry and N-M NOPs after function entry
  -fpcc-struct-return     Override the default ABI to return all structs on the stack
  -fpch-codegen           Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fpch-debuginfo         Generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fpch-instantiate-templates
                          Instantiate templates already while building a PCH
  -fpch-validate-input-files-content
                          Validate PCH input files based on content if mtime differs
  -fplugin-arg-<name>-<arg>
                          Pass <arg> to plugin <name>
  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)
  -fprebuilt-implicit-modules
                          Look up implicit modules in the prebuilt module path
  -fprebuilt-module-path=<directory>
                          Specify the prebuilt module path
  -fproc-stat-report=<value>
                          Save subprocess statistics to the given file
  -fproc-stat-report<value>
                          Print subprocess statistics
  -fprofile-exclude-files=<value>
                          Instrument only functions from files where names don't match all the regexes separated by a semi-colon
  -fprofile-filter-files=<value>
                          Instrument only functions from files where names match any regex separated by a semi-colon
  -fprofile-function-groups=<N>
                          Partition functions into N groups and select only functions in group i to be instrumented using -fprofile-selected-function-group
  -fprofile-generate=<directory>
                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate=<file>
                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instr-generate
                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -fprofile-instr-use=<value>
                          Use instrumentation data for profile-guided optimization
  -fprofile-list=<value>  Filename defining the list of functions/files to instrument
  -fprofile-remapping-file=<file>
                          Use the remappings described in <file> to match the profile data against names in the program
  -fprofile-sample-accurate
                          Specifies that the sample profile is accurate
  -fprofile-sample-use=<value>
                          Enable sample-based profile guided optimizations
  -fprofile-selected-function-group=<i>
                          Partition functions into N groups using -fprofile-function-groups and select only functions in group i to be instrumented. The valid range is 0 to N-1 inclusive
  -fprofile-update=<method>
                          Set update method of profile counters
  -fprofile-use=<pathname>
                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.
  -fprotect-parens        Determines whether the optimizer honors parentheses when floating-point expressions are evaluated
  -fpseudo-probe-for-profiling
                          Emit pseudo probes for sample profiling
  -fptrauth-abi-version=<value>
                          Pointer Authentication ABI version
  -fptrauth-auth-traps    Enable traps on authentication failures
  -fptrauth-block-descriptor-pointers
                          enable signing block descriptors
  -fptrauth-calls         Enable signing and authentication of all indirect calls
  -fptrauth-function-pointer-type-discrimination
                          Enabling type discrimination on C function pointers
  -fptrauth-indirect-gotos
                          Enable signing and authentication of indirect goto targets
  -fptrauth-intrinsics    Enable pointer-authentication intrinsics
  -fptrauth-kernel-abi-version
                          Enable Pointer Authentication kernel ABI version
  -fptrauth-objc-class-ro Enable signing and authentication for ObjC class_ro pointers
  -fptrauth-objc-interface-sel
                          Enable signing and authentication of Objective-C object's 'SEL' fields
  -fptrauth-objc-isa-masking
                          pre- and post-authentication masking mode of objective-c isa pointers
  -fptrauth-objc-isa-mode=<value>
                          Authentication mode for ObjC isa field. Full auth if unspecified
  -fptrauth-objc-isa      Enable signing and authentication of Objective-C object's 'isa' field
  -fptrauth-returns       Enable signing and authentication of return addresses
  -fptrauth-soft          Enable software lowering of pointer authentication
  -fptrauth-vtable-pointer-address-discrimination
                          Enable address discrimination of vtable pointers
  -fptrauth-vtable-pointer-type-discrimination
                          Enable type discrimination of vtable pointers
  -frandomize-layout-seed-file=<file>
                          File holding the seed used by the randomize structure layout feature
  -frandomize-layout-seed=<seed>
                          The seed used by the randomize structure layout feature
  -freciprocal-math       Allow division operations to be reassociated
  -freg-struct-return     Override the default ABI to return small structs in registers
  -fregister-global-dtors-with-atexit
                          Use atexit or __cxa_atexit to register global destructors
  -frelaxed-template-template-args
                          Enable C++17 relaxed template template argument matching
  -freroll-loops          Turn on loop reroller
  -fropi                  Generate read-only position independent code (ARM only)
  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags
  -frwpi                  Generate read-write position independent code (ARM only)
  -fsafe-buffer-usage-suggestions
                          Display suggestions to update code associated with -Wunsafe-buffer-usage warnings
  -fsanitize-address-destructor=<value>
                          Set destructor type used in ASan instrumentation
  -fsanitize-address-field-padding=<value>
                          Level of field padding for AddressSanitizer
  -fsanitize-address-globals-dead-stripping
                          Enable linker dead stripping of globals in AddressSanitizer
  -fsanitize-address-outline-instrumentation
                          Always generate function calls for address sanitizer instrumentation
  -fsanitize-address-poison-custom-array-cookie
                          Enable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fsanitize-address-use-after-return=<mode>
                          Select the mode of detecting stack use-after-return in AddressSanitizer
  -fsanitize-address-use-after-scope
                          Enable use-after-scope detection in AddressSanitizer
  -fsanitize-address-use-odr-indicator
                          Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size
  -fsanitize-blacklist=<value>
                          Alias for -fsanitize-ignorelist=
  -fsanitize-cfi-canonical-jump-tables
                          Make the jump table addresses canonical in the symbol table
  -fsanitize-cfi-cross-dso
                          Enable control flow integrity (CFI) checks for cross-DSO calls.
  -fsanitize-cfi-icall-generalize-pointers
                          Generalize pointers in CFI indirect call type signature checks
  -fsanitize-coverage-allowlist=<value>
                          Restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones
  -fsanitize-coverage-ignorelist=<value>
                          Disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones
  -fsanitize-coverage=<value>
                          Specify the type of coverage instrumentation for Sanitizers
  -fsanitize-hwaddress-abi=<value>
                          Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.
  -fsanitize-hwaddress-experimental-aliasing
                          Enable aliasing mode in HWAddressSanitizer
  -fsanitize-ignorelist=<value>
                          Path to ignorelist file for sanitizers
  -fsanitize-memory-param-retval
                          Enable detection of uninitialized parameters and return values
  -fsanitize-memory-track-origins=<value>
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-track-origins
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-use-after-dtor
                          Enable use-after-destroy detection in MemorySanitizer
  -fsanitize-memtag-mode=<value>
                          Set default MTE mode to 'sync' (default) or 'async'
  -fsanitize-recover=<value>
                          Enable recovery for specified sanitizers
  -fsanitize-stable-abi   Stable  ABI instrumentation for sanitizer runtime. Default: Conventional
  -fsanitize-stats        Enable sanitizer statistics gathering.
  -fsanitize-system-blacklist=<value>
                          Alias for -fsanitize-system-ignorelist=
  -fsanitize-system-ignorelist=<value>
                          Path to system ignorelist file for sanitizers
  -fsanitize-thread-atomics
                          Enable atomic operations instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-func-entry-exit
                          Enable function entry/exit instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-memory-access
                          Enable memory access instrumentation in ThreadSanitizer (default)
  -fsanitize-trap=<value> Enable trapping for specified sanitizers
  -fsanitize-trap         Enable trapping for all sanitizers
  -fsanitize-undefined-strip-path-components=<number>
                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.
  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks
  -fsave-optimization-record=<format>
                          Generate an optimization record file in a specific format
  -fsave-optimization-record
                          Generate a YAML optimization record file
  -fseh-exceptions        Use SEH style exceptions
  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values
  -fshort-wchar           Force wchar_t to be a short unsigned int
  -fshow-overloads=<value>
                          Which overload candidates to show when overload resolution fails. Defaults to 'all'
  -fshow-skipped-includes Show skipped includes in -H output.
  -fsigned-char           char is signed
  -fsized-deallocation    Enable C++14 sized global deallocation functions
  -fsjlj-exceptions       Use SjLj style exceptions
  -fslp-vectorize         Enable the superword-level parallelism vectorization passes
  -fsmall-block-descriptors
                          Enable small block descriptors
  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF
  -fsplit-lto-unit        Enables splitting of the LTO unit
  -fsplit-machine-functions
                          Enable late function splitting using profile information (x86 ELF)
  -fsplit-stack           Use segmented stack
  -fstack-check           Enable stack checking
  -fstack-clash-protection
                          Enable stack clash protection
  -fstack-protector-all   Enable stack protectors for all functions
  -fstack-protector-strong
                          Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable
  -fstack-protector       Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca , which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable. A function with a stack protector has a guard value added to the stack frame that is checked on function exit. The guard value must be positioned in the stack frame such that a buffer overflow from a vulnerable variable will overwrite the guard value before overwriting the function's return address. The reference stack guard value is stored in a global variable.
  -fstack-size-section    Emit section containing metadata on function stack sizes
  -fstack-usage           Emit .su file containing information on function stack sizes
  -fstandalone-debug      Emit full debug info for all types used by the program
  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range
  -fstrict-flex-arrays=<n>
                          Enable optimizations based on the strict definition of flexible arrays
  -fstrict-float-cast-overflow
                          Assume that overflowing float-to-int casts are undefined (default)
  -fstrict-vtable-pointers
                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects
  -fsuppress-conflicting-types
                          Ignore errors from conflicting types in function declarations
  -fswift-async-fp=<option>
                          Control emission of Swift async extended frame info
  -fsycl                  Enables SYCL kernels compilation for device
  -fsyntax-only           Run the preprocessor, parser and semantic analysis stages
  -fsystem-module         Build this module as a system module. Only used with -emit-module
  -ftarget-variant-availability-checks
                          Enable availability checks for the target variant platform
  -fthin-link-bitcode=<value>
                          Write minimized bitcode to <file> for the ThinLTO thin link only
  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index
  -ftime-report=<value>   (For new pass manager) 'per-pass': one report for each pass; 'per-pass-run': one report for each pass invocation
  -ftime-trace-granularity=<value>
                          Minimum time granularity (in microseconds) traced by time profiler
  -ftime-trace=<value>    Similar to -ftime-trace. Specify the JSON file or a directory which will contain the JSON file
  -ftime-trace            Turn on time profiler. Generates JSON file based on output filename.
  -ftrap-function-returns The trap function specified by -ftrap-function may return normally
  -ftrap-function=<value> Issue call to specified function rather than a trap instruction
  -ftrapv-handler=<function name>
                          Specify the function to be called on overflow
  -ftrapv                 Trap on integer overflow
  -ftrigraphs             Process trigraph sequences
  -ftrivial-auto-var-init-skip-cpp-obj
                          do not auto-initialize objects initialized by a C++ constructor
  -ftrivial-auto-var-init-skip-non-pod
                          do not auto-initialize non-POD objects
  -ftrivial-auto-var-init-skip-non-ptr-array
                          do not auto-initialize arrays other than arrays of pointers
  -ftrivial-auto-var-init-skip-stl
                          do not auto-initialize variables in STL namespace
  -ftrivial-auto-var-init-stop-after=<value>
                          Stop initializing trivial automatic stack variables after the specified number of instances
  -ftrivial-auto-var-init=<value>
                          Initialize trivial automatic stack variables. Defaults to 'uninitialized'
  -ftrivial-auto-var-zero-init-max-size=<value>
                          Zero initialize only first N bytes of each stack variable; 0 value turns off the limit.
  -ftyped-cxx-new-delete  Enable use of typed variants of C++ new() and delete()
  -ftyped-memory-operations-experimental
                          Enable Typed Memory Operations call site rewriting
  -funique-basic-block-section-names
                          Use unique names for basic block sections (ELF Only)
  -funique-internal-linkage-names
                          Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path
  -funroll-loops          Turn on loop unroller
  -fuse-cuid=<value>      Method to generate ID's for compilation units for single source offloading languages CUDA and HIP: 'hash' (ID's generated by hashing file path and command line options) | 'random' (ID's generated as random numbers) | 'none' (disabled). Default is 'hash'. This option will be overridden by option '-cuid=[ID]' if it is specified.
  -fuse-line-directives   Use #line in preprocessed output
  -fvalidate-ast-input-files-content
                          Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical
  -fveclib=<value>        Use the given vector functions library
  -fvectorize             Enable the loop vectorization passes
  -fverbose-asm           Generate verbose assembly output
  -fvirtual-function-elimination
                          Enables dead virtual function elimination optimization. Requires -flto=full
  -fvisibility-dllexport=<value>
                          The visibility for dllexport definitions [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-dllimport=<value>
                          The visibility for dllimport external declarations [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-nodllstorageclass=<value>
                          The visibility for external declarations without an explicit DLL dllstorageclass [-fvisibility-from-dllstorageclass]
  -fvisibility-from-dllstorageclass
                          Set the visibility of symbols in the generated code from their DLL storage class
  -fvisibility-global-new-delete-hidden
                          Give global C++ operator new and delete declarations hidden visibility
  -fvisibility-inlines-hidden-static-local-var
                          When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default
  -fvisibility-inlines-hidden
                          Give inline C++ member functions hidden visibility by default
  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default
  -fvisibility-nodllstorageclass=<value>
                          The visibility for definitions without an explicit DLL export class [-fvisibility-from-dllstorageclass]
  -fvisibility=<value>    Set the default symbol visibility for all global definitions
  -fwasm-exceptions       Use WebAssembly style exceptions
  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto
  -fwrapv                 Treat signed integer overflow as two's complement
  -fwritable-strings      Store string literals as writable data
  -fxl-pragma-pack        Enable IBM XL #pragma pack handling
  -fxray-always-emit-customevents
                          Always emit __xray_customevent(...) calls even if the containing function is not always instrumented
  -fxray-always-emit-typedevents
                          Always emit __xray_typedevent(...) calls even if the containing function is not always instrumented
  -fxray-always-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.
  -fxray-attr-list=<value>
                          Filename defining the list of functions/types for imbuing XRay attributes.
  -fxray-function-groups=<value>
                          Only instrument 1 of N groups
  -fxray-ignore-loops     Don't instrument functions with loops unless they also meet the minimum function size
  -fxray-instruction-threshold=<value>
                          Sets the minimum function size to instrument with XRay
  -fxray-instrumentation-bundle=<value>
                          Select which XRay instrumentation points to emit. Options: all, none, function-entry, function-exit, function, custom. Default is 'all'.  'function' includes both 'function-entry' and 'function-exit'.
  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit
  -fxray-link-deps        Tells clang to add the link dependencies for XRay.
  -fxray-modes=<value>    List of modes to link in by default into XRay instrumented binaries.
  -fxray-never-instrument=<value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.
  -fxray-selected-function-group=<value>
                          When using -fxray-function-groups, select which group of functions to instrument. Valid range is 0 to fxray-function-groups - 1
  -fzero-call-used-regs=<value>
                          Clear call-used registers upon function return (AArch64/x86 only)
  -fzvector               Enable System z vector language extension
  -F <value>              Add directory to framework include search path
  --gcc-install-dir=<value>
                          Use GCC installation in the specified directory. The directory ends with path components like 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Note: executables (e.g. ld) used by the compiler are not overridden by the selected GCC installation
  --gcc-toolchain=<value> Specify a directory where Clang can find 'include' and 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Clang will use the GCC installation with the largest version
  -gcodeview-ghash        Emit type record hashes in a .debug$H section
  -gcodeview              Generate CodeView debug information
  -gdwarf-2               Generate source-level debug information with dwarf version 2
  -gdwarf-3               Generate source-level debug information with dwarf version 3
  -gdwarf-4               Generate source-level debug information with dwarf version 4
  -gdwarf-5               Generate source-level debug information with dwarf version 5
  -gdwarf32               Enables DWARF32 format for ELF binaries, if debug information emission is enabled.
  -gdwarf64               Enables DWARF64 format for ELF binaries, if debug information emission is enabled.
  -gdwarf                 Generate source-level debug information with the default dwarf version
  -gembed-source          Embed source text in DWARF debug sections
  -gen-reproducer=<value> Emit reproducer on (option: off, crash (default), error, always)
  -gline-directives-only  Emit debug line info directives only
  -gline-tables-only      Emit debug line number tables only
  -gmodules               Generate debug info with external references to clang modules or precompiled headers
  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections
  -gno-inline-line-tables Don't emit inline line tables.
  --gpu-bundle-output     Bundle output files of HIP device compilation
  --gpu-instrument-lib=<value>
                          Instrument device library for HIP, which is a LLVM bitcode containing __cyg_profile_func_enter and __cyg_profile_func_exit
  --gpu-max-threads-per-block=<value>
                          Default max threads per block for kernel launch bounds for HIP
  -greproducible          Tune debug info to be reproducible.
  -gsplit-dwarf=<value>   Set DWARF fission mode
  -gz=<value>             DWARF debug sections compression type
  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)
  -g                      Generate source-level debug information
  --help-hidden           Display help for hidden options
  -help                   Display available options
  --hip-device-lib=<value>
                          HIP device library
  --hip-link              Link clang-offload-bundler bundles for HIP
  --hip-path=<value>      HIP runtime installation path, used for finding HIP version and adding HIP include path.
  --hip-version=<value>   HIP version in the format of major.minor.patch
  --hipspv-pass-plugin=<dsopath>
                          path to a pass plugin for HIP to SPIR-V passes.
  -H                      Show header includes and nesting depth
  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path
  -iapinotes-modules <directory>
                          Add directory to the API notes search path referenced by module name
  -iapinotes-path <file>  Include API notes file
  -ibuiltininc            Enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it
  -idirafter <value>      Add directory to AFTER include search path
  -iframeworkwithsysroot <directory>
                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot
  -iframework <value>     Add directory to SYSTEM framework search path
  -imacros <file>         Include macros from file before parsing
  -include-pch <file>     Include precompiled header file
  -include <file>         Include file before parsing
  -index-header-map       Make the next included directory (-I or -F) an indexer header map
  -index-ignore-macros    Ignore macros during indexing
  -index-ignore-pcms      Ignore symbols from imported pcm modules
  -index-ignore-system-symbols
                          Ignore symbols from system headers
  -index-record-codegen-name
                          Record the codegen name for symbols
  -index-store-path <value>
                          Enable indexing with the specified data store path
  -index-unit-output-path <path>
                          Use <path> as the output path for this compilation unit in the index unit file
  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix
  -iquote <directory>     Add directory to QUOTE include search path
  -isysroot <dir>         Set the system root directory (usually /)
  -isystem-after <directory>
                          Add directory to end of the SYSTEM include search path
  -isystem <directory>    Add directory to SYSTEM include search path
  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system
  -ivfsstatcache <value>  Use the stat data cached in file instead of doing filesystem syscalls. See clang-stat-cache utility.
  -iwithprefixbefore <dir>
                          Set directory to include search path with prefix
  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix
  -iwithsysroot <directory>
                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot
  -I <dir>                Add directory to the end of the list of include search paths
  --libomptarget-amdgcn-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-amdgpu-bc-path=<value>
                          Path to libomptarget-amdgcn bitcode library
  --libomptarget-nvptx-bc-path=<value>
                          Path to libomptarget-nvptx bitcode library
  -L <dir>                Add directory to library search path
  -mabi=quadword-atomics  Enable quadword atomics ABI on AIX (AIX PPC64 only). Uses lqarx/stqcx. instructions.
  -mabi=vec-default       Enable the default Altivec ABI on AIX (AIX only). Uses only volatile vector registers.
  -mabi=vec-extabi        Enable the extended Altivec ABI on AIX (AIX only). Uses volatile and nonvolatile vector registers
  -mabicalls              Enable SVR4-style position-independent code (Mips only)
  -maix-struct-return     Return all structs in memory (PPC32 only)
  -malign-branch-boundary=<value>
                          Specify the boundary's size to align branches
  -malign-branch=<value>  Specify types of branches to align
  -malign-double          Align doubles to two words in structs (x86 only)
  -mamdgpu-ieee           Sets the IEEE bit in the expected default floating point  mode register. Floating point opcodes that support exception flag gathering quiet and propagate signaling NaN inputs per IEEE 754-2008. This option changes the ABI. (AMDGPU only)
  -mbackchain             Link stack frames through backchain on System Z
  -mbranch-protection=<value>
                          Enforce targets of indirect branches and function returns
  -mbranches-within-32B-boundaries
                          Align selected branches (fused, jcc, jmp) within 32-byte boundary
  -mcmodel=medany         Equivalent to -mcmodel=medium, compatible with RISC-V gcc.
  -mcmodel=medlow         Equivalent to -mcmodel=small, compatible with RISC-V gcc.
  -mcmse                  Allow use of CMSE (Armv8-M Security Extensions)
  -mcode-object-v3        Legacy option to specify code object ABI V3 (AMDGPU only)
  -mcode-object-version=<value>
                          Specify code object ABI version. Defaults to 4. (AMDGPU only)
  -mcrc                   Allow use of CRC instructions (ARM/Mips only)
  -mcumode                Specify CU wavefront execution mode (AMDGPU only)
  -mdefault-visibility-export-mapping=<value>
                          Mapping between default visibility and export
  -mdouble=<n             Force double to be <n> bits
  -MD                     Write a depfile containing user and system headers
  -meabi <value>          Set EABI type. Default depends on triple)
  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)
  -menable-experimental-extensions
                          Enable use of experimental RISC-V extensions.
  -menable-unsafe-fp-math Allow unsafe floating-point math optimizations which may decrease precision
  -mexec-model=<value>    Execution model (WebAssembly only)
  -mexecute-only          Disallow generation of data access to code sections (ARM only)
  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mfentry                Insert calls to fentry at function entry (x86/SystemZ only)
  -mfix-cmse-cve-2021-35465
                          Work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mfix-cortex-a57-aes-1742098
                          Work around Cortex-A57 Erratum 1742098 (ARM only)
  -mfix-cortex-a72-aes-1655431
                          Work around Cortex-A72 Erratum 1655431 (ARM only)
  -mfp32                  Use 32-bit floating point registers (MIPS only)
  -mfp64                  Use 64-bit floating point registers (MIPS only)
  -mframe-chain=<value>   Select the frame chain model used to emit frame records (Arm only).
  -mfunction-return=<value>
                          Replace returns with jumps to ``__x86_return_thunk`` (x86 only, error otherwise)
  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>
  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64/x86 only)
  -mglobal-merge          Enable merging of globals
  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mguard=<value>         Enable or disable Control Flow Guard checks and guard tables emission
  -MG                     Add missing headers to depfile
  -mharden-sls=<value>    Select straight-line speculation hardening scope (ARM/AArch64/X86 only). <arg> must be: all, none, retbr(ARM/AArch64), blr(ARM/AArch64), comdat(ARM/AArch64), nocomdat(ARM/AArch64), return(X86), indirect-jmp(X86)
  -mhvx-ieee-fp           Enable Hexagon HVX IEEE floating-point
  -mhvx-length=<value>    Set Hexagon Vector Length
  -mhvx-qfloat            Enable Hexagon HVX QFloat instructions
  -mhvx=<value>           Enable Hexagon Vector eXtensions
  -mhvx                   Enable Hexagon Vector eXtensions
  -miamcu                 Use Intel MCU ABI
  -mibt-seal              Optimize fcf-protection=branch/full (requires LTO).
  -mignore-xcoff-visibility
                          Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspecified' visibility in XCOFF object file
  --migrate               Run the migrator
  -mincremental-linker-compatible
                          (integrated-as) Emit an object file which can be used with an incremental linker
  -mindirect-branch-cs-prefix
                          Add cs prefix to call and jmp to indirect thunk
  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation
  -mios-version-min=<value>
                          Set iOS deployment target
  -MJ <value>             Write a compilation database entry per input
  -mllvm <value>          Additional arguments to forward to LLVM's option processing
  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)
  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.
  -mlong-double-128       Force long double to be 128 bits
  -mlong-double-64        Force long double to be 64 bits
  -mlong-double-80        Force long double to be 80 bits, padded to 128 bits for storage
  -mlvi-cfi               Enable only control-flow mitigations for Load Value Injection (LVI)
  -mlvi-hardening         Enable all mitigations for Load Value Injection (LVI)
  -mmacos-version-min=<value>
                          Set macOS deployment target
  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.
  -mmark-bti-property     Add .note.gnu.property with BTI to assembly files (AArch64 only)
  -MMD                    Write a depfile containing user headers
  -mmemops                Enable generation of memop instructions
  -mmlir <value>          Additional arguments to forward to MLIR's option processing
  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard
  -mmsa                   Enable MSA ASE (MIPS only)
  -mmt                    Enable MT ASE (MIPS only)
  -MM                     Like -MMD, but also implies -E and writes to stdout by default
  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)
  -mno-bti-at-return-twice
                          Do not add a BTI instruction after a setjmp or other return-twice construct (Arm/AArch64 only)
  -mno-code-object-v3     Legacy option to specify code object ABI V2 (AMDGPU only)
  -mno-crc                Disallow use of CRC instructions (Mips only)
  -mno-cumode             Specify WGP wavefront execution mode (AMDGPU only)
  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)
  -mno-execute-only       Allow generation of data access to code sections (ARM only)
  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)
  -mno-fix-cmse-cve-2021-35465
                          Don't work around VLLDM erratum CVE-2021-35465 (ARM only)
  -mno-fix-cortex-a53-835769
                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)
  -mno-fix-cortex-a57-aes-1742098
                          Don't work around Cortex-A57 Erratum 1742098 (ARM only)
  -mno-fix-cortex-a72-aes-1655431
                          Don't work around Cortex-A72 Erratum 1655431 (ARM only)
  -mno-global-merge       Disable merging of globals
  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)
  -mno-hvx-ieee-fp        Disable Hexagon HVX IEEE floating-point
  -mno-hvx-qfloat         Disable Hexagon HVX QFloat instructions
  -mno-hvx                Disable Hexagon Vector eXtensions
  -mno-implicit-float     Don't generate implicit floating point instructions
  -mno-implicit-sme       Don't generate implicit SME instructions or mode switches
  -mno-incremental-linker-compatible
                          (integrated-as) Emit an object file which cannot be used with an incremental linker
  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)
  -mno-long-calls         Restore the default behaviour of not generating long calls
  -mno-lvi-cfi            Disable control-flow mitigations for Load Value Injection (LVI)
  -mno-lvi-hardening      Disable mitigations for Load Value Injection (LVI)
  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.
  -mno-memops             Disable generation of memop instructions
  -mno-movt               Disallow use of movt/movw pairs (ARM only)
  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard
  -mno-msa                Disable MSA ASE (MIPS only)
  -mno-mt                 Disable MT ASE (MIPS only)
  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.
  -mno-nvj                Disable generation of new-value jumps
  -mno-nvs                Disable generation of new-value stores
  -mno-outline-atomics    Don't generate local calls to out-of-line atomic operations
  -mno-outline            Disable function outlining (AArch64 only)
  -mno-packets            Disable generation of instruction packets
  -mno-relax              Disable linker relaxation
  -mno-restrict-it        Allow generation of complex IT blocks.
  -mno-save-restore       Disable using library calls for save and restore
  -mno-seses              Disable speculative execution side effect suppression (SESES)
  -mno-stack-arg-probe    Disable stack probes which are enabled by default
  -mno-tgsplit            Disable threadgroup split execution mode (AMDGPU only)
  -mno-tls-direct-seg-refs
                          Disable direct TLS access through segment registers
  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)
  -mno-wavefrontsize64    Specify wavefront size 32 mode (AMDGPU only)
  -mnocrc                 Disallow use of CRC instructions (ARM only)
  -mnop-mcount            Generate mcount/__fentry__ calls as nops. To activate they need to be patched in.
  -mnvj                   Enable generation of new-value jumps
  -mnvs                   Enable generation of new-value stores
  -module-dependency-dir <value>
                          Directory to dump module dependencies to
  -module-file-info       Provide information about a particular module file
  -momit-leaf-frame-pointer
                          Omit frame pointer setup for leaf functions
  -moutline-atomics       Generate local calls to out-of-line atomic operations
  -moutline               Enable function outlining (AArch64 only)
  -mpacked-stack          Use packed stack layout (SystemZ only).
  -mpackets               Enable generation of instruction packets
  -mpad-max-prefix-size=<value>
                          Specify maximum number of prefixes to use for padding
  -mprefer-vector-width=<value>
                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.
  -MP                     Create phony target for each dependency (other than main file)
  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility
  -MQ <value>             Specify name of main file output to quote in depfile
  -mrecord-mcount         Generate a __mcount_loc section entry for each __fentry__ call.
  -mrelax-all             (integrated-as) Relax all machine instructions
  -mrelax                 Enable linker relaxation
  -mrestrict-it           Disallow generation of complex IT blocks.
  -mrtd                   Make StdCall calling convention the default
  -msave-restore          Enable using library calls for save and restore
  -mseses                 Enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations
  -msign-return-address=<value>
                          Select return address signing scope
  -mskip-rax-setup        Skip setting up RAX register when passing variable arguments (x86 only)
  -msmall-data-limit=<value>
                          Put global and static data smaller than the limit into a special section
  -msoft-float            Use software floating point
  -mstack-alignment=<value>
                          Set the stack alignment
  -mstack-arg-probe       Enable stack probes
  -mstack-probe-size=<value>
                          Set the stack probe size
  -mstack-protector-guard-offset=<value>
                          Use the given offset for addressing the stack-protector guard
  -mstack-protector-guard-reg=<value>
                          Use the given reg for addressing the stack-protector guard
  -mstack-protector-guard-symbol=<value>
                          Use the given symbol for addressing the stack-protector guard
  -mstack-protector-guard=<value>
                          Use the given guard (global, tls) for addressing the stack-protector guard
  -mstackrealign          Force realign the stack at entry to every function
  -msve-vector-bits=<value>
                          Specify the size in bits of an SVE vector register. Defaults to the vector length agnostic value of "scalable". (AArch64 only)
  -msvr4-struct-return    Return small structs in registers (PPC32 only)
  -mtargetos=<value>      Set the deployment target to be the specified OS and OS version
  -mtgsplit               Enable threadgroup split execution mode (AMDGPU only)
  -mthread-model <value>  The thread model to use. Defaults to 'posix')
  -mtls-direct-seg-refs   Enable direct TLS access through segment registers (default)
  -mtls-size=<value>      Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)
  -mtp=<value>            Thread pointer access method (AArch32/AArch64 only)
  -mtune=<value>          Only supported on AArch64, PowerPC, RISC-V, SystemZ, and X86
  -MT <value>             Specify name of main file output in depfile
  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)
  -munsafe-fp-atomics     Enable unsafe floating point atomic instructions (AMDGPU only)
  -mvscale-max=<value>    Specify the vscale maximum. Defaults to the vector length agnostic value of "0". (AArch64 only)
  -mvscale-min=<value>    Specify the vscale minimum. Defaults to "1". (AArch64 only)
  -MV                     Use NMake/Jom format for the depfile
  -mwavefrontsize64       Specify wavefront size 64 mode (AMDGPU only)
  -M                      Like -MD, but also implies -E and writes to stdout by default
  --no-cuda-include-ptx=<value>
                          Do not include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.
  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.
  --no-default-config     Disable loading default configuration files
  --no-gpu-bundle-output  Do not bundle output files of HIP device compilation
  -no-hip-rt              Do not link against HIP runtime libraries
  --no-offload-arch=<value>
                          Remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. 'all' resets the list to its default value.
  --no-offload-new-driver Don't Use the new driver for offloading compilation.
  --no-system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as not including a system header.
  -nobuiltininc           Disable builtin #include directories
  -nogpuinc               Do not add include paths for CUDA/HIP and do not include the default CUDA/HIP wrapper headers
  -nogpulib               Do not link device library for CUDA/HIP device compilation
  -nohipwrapperinc        Do not include the default HIP wrapper headers and include paths
  -nostdinc++             Disable standard #include directories for the C++ standard library
  -ObjC++                 Treat source input files as Objective-C++ inputs
  -objcmt-allowlist-dir-path=<value>
                          Only modify files with a filename contained in the provided directory path
  -objcmt-atomic-property Make migration to 'atomic' properties
  -objcmt-migrate-all     Enable migration to modern ObjC
  -objcmt-migrate-annotation
                          Enable migration to property and method annotations
  -objcmt-migrate-designated-init
                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods
  -objcmt-migrate-instancetype
                          Enable migration to infer instancetype for method result type
  -objcmt-migrate-literals
                          Enable migration to modern ObjC literals
  -objcmt-migrate-ns-macros
                          Enable migration to NS_ENUM/NS_OPTIONS macros
  -objcmt-migrate-property-dot-syntax
                          Enable migration of setter/getter messages to property-dot syntax
  -objcmt-migrate-property
                          Enable migration to modern ObjC property
  -objcmt-migrate-protocol-conformance
                          Enable migration to add protocol conformance on classes
  -objcmt-migrate-readonly-property
                          Enable migration to modern ObjC readonly property
  -objcmt-migrate-readwrite-property
                          Enable migration to modern ObjC readwrite property
  -objcmt-migrate-subscripting
                          Enable migration to modern ObjC subscripting
  -objcmt-ns-nonatomic-iosonly
                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute
  -objcmt-returns-innerpointer-property
                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER
  -objcmt-whitelist-dir-path=<value>
                          Alias for -objcmt-allowlist-dir-path
  -ObjC                   Treat source input files as Objective-C inputs
  -object-file-name=<file>
                          Set the output <file> for debug infos
  --offload-arch=<value>  CUDA offloading device architecture (e.g. sm_35), or HIP offloading target ID in the form of a device architecture followed by target ID features delimited by a colon. Each target ID feature is a pre-defined string followed by a plus or minus sign (e.g. gfx908:xnack+:sramecc-).  May be specified more than once.
  --offload-device-only   Only compile for the offloading device.
  --offload-host-device   Only compile for the offloading host.
  --offload-host-only     Only compile for the offloading host.
  --offload-link          Use the new offloading linker to perform the link job.
  --offload-new-driver    Use the new driver for offloading compilation.
  --offload=<value>       Specify comma-separated list of offloading target triples (CUDA and HIP only)
  -o <file>               Write output to <file>
  -pedantic               Warn on language extensions
  -pg                     Enable mcount instrumentation
  -pipe                   Use pipes between commands, when possible
  --precompile            Only precompile the input
  -print-diagnostic-options
                          Print all of Clang's warning options
  -print-effective-triple Print the effective target triple
  -print-file-name=<file> Print the full library path of <file>
  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace
  -print-libgcc-file-name Print the library path for the currently used compiler runtime library ("libgcc.a" or "libclang_rt.builtins.*.a")
  -print-prog-name=<name> Print the full program path of <name>
  -print-resource-dir     Print the resource directory pathname
  -print-rocm-search-dirs Print the paths used for finding ROCm installation
  -print-runtime-dir      Print the directory pathname containing clangs runtime libraries
  -print-search-dirs      Print the paths used for finding libraries and programs
  -print-supported-cpus   Print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)
  -print-target-triple    Print the normalized target triple
  -print-targets          Print the registered targets
  -pthread                Support POSIX threads in generated code
  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)
  -P                      Disable linemarker output in -E mode
  -Qn                     Do not emit metadata containing compiler name and version
  -Qunused-arguments      Don't emit warning for unused driver arguments
  -Qy                     Emit metadata containing compiler name and version
  -relocatable-pch        Whether to build a relocatable precompiled header
  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++
  -rewrite-objc           Rewrite Objective-C source to C++
  --rocm-device-lib-path=<value>
                          ROCm device library path. Alternative to rocm-path.
  --rocm-path=<value>     ROCm installation path, used for finding and automatically linking required bitcode libraries.
  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression
  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression
  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression
  -rtlib=<value>          Compiler runtime library to use
  -R<remark>              Enable the specified remark
  -save-stats=<value>     Save llvm statistics.
  -save-stats             Save llvm statistics.
  -save-temps=<value>     Save intermediate compilation results.
  -save-temps             Save intermediate compilation results
  -serialize-diagnostics <value>
                          Serialize compiler diagnostics to a file
  -shared-libsan          Dynamically link the sanitizer runtime
  --start-no-unused-arguments
                          Don't emit warnings about unused arguments for the following arguments
  -static-libsan          Statically link the sanitizer runtime
  -static-openmp          Use the static host OpenMP runtime while linking.
  -std=<value>            Language standard to compile for
  -stdlib++-isystem <directory>
                          Use directory as the C++ standard library include path
  -stdlib=<value>         C++ standard library to use
  -sycl-std=<value>       SYCL language standard to compile for.
  --system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as including a system header.
  -S                      Only run preprocess and compilation steps
  --target=<value>        Generate code for the given target
  -time                   Time individual commands
  -traditional-cpp        Enable some traditional CPP emulation
  -trigraphs              Process trigraph sequences
  -T <script>             Specify <script> as linker script
  -undef                  undef all system defines
  -unwindlib=<value>      Unwind library to use
  -U <macro>              Undefine macro <macro>
  --verify-debug-info     Verify the binary representation of debug output
  -verify-pch             Load and verify that a pre-compiled header file is not stale
  --version               Print version information
  -v                      Show commands to run and use verbose output
  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler
  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED
  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker
  -working-directory <value>
                          Resolve file paths relative to the specified directory
  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor
  -W<warning>             Enable the specified warning
  -w                      Suppress all warnings
  -Xanalyzer <arg>        Pass <arg> to the static analyzer
  -Xarch_device <arg>     Pass <arg> to the CUDA/HIP device compilation
  -Xarch_host <arg>       Pass <arg> to the CUDA/HIP host compilation
  -Xassembler <arg>       Pass <arg> to the assembler
  -Xclang=<arg>           Alias for -Xclang
  -Xclang <arg>           Pass <arg> to clang -cc1
  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation
  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler
  -Xlinker <arg>          Pass <arg> to the linker
  -Xoffload-linker<triple> <arg>
                          Pass <arg> to the offload linkers or the ones idenfied by -<triple>
  -Xopenmp-target=<triple> <arg>
                          Pass <arg> to the target offloading toolchain identified by <triple>.
  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.
  -Xpreprocessor <arg>    Pass <arg> to the preprocessor
  -x <language>           Treat subsequent input files as having type <language>
  -z <arg>                Pass -z <arg> to the linker
=============================================================================================
TESTING: checkCxxRestrict from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:122)
  Check for the CXX restrict keyword equivalent to C99 restrict
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -O3 -march=native -mtune=native  -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
float * __restrict x;
(void)x;
  return 0;
}

          compilers: Set Cxx restrict keyword to : __restrict
            Defined "CXX_RESTRICT" to "__restrict"
Executing: g++ --help | head -n 500
Detected CLANG compiler
=============================================================================================
TESTING: checkCxxComplexFix from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:421)
  Determine if the CXX compiler supports utilities provided by petsccxxcomplexfix.h
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -O3 -march=native -mtune=native  -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

      #include <iostream>
      #include <complex>
      #define Type         int
      #define PetscReal    double
      #define PetscComplex std::complex<double>
      /* The two lines, from petsccxxcomplexfix.h, can cause the combination "C++14 + GCC-4.x libstdc++ library" to fail, complaining imag()
         is not marked const. If the compiler can compile these two lines, it should be able to compile other lines.
      */
      static inline PetscComplex operator-(const Type& lhs, const PetscComplex& rhs) { return PetscReal(lhs) - const_cast<PetscComplex&>(rhs); }
      static inline PetscComplex operator/(const Type& lhs, const PetscComplex& rhs) { return PetscReal(lhs) / const_cast<PetscComplex&>(rhs); }
      

int main(void) {

      Type x = 2;
      PetscComplex y(1.0,1.0),z,w;
      z = x - y;
      w = x / y;
      std::cout << z << w;
      
  return 0;
}

          the CXX compiler supports petsccxxcomplexfix.h
            Defined "HAVE_CXX_COMPLEX_FIX" to "1"
=============================================================================================
TESTING: checkStdAtomic from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:1429)
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

    #if defined(__cplusplus)
    #include <atomic>
    using namespace std;
    #else
    #include <stdatomic.h>
    #endif
    double dcount = 0;
    atomic_flag cat = ATOMIC_FLAG_INIT;
    

int main(void) {

    do {} while (atomic_flag_test_and_set(&cat));
    dcount++;
    atomic_flag_clear(&cat);
    
  return 0;
}

            Defined "HAVE_CXX_ATOMIC" to "1"
=============================================================================================
TESTING: checkCxxLibraries from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:450)
  Determines the libraries needed to link using the C or Fortran compiler C++ source code compiled with C++. Result is stored in cxxlibs
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -O3 -march=native -mtune=native  -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
#include <iostream>
#include <vector>
void asub(void)
{std::vector<int> v;
try  { throw 20;  }  catch (int e)  { std::cout << "An exception occurred";  }}

Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
 int main(int argc,char **args)
{return 0;}
 
Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/confc.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Undefined symbols for architecture arm64:
  "std::__1::locale::use_facet(std::__1::locale::id&) const", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::__1::ios_base::getloc() const", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::logic_error::logic_error(char const*)", referenced from:
      std::length_error::length_error[abi:ue170006](char const*) in confc.o
  "std::length_error::~length_error()", referenced from:
      std::__1::__throw_length_error[abi:ue170006](char const*) in confc.o
  "std::__1::basic_ostream<char, std::__1::char_traits<char>>::sentry::sentry(std::__1::basic_ostream<char, std::__1::char_traits<char>>&)", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::__1::basic_ostream<char, std::__1::char_traits<char>>::sentry::~sentry()", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::__1::cout", referenced from:
      asub() in confc.o
  "std::__1::ctype<char>::id", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::__1::locale::~locale()", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::__1::ios_base::__set_badbit_and_consider_rethrow()", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::__1::ios_base::clear(unsigned int)", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::terminate()", referenced from:
      ___clang_call_terminate in confc.o
  "typeinfo for std::length_error", referenced from:
      std::__1::__throw_length_error[abi:ue170006](char const*) in confc.o
  "typeinfo for int", referenced from:
      asub() in confc.o
      GCC_except_table0 in confc.o
  "vtable for std::length_error", referenced from:
      std::length_error::length_error[abi:ue170006](char const*) in confc.o
  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.
  "operator delete(void*)", referenced from:
      std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char) in confc.o
  "operator new(unsigned long)", referenced from:
      std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char) in confc.o
  "___cxa_allocate_exception", referenced from:
      asub() in confc.o
      std::__1::__throw_length_error[abi:ue170006](char const*) in confc.o
  "___cxa_begin_catch", referenced from:
      asub() in confc.o
      ___clang_call_terminate in confc.o
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "___cxa_end_catch", referenced from:
      asub() in confc.o
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "___cxa_free_exception", referenced from:
      std::__1::__throw_length_error[abi:ue170006](char const*) in confc.o
  "___cxa_throw", referenced from:
      asub() in confc.o
      std::__1::__throw_length_error[abi:ue170006](char const*) in confc.o
  "___gxx_personality_v0", referenced from:
      asub() in confc.o
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
      std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char) in confc.o
      std::__1::__throw_length_error[abi:ue170006](char const*) in confc.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
Possible ERROR while running linker: exit code 1
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Undefined symbols for architecture arm64:
  "std::__1::locale::use_facet(std::__1::locale::id&) const", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::__1::ios_base::getloc() const", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::logic_error::logic_error(char const*)", referenced from:
      std::length_error::length_error[abi:ue170006](char const*) in confc.o
  "std::length_error::~length_error()", referenced from:
      std::__1::__throw_length_error[abi:ue170006](char const*) in confc.o
  "std::__1::basic_ostream<char, std::__1::char_traits<char>>::sentry::sentry(std::__1::basic_ostream<char, std::__1::char_traits<char>>&)", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::__1::basic_ostream<char, std::__1::char_traits<char>>::sentry::~sentry()", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::__1::cout", referenced from:
      asub() in confc.o
  "std::__1::ctype<char>::id", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::__1::locale::~locale()", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::__1::ios_base::__set_badbit_and_consider_rethrow()", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::__1::ios_base::clear(unsigned int)", referenced from:
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "std::terminate()", referenced from:
      ___clang_call_terminate in confc.o
  "typeinfo for std::length_error", referenced from:
      std::__1::__throw_length_error[abi:ue170006](char const*) in confc.o
  "typeinfo for int", referenced from:
      asub() in confc.o
      GCC_except_table0 in confc.o
  "vtable for std::length_error", referenced from:
      std::length_error::length_error[abi:ue170006](char const*) in confc.o
  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.
  "operator delete(void*)", referenced from:
      std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char) in confc.o
  "operator new(unsigned long)", referenced from:
      std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char) in confc.o
  "___cxa_allocate_exception", referenced from:
      asub() in confc.o
      std::__1::__throw_length_error[abi:ue170006](char const*) in confc.o
  "___cxa_begin_catch", referenced from:
      asub() in confc.o
      ___clang_call_terminate in confc.o
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "___cxa_end_catch", referenced from:
      asub() in confc.o
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
  "___cxa_free_exception", referenced from:
      std::__1::__throw_length_error[abi:ue170006](char const*) in confc.o
  "___cxa_throw", referenced from:
      asub() in confc.o
      std::__1::__throw_length_error[abi:ue170006](char const*) in confc.o
  "___gxx_personality_v0", referenced from:
      asub() in confc.o
      std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) in confc.o
      std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char) in confc.o
      std::__1::__throw_length_error[abi:ue170006](char const*) in confc.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
Executing: gcc --help | head -n 500
Detected CLANG compiler
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -O3 -march=native -mtune=native  -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
#include <iostream>
#include <vector>
void asub(void)
{std::vector<int> v;
try  { throw 20;  }  catch (int e)  { std::cout << "An exception occurred";  }}

Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
 int main(int argc,char **args)
{return 0;}
 
Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/confc.o -lc++ 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
          compilers: C++ requires -lc++ to link with C compiler
Executing: gcc --version
stdout:
Apple clang version 15.0.0 (clang-1500.3.9.4)
Target: arm64-apple-darwin23.4.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -O3 -march=native -mtune=native  -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
#include <iostream>
#include <vector>
void asub(void)
{std::vector<int> v;
try  { throw 20;  }  catch (int e)  { std::cout << "An exception occurred";  }}

Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90 
Successful compile:
Source:
      program main
      print*,'testing'
      stop
      end
 
Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/confc.o -lc++ 
          Additional C++ libraries are not needed when using FC linker
Executing: g++ -V
stdout:
clang: error: argument to '-V' is missing (expected 1 value)
clang: error: no input files
=============================================================================================
TESTING: checkFortranNameMangling from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:767)
  Checks Fortran name mangling, and defines HAVE_FORTRAN_UNDERSCORE, HAVE_FORTRAN_NOUNDERSCORE, HAVE_FORTRAN_CAPS
Testing Fortran mangling type underscore with code void d1chk_(void){return;}
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
void d1chk_(void){return;}

Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90 
Successful compile:
Source:
      program main
       call d1chk()

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/confc.o  
          compilers: Fortran name mangling is underscore
            Defined "HAVE_FORTRAN_UNDERSCORE" to "1"
Executing: gfortran-12 --version
stdout:
GNU Fortran (Homebrew GCC 12.4.0) 12.4.0
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
Detected GFortran8plus compiler
            Defined "FORTRAN_CHARLEN_T" to "size_t"
=============================================================================================
TESTING: checkFortranNameManglingDouble from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:805)
  Checks if symbols containing an underscore append an extra underscore, and defines HAVE_FORTRAN_UNDERSCORE_UNDERSCORE if necessary
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
void d1_chk__(void){return;}

Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90 
Successful compile:
Source:
      program main
       call d1_chk()

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/confc.o  
stdout:
Undefined symbols for architecture arm64:
  "_d1_chk_", referenced from:
      _main in conftest.o
     (maybe you meant: _d1_chk__)
ld: symbol(s) not found for architecture arm64
collect2: error: ld returned 1 exit status
Possible ERROR while running linker: exit code 1
stderr:
Undefined symbols for architecture arm64:
  "_d1_chk_", referenced from:
      _main in conftest.o
     (maybe you meant: _d1_chk__)
ld: symbol(s) not found for architecture arm64
collect2: error: ld returned 1 exit status
=============================================================================================
TESTING: checkFortranLibraries from config.compilers(/Users/jacksonbaglino/Petsc-3.20/config/BuildSystem/config/compilers.py:815)
  Substitutes for FLIBS the libraries needed to link using the C or C++ compiler Fortran source code compiled with Fortran. Result is stored in flibs.

    This macro is intended to be used in those situations when it is
    necessary to mix, e.g. C++ and Fortran 77, source code into a single
    program or shared library.

    For example, if object files from a C++ and Fortran 77 compiler must
    be linked together, then the C++ compiler/linker must be used for
    linking (since special C++-ish things need to happen at link time
    like calling global constructors, instantiating templates, enabling
    exception support, etc.).

    However, the Fortran 77 intrinsic and run-time libraries must be
    linked in as well, but the C++ compiler/linker does not know how to
    add these Fortran 77 libraries.

    This code was translated from the autoconf macro which was packaged in
    its current form by Matthew D. Langston <langston@SLAC.Stanford.EDU>.
    However, nearly all of this macro came from the OCTAVE_FLIBS macro in
    octave-2.0.13/aclocal.m4, and full credit should go to John W. Eaton
    for writing this extremely useful macro.
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90 
stdout:
/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90:2:11:
    2 |       use mpi
      |           1
Fatal Error: Cannot open module file 'mpi.mod' for reading at (1): No such file or directory
compilation terminated.
Possible ERROR while running compiler: exit code 1
stderr:
/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90:2:11:

    2 |       use mpi
      |           1
Fatal Error: Cannot open module file 'mpi.mod' for reading at (1): No such file or directory
compilation terminated.
Source:
      program main
      use mpi
      call MPI_Allreduce()

      end

              Compile failed inside link

Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90 
stdout:
/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90:3:2:
    3 |       call MPI_Allreduce()
      |  1    ~~~
Fatal Error: mpif.h: No such file or directory
compilation terminated.
Possible ERROR while running compiler: exit code 1
stderr:
/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90:3:2:

    3 |       call MPI_Allreduce()
      |  1    ~~~
Fatal Error: mpif.h: No such file or directory
compilation terminated.
Source:
      program main
#include <mpif.h>
      call MPI_Allreduce()

      end

              Compile failed inside link

Executing: gfortran-12 -V
stdout:
gfortran-12: error: unrecognized command-line option '-V'
gfortran-12: fatal error: no input files
compilation terminated.
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90 
Successful compile:
Source:
      subroutine asub()
      print*,'testing'
      return
      end

Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
 extern void asub_(void);
int main(int argc,char **args)
{
  asub_();
  return 0;
}
 
Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/confc.o 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Undefined symbols for architecture arm64:
  "__gfortran_st_write", referenced from:
      _asub_ in confc.o
  "__gfortran_st_write_done", referenced from:
      _asub_ in confc.o
  "__gfortran_transfer_character_write", referenced from:
      _asub_ in confc.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
Possible ERROR while running linker: exit code 1
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Undefined symbols for architecture arm64:
  "__gfortran_st_write", referenced from:
      _asub_ in confc.o
  "__gfortran_st_write_done", referenced from:
      _asub_ in confc.o
  "__gfortran_transfer_character_write", referenced from:
      _asub_ in confc.o
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90 
Successful compile:
Source:
      subroutine asub()
      print*,'testing'
      return
      end

Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"
 extern void asub_(void);
int main(int argc,char **args)
{
  asub_();
  return 0;
}
 
Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/confc.o -lgfortran 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
ld: library not found for -lgfortran
clang: error: linker command failed with exit code 1 (use -v to see invocation)
Possible ERROR while running linker: exit code 1
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
ld: library not found for -lgfortran
clang: error: linker command failed with exit code 1 (use -v to see invocation)
          Fortran code cannot directly be linked with C linker, therefore will determine needed Fortran libraries
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest  -v -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o 
stdout:
Driving: gfortran-12 -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest -v -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -mmacosx-version-min=14.0.0 -asm_macosx_version_min=14.0 -nodefaultexport -l gfortran
Using built-in specs.
COLLECT_GCC=gfortran-12
COLLECT_LTO_WRAPPER=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/lto-wrapper
Target: aarch64-apple-darwin23
Configured with: ../configure --prefix=/opt/homebrew/opt/gcc@12 --libdir=/opt/homebrew/opt/gcc@12/lib/gcc/12 --disable-nls --enable-checking=release --with-gcc-major-version-only --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-12 --with-gmp=/opt/homebrew/opt/gmp --with-mpfr=/opt/homebrew/opt/mpfr --with-mpc=/opt/homebrew/opt/libmpc --with-isl=/opt/homebrew/opt/isl --with-zstd=/opt/homebrew/opt/zstd --with-pkgversion='Homebrew GCC 12.4.0' --with-bugurl=https://github.com/Homebrew/homebrew-core/issues --with-system-zlib --build=aarch64-apple-darwin23 --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk --with-ld=/Library/Developer/CommandLineTools/usr/bin/ld-classic
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 12.4.0 (Homebrew GCC 12.4.0) 
Reading specs from /opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../../libgfortran.spec
rename spec lib to liborig
COLLECT_GCC_OPTIONS='-o' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest' '-v' '-Wall' '-ffree-line-length-none' '-ffree-line-length-0' '-Wno-lto-type-mismatch' '-Wno-unused-dummy-argument' '-g' '-O' '-mmacosx-version-min=14.0.0' '-asm_macosx_version_min=14.0' '-nodefaultexport' '-mcpu=apple-m1' '-mlittle-endian' '-mabi=lp64' '-dumpdir' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/'
COMPILER_PATH=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/
LIBRARY_PATH=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../../
COLLECT_GCC_OPTIONS='-o' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest' '-v' '-Wall' '-ffree-line-length-none' '-ffree-line-length-0' '-Wno-lto-type-mismatch' '-Wno-unused-dummy-argument' '-g' '-O' '-mmacosx-version-min=14.0.0' '-asm_macosx_version_min=14.0' '-nodefaultexport' '-mcpu=apple-m1' '-mlittle-endian' '-mabi=lp64' '-dumpdir' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.'
 /opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/collect2 -demangle -syslibroot /Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/ -dynamic -arch arm64 -platform_version macos 14.0.0 0.0 -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12 -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../.. -lemutls_w -lheapt_w -ld_classic -bind_at_load -commons use_dylibs -search_paths_first -no_compact_unwind /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -lgfortran -lgcc -lquadmath -lSystem -no_compact_unwind -rpath @loader_path -rpath /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12 -rpath /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc -rpath /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12 -idsym
Possible ERROR while running linker:exit code 0
stderr:
Driving: gfortran-12 -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest -v -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -mmacosx-version-min=14.0.0 -asm_macosx_version_min=14.0 -nodefaultexport -l gfortran
Using built-in specs.
COLLECT_GCC=gfortran-12
COLLECT_LTO_WRAPPER=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/lto-wrapper
Target: aarch64-apple-darwin23
Configured with: ../configure --prefix=/opt/homebrew/opt/gcc@12 --libdir=/opt/homebrew/opt/gcc@12/lib/gcc/12 --disable-nls --enable-checking=release --with-gcc-major-version-only --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-12 --with-gmp=/opt/homebrew/opt/gmp --with-mpfr=/opt/homebrew/opt/mpfr --with-mpc=/opt/homebrew/opt/libmpc --with-isl=/opt/homebrew/opt/isl --with-zstd=/opt/homebrew/opt/zstd --with-pkgversion='Homebrew GCC 12.4.0' --with-bugurl=https://github.com/Homebrew/homebrew-core/issues --with-system-zlib --build=aarch64-apple-darwin23 --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk --with-ld=/Library/Developer/CommandLineTools/usr/bin/ld-classic
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 12.4.0 (Homebrew GCC 12.4.0) 
Reading specs from /opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../../libgfortran.spec
rename spec lib to liborig
COLLECT_GCC_OPTIONS='-o' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest' '-v' '-Wall' '-ffree-line-length-none' '-ffree-line-length-0' '-Wno-lto-type-mismatch' '-Wno-unused-dummy-argument' '-g' '-O' '-mmacosx-version-min=14.0.0' '-asm_macosx_version_min=14.0' '-nodefaultexport' '-mcpu=apple-m1' '-mlittle-endian' '-mabi=lp64' '-dumpdir' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/'
COMPILER_PATH=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/
LIBRARY_PATH=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../../
COLLECT_GCC_OPTIONS='-o' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest' '-v' '-Wall' '-ffree-line-length-none' '-ffree-line-length-0' '-Wno-lto-type-mismatch' '-Wno-unused-dummy-argument' '-g' '-O' '-mmacosx-version-min=14.0.0' '-asm_macosx_version_min=14.0' '-nodefaultexport' '-mcpu=apple-m1' '-mlittle-endian' '-mabi=lp64' '-dumpdir' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.'
 /opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/collect2 -demangle -syslibroot /Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/ -dynamic -arch arm64 -platform_version macos 14.0.0 0.0 -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12 -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../.. -lemutls_w -lheapt_w -ld_classic -bind_at_load -commons use_dylibs -search_paths_first -no_compact_unwind /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -lgfortran -lgcc -lquadmath -lSystem -no_compact_unwind -rpath @loader_path -rpath /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12 -rpath /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc -rpath /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12 -idsym
Linker output before filtering:
Driving: gfortran-12 -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest -v -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -mmacosx-version-min=14.0.0 -asm_macosx_version_min=14.0 -nodefaultexport -l gfortran
Using built-in specs.
COLLECT_GCC=gfortran-12
COLLECT_LTO_WRAPPER=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/lto-wrapper
Target: aarch64-apple-darwin23
Configured with: ../configure --prefix=/opt/homebrew/opt/gcc@12 --libdir=/opt/homebrew/opt/gcc@12/lib/gcc/12 --disable-nls --enable-checking=release --with-gcc-major-version-only --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-12 --with-gmp=/opt/homebrew/opt/gmp --with-mpfr=/opt/homebrew/opt/mpfr --with-mpc=/opt/homebrew/opt/libmpc --with-isl=/opt/homebrew/opt/isl --with-zstd=/opt/homebrew/opt/zstd --with-pkgversion='Homebrew GCC 12.4.0' --with-bugurl=https://github.com/Homebrew/homebrew-core/issues --with-system-zlib --build=aarch64-apple-darwin23 --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk --with-ld=/Library/Developer/CommandLineTools/usr/bin/ld-classic
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 12.4.0 (Homebrew GCC 12.4.0) 
Reading specs from /opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../../libgfortran.spec
rename spec lib to liborig
COLLECT_GCC_OPTIONS='-o' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest' '-v' '-Wall' '-ffree-line-length-none' '-ffree-line-length-0' '-Wno-lto-type-mismatch' '-Wno-unused-dummy-argument' '-g' '-O' '-mmacosx-version-min=14.0.0' '-asm_macosx_version_min=14.0' '-nodefaultexport' '-mcpu=apple-m1' '-mlittle-endian' '-mabi=lp64' '-dumpdir' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/'
COMPILER_PATH=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/
LIBRARY_PATH=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../../
COLLECT_GCC_OPTIONS='-o' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest' '-v' '-Wall' '-ffree-line-length-none' '-ffree-line-length-0' '-Wno-lto-type-mismatch' '-Wno-unused-dummy-argument' '-g' '-O' '-mmacosx-version-min=14.0.0' '-asm_macosx_version_min=14.0' '-nodefaultexport' '-mcpu=apple-m1' '-mlittle-endian' '-mabi=lp64' '-dumpdir' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.'
 /opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/collect2 -demangle -syslibroot /Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/ -dynamic -arch arm64 -platform_version macos 14.0.0 0.0 -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12 -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../.. -lemutls_w -lheapt_w -ld_classic -bind_at_load -commons use_dylibs -search_paths_first -no_compact_unwind /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -lgfortran -lgcc -lquadmath -lSystem -no_compact_unwind -rpath @loader_path -rpath /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12 -rpath /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc -rpath /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12 -idsym
Linker output after filtering:
Driving: gfortran-12 -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest -v -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -mmacosx-version-min=14.0.0 -asm_macosx_version_min=14.0 -nodefaultexport -l gfortran
Using built-in specs.
COLLECT_GCC=gfortran-12
COLLECT_LTO_WRAPPER=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/lto-wrapper
Target: aarch64-apple-darwin23
Configured with: ../configure --prefix=/opt/homebrew/opt/gcc@12 --libdir=/opt/homebrew/opt/gcc@12/lib/gcc/12 --disable-nls --enable-checking=release --with-gcc-major-version-only --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-12 --with-gmp=/opt/homebrew/opt/gmp --with-mpfr=/opt/homebrew/opt/mpfr --with-mpc=/opt/homebrew/opt/libmpc --with-isl=/opt/homebrew/opt/isl --with-zstd=/opt/homebrew/opt/zstd --with-pkgversion='Homebrew GCC 12.4.0' --with-bugurl=https://github.com/Homebrew/homebrew-core/issues --with-system-zlib --build=aarch64-apple-darwin23 --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk --with-ld=/Library/Developer/CommandLineTools/usr/bin/ld-classic
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 12.4.0 (Homebrew GCC 12.4.0) 
Reading specs from /opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../../libgfortran.spec
rename spec lib to liborig
COLLECT_GCC_OPTIONS='-o' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest' '-v' '-Wall' '-ffree-line-length-none' '-ffree-line-length-0' '-Wno-lto-type-mismatch' '-Wno-unused-dummy-argument' '-g' '-O' '-mmacosx-version-min=14.0.0' '-asm_macosx_version_min=14.0' '-nodefaultexport' '-mcpu=apple-m1' '-mlittle-endian' '-mabi=lp64' '-dumpdir' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/'
COMPILER_PATH=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/
LIBRARY_PATH=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../../
COLLECT_GCC_OPTIONS='-o' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest' '-v' '-Wall' '-ffree-line-length-none' '-ffree-line-length-0' '-Wno-lto-type-mismatch' '-Wno-unused-dummy-argument' '-g' '-O' '-mmacosx-version-min=14.0.0' '-asm_macosx_version_min=14.0' '-nodefaultexport' '-mcpu=apple-m1' '-mlittle-endian' '-mabi=lp64' '-dumpdir' '/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.'
 /opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/collect2 -demangle -syslibroot /Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/ -dynamic -arch arm64 -platform_version macos 14.0.0 0.0 -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12 -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../.. -lemutls_w -lheapt_w -ld_classic -bind_at_load -commons use_dylibs -search_paths_first -no_compact_unwind /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o -lgfortran -lgcc -lquadmath -lSystem -no_compact_unwind -rpath @loader_path -rpath /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12 -rpath /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc -rpath /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12 -idsym
          compilers: Checking arg Driving:
          compilers: Unknown arg Driving:
          compilers: Checking arg gfortran-12
          compilers: Unknown arg gfortran-12
          compilers: Checking arg -o
          compilers: Unknown arg -o
          compilers: Checking arg /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest
          compilers: Unknown arg /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest
          compilers: Checking arg -v
          compilers: Unknown arg -v
          compilers: Checking arg -Wl,-ld_classic
          compilers: Unknown arg -Wl,-ld_classic
          compilers: Checking arg -Wl,-bind_at_load
          compilers: Unknown arg -Wl,-bind_at_load
          compilers: Checking arg -Wl,-commons,use_dylibs
          compilers: Unknown arg -Wl,-commons,use_dylibs
          compilers: Checking arg -Wl,-search_paths_first
          compilers: Unknown arg -Wl,-search_paths_first
          compilers: Checking arg -Wl,-no_compact_unwind
          compilers: Unknown arg -Wl,-no_compact_unwind
          compilers: Checking arg -Wall
          compilers: Unknown arg -Wall
          compilers: Checking arg -ffree-line-length-none
          compilers: Unknown arg -ffree-line-length-none
          compilers: Checking arg -ffree-line-length-0
          compilers: Unknown arg -ffree-line-length-0
          compilers: Checking arg -Wno-lto-type-mismatch
          compilers: Unknown arg -Wno-lto-type-mismatch
          compilers: Checking arg -Wno-unused-dummy-argument
          compilers: Unknown arg -Wno-unused-dummy-argument
          compilers: Checking arg -g
          compilers: Unknown arg -g
          compilers: Checking arg -O
          compilers: Unknown arg -O
          compilers: Checking arg /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o
          compilers: Unknown arg /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o
          compilers: Checking arg -mmacosx-version-min=14.0.0
          compilers: Unknown arg -mmacosx-version-min=14.0.0
          compilers: Checking arg -asm_macosx_version_min=14.0
          compilers: Unknown arg -asm_macosx_version_min=14.0
          compilers: Checking arg -nodefaultexport
          compilers: Unknown arg -nodefaultexport
          compilers: Checking arg -l
          compilers: Found canonical library: -lgfortran
          compilers: Checking arg Using
          compilers: Unknown arg Using
          compilers: Checking arg built-in
          compilers: Unknown arg built-in
          compilers: Checking arg specs.
          compilers: Unknown arg specs.
          compilers: Checking arg COLLECT_GCC=gfortran-12
          compilers: Unknown arg COLLECT_GCC=gfortran-12
          compilers: Checking arg COLLECT_LTO_WRAPPER=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/lto-wrapper
          compilers: Unknown arg COLLECT_LTO_WRAPPER=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/lto-wrapper
          compilers: Checking arg Target:
          compilers: Unknown arg Target:
          compilers: Checking arg aarch64-apple-darwin23
          compilers: Unknown arg aarch64-apple-darwin23
          compilers: Checking arg Configured
          compilers: Unknown arg Configured
          compilers: Checking arg with:
          compilers: Unknown arg with:
          compilers: Checking arg ../configure
          compilers: Unknown arg ../configure
          compilers: Checking arg --prefix=/opt/homebrew/opt/gcc@12
          compilers: Unknown arg --prefix=/opt/homebrew/opt/gcc@12
          compilers: Checking arg --libdir=/opt/homebrew/opt/gcc@12/lib/gcc/12
          compilers: Unknown arg --libdir=/opt/homebrew/opt/gcc@12/lib/gcc/12
          compilers: Checking arg --disable-nls
          compilers: Unknown arg --disable-nls
          compilers: Checking arg --enable-checking=release
          compilers: Unknown arg --enable-checking=release
          compilers: Checking arg --with-gcc-major-version-only
          compilers: Unknown arg --with-gcc-major-version-only
          compilers: Checking arg --enable-languages=c,c++,objc,obj-c++,fortran
          compilers: Unknown arg --enable-languages=c,c++,objc,obj-c++,fortran
          compilers: Checking arg --program-suffix=-12
          compilers: Unknown arg --program-suffix=-12
          compilers: Checking arg --with-gmp=/opt/homebrew/opt/gmp
          compilers: Unknown arg --with-gmp=/opt/homebrew/opt/gmp
          compilers: Checking arg --with-mpfr=/opt/homebrew/opt/mpfr
          compilers: Unknown arg --with-mpfr=/opt/homebrew/opt/mpfr
          compilers: Checking arg --with-mpc=/opt/homebrew/opt/libmpc
          compilers: Unknown arg --with-mpc=/opt/homebrew/opt/libmpc
          compilers: Checking arg --with-isl=/opt/homebrew/opt/isl
          compilers: Unknown arg --with-isl=/opt/homebrew/opt/isl
          compilers: Checking arg --with-zstd=/opt/homebrew/opt/zstd
          compilers: Unknown arg --with-zstd=/opt/homebrew/opt/zstd
          compilers: Checking arg --with-pkgversion=
          compilers: Unknown arg --with-pkgversion=
          compilers: Checking arg --with-bugurl=https://github.com/Homebrew/homebrew-core/issues
          compilers: Unknown arg --with-bugurl=https://github.com/Homebrew/homebrew-core/issues
          compilers: Checking arg --with-system-zlib
          compilers: Unknown arg --with-system-zlib
          compilers: Checking arg --build=aarch64-apple-darwin23
          compilers: Unknown arg --build=aarch64-apple-darwin23
          compilers: Checking arg --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk
          compilers: Unknown arg --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk
          compilers: Checking arg --with-ld=/Library/Developer/CommandLineTools/usr/bin/ld-classic
          compilers: Unknown arg --with-ld=/Library/Developer/CommandLineTools/usr/bin/ld-classic
          compilers: Checking arg Thread
          compilers: Unknown arg Thread
          compilers: Checking arg model:
          compilers: Unknown arg model:
          compilers: Checking arg posix
          compilers: Unknown arg posix
          compilers: Checking arg Supported
          compilers: Unknown arg Supported
          compilers: Checking arg LTO
          compilers: Unknown arg LTO
          compilers: Checking arg compression
          compilers: Unknown arg compression
          compilers: Checking arg algorithms:
          compilers: Unknown arg algorithms:
          compilers: Checking arg zlib
          compilers: Unknown arg zlib
          compilers: Checking arg zstd
          compilers: Unknown arg zstd
          compilers: Checking arg gcc
          compilers: Unknown arg gcc
          compilers: Checking arg version
          compilers: Unknown arg version
          compilers: Checking arg 12.4.0
          compilers: Unknown arg 12.4.0
          compilers: Checking arg (Homebrew
          compilers: Unknown arg (Homebrew
          compilers: Checking arg GCC
          compilers: Unknown arg GCC
          compilers: Checking arg 12.4.0)
          compilers: Unknown arg 12.4.0)
          compilers: Checking arg Reading
          compilers: Unknown arg Reading
          compilers: Checking arg specs
          compilers: Unknown arg specs
          compilers: Checking arg from
          compilers: Unknown arg from
          compilers: Checking arg /opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../../libgfortran.spec
          compilers: Unknown arg /opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../../libgfortran.spec
          compilers: Checking arg rename
          compilers: Unknown arg rename
          compilers: Checking arg spec
          compilers: Unknown arg spec
          compilers: Checking arg lib
          compilers: Unknown arg lib
          compilers: Checking arg to
          compilers: Unknown arg to
          compilers: Checking arg liborig
          compilers: Unknown arg liborig
          compilers: Checking arg COLLECT_GCC_OPTIONS=
          compilers: Unknown arg COLLECT_GCC_OPTIONS=
          compilers: Checking arg COMPILER_PATH=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/
          compilers: Skipping arg COMPILER_PATH=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/
          compilers: Checking arg LIBRARY_PATH=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../../
          compilers: Skipping arg LIBRARY_PATH=/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/:/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../../
          compilers: Checking arg COLLECT_GCC_OPTIONS=
          compilers: Unknown arg COLLECT_GCC_OPTIONS=
          compilers: Checking arg /opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/collect2
          compilers: Unknown arg /opt/homebrew/Cellar/gcc@12/12.4.0/bin/../libexec/gcc/aarch64-apple-darwin23/12/collect2
          compilers: Checking arg -demangle
          compilers: Unknown arg -demangle
          compilers: Checking arg -syslibroot
          compilers: Unknown arg -syslibroot
          compilers: Checking arg /Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/
          compilers: Unknown arg /Library/Developer/CommandLineTools/SDKs/MacOSX14.sdk/
          compilers: Checking arg -dynamic
          compilers: Unknown arg -dynamic
          compilers: Checking arg -arch
          compilers: Unknown arg -arch
          compilers: Checking arg arm64
          compilers: Unknown arg arm64
          compilers: Checking arg -platform_version
          compilers: Unknown arg -platform_version
          compilers: Checking arg macos
          compilers: Unknown arg macos
          compilers: Checking arg 14.0.0
          compilers: Unknown arg 14.0.0
          compilers: Checking arg 0.0
          compilers: Unknown arg 0.0
          compilers: Checking arg -o
          compilers: Unknown arg -o
          compilers: Checking arg /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest
          compilers: Unknown arg /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest
          compilers: Checking arg -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12
          compilers: Found library directory: -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12
          compilers: Checking arg -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc
          compilers: Found library directory: -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc
          compilers: Checking arg -L/opt/homebrew/Cellar/gcc@12/12.4.0/bin/../lib/gcc/12/gcc/aarch64-apple-darwin23/12/../../..
          compilers: Found library directory: -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12
          compilers: Checking arg -lemutls_w
          compilers: Found library: -lemutls_w
          compilers: Checking arg -lheapt_w
          compilers: Found library: -lheapt_w
          compilers: Checking arg -ld_classic
          compilers: Found library: -ld_classic
          compilers: Checking arg -bind_at_load
          compilers: Unknown arg -bind_at_load
          compilers: Checking arg -commons
          compilers: Unknown arg -commons
          compilers: Checking arg use_dylibs
          compilers: Unknown arg use_dylibs
          compilers: Checking arg -search_paths_first
          compilers: Unknown arg -search_paths_first
          compilers: Checking arg -no_compact_unwind
          compilers: Unknown arg -no_compact_unwind
          compilers: Checking arg /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o
          compilers: Unknown arg /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers/conftest.o
          compilers: Checking arg -lgfortran
          compilers: Found library: -lgfortran
          compilers: Checking arg -lgcc
          compilers: Found system library therefore skipping: -lgcc
          compilers: Checking arg -lquadmath
          compilers: Found library: -lquadmath
          compilers: Checking arg -lSystem
          compilers: Found system library therefore skipping: -lSystem
          compilers: Checking arg -no_compact_unwind
          compilers: Unknown arg -no_compact_unwind
          compilers: Checking arg -rpath
          compilers: Checking arg -rpath
          compilers: Found -rpath library: /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12
          compilers: Checking arg -rpath
          compilers: Found -rpath library: /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc
          compilers: Checking arg -rpath
          compilers: Found -rpath library: /opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12
          compilers: Checking arg -idsym
          compilers: Unknown arg -idsym
          compilers: Libraries needed to link Fortran code with the C linker: ['-lgfortran', '-L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12', '-L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc', '-L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12', '-lemutls_w', '-lheapt_w', '-ld_classic', '-lgfortran', '-lquadmath', '-Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12', '-Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc', '-Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12']
          compilers: Libraries needed to link Fortran main with the C linker: []
          compilers: Check that Fortran libraries can be used with Fortran as the linker
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -lgfortran -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12 -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12 -lemutls_w -lheapt_w -ld_classic -lgfortran -lquadmath -Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12 -Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc -Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12 
======== Checking running linked program
Executing: gfortran-12 -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.F90 
Successful compile:
Source:
      program main

      end

Executing: gfortran-12  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -lgfortran -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12 -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12 -lemutls_w -lheapt_w -ld_classic -lgfortran -lquadmath -Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12 -Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc -Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12 
Testing executable /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest to see if it can be run
Executing: /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest
Running Executable with threads to time it out at 60
Executing: /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest
          compilers: Check that Fortran libraries can be used with C as the linker
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -lgfortran -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12 -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12 -lemutls_w -lheapt_w -ld_classic -lgfortran -lquadmath -Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12 -Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc -Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
======== Checking running linked program
Executing: gcc -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.libraries -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.c 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: gcc  -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest  -Wl,-ld_classic -Wl,-bind_at_load -Wl,-commons,use_dylibs -Wl,-search_paths_first -Wl,-no_compact_unwind  -fPIC -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fno-stack-check -Qunused-arguments -fvisibility=hidden -O3 -march=native -mtune=native /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -lgfortran -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12 -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc -L/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12 -lemutls_w -lheapt_w -ld_classic -lgfortran -lquadmath -Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc/aarch64-apple-darwin23/12 -Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12/gcc -Wl,-rpath,/opt/homebrew/Cellar/gcc@12/12.4.0/lib/gcc/12 
stdout:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Possible ERROR while running linker:exit code 0
stderr:
ld: warning: -commons use_dylibs is no longer supported, using error treatment instead
ld: warning: -bind_at_load is deprecated on macOS
Testing executable /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest to see if it can be run
Executing: /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest
Running Executable with threads to time it out at 60
Executing: /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest
          compilers: Check that Fortran libraries can be used with C++ as linker
Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -O3 -march=native -mtune=native  -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
Successful compile:
Source:
#include "confdefs.h"
#include "conffix.h"

int main(void) {
  return 0;
}

Executing: g++ -c -o /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.o -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilerFlags -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers -I/var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.compilers  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -fstack-protector -fno-stack-check -fvisibility=hidden -O3 -march=native -mtune=native  -std=gnu++20  /var/folders/p0/xtpxhqz52q73hr2_1p3fznp80000gn/T/petsc-bvvqejf8/config.setCompilers/conftest.cc 
